
smartHome_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000072dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000404  00800060  000072dc  00007370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000021b  00800464  00800464  00007774  2**0
                  ALLOC
  3 .stab         00008c04  00000000  00000000  00007774  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000072aa  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00017622  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000177c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000179b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00019dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0001b145  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001c31c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0001c4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001c7d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001d140  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__vector_1>
       8:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__vector_2>
       c:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f2 e7       	ldi	r31, 0x72	; 114
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <main>
      8a:	0c 94 6c 39 	jmp	0x72d8	; 0x72d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 35 36 	jmp	0x6c6a	; 0x6c6a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e9       	ldi	r26, 0x9B	; 155
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 51 36 	jmp	0x6ca2	; 0x6ca2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 41 36 	jmp	0x6c82	; 0x6c82 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5d 36 	jmp	0x6cba	; 0x6cba <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 41 36 	jmp	0x6c82	; 0x6c82 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5d 36 	jmp	0x6cba	; 0x6cba <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 35 36 	jmp	0x6c6a	; 0x6c6a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e9       	ldi	r24, 0x9B	; 155
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 51 36 	jmp	0x6ca2	; 0x6ca2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3d 36 	jmp	0x6c7a	; 0x6c7a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e9       	ldi	r22, 0x9B	; 155
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 59 36 	jmp	0x6cb2	; 0x6cb2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 41 36 	jmp	0x6c82	; 0x6c82 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5d 36 	jmp	0x6cba	; 0x6cba <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 41 36 	jmp	0x6c82	; 0x6c82 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5d 36 	jmp	0x6cba	; 0x6cba <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 41 36 	jmp	0x6c82	; 0x6c82 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5d 36 	jmp	0x6cba	; 0x6cba <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 45 36 	jmp	0x6c8a	; 0x6c8a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 61 36 	jmp	0x6cc2	; 0x6cc2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 3d 36 	jmp	0x6c7a	; 0x6c7a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 59 36 	jmp	0x6cb2	; 0x6cb2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 55       	subi	r30, 0x5D	; 93
     aca:	fd 4f       	sbci	r31, 0xFD	; 253
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_Init>:

static void(*UART_CallBack)(void) = NULL;


void UART_Init(UART_Config_t  UART_CONFIG)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_Init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_Init+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	69 83       	std	Y+1, r22	; 0x01
     e3c:	7a 83       	std	Y+2, r23	; 0x02
     e3e:	8b 83       	std	Y+3, r24	; 0x03
     e40:	9c 83       	std	Y+4, r25	; 0x04
		
	/* Set baud rate  */
	//PtrUBRRL->UBRRL_BIT = UART_CONFIG.BuadRate;
	PtrUBRRL->UBRRL_BIT =8;
     e42:	e0 91 ad 03 	lds	r30, 0x03AD
     e46:	f0 91 ae 03 	lds	r31, 0x03AE
     e4a:	88 e0       	ldi	r24, 0x08	; 8
     e4c:	80 83       	st	Z, r24
	
	/* select word size "not more than 8bits "*/
	
	//PtrUCSRC->UCSZ_BIT = UART_CONFIG.WordSize;
	
	UART_UCSRC_REG = 0X86;
     e4e:	e0 e4       	ldi	r30, 0x40	; 64
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	86 e8       	ldi	r24, 0x86	; 134
     e54:	80 83       	st	Z, r24

	
	//PtrUBRRH->UBRRH_BIT =0;
	
	/* Enable Tx  */
	PtrUCSRB->TXEN_BIT = Enable;
     e56:	e0 91 a7 03 	lds	r30, 0x03A7
     e5a:	f0 91 a8 03 	lds	r31, 0x03A8
     e5e:	80 81       	ld	r24, Z
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	80 83       	st	Z, r24
	
	/* Enable Rx  */
	PtrUCSRB->RXEN_BIT = Enable;
     e64:	e0 91 a7 03 	lds	r30, 0x03A7
     e68:	f0 91 a8 03 	lds	r31, 0x03A8
     e6c:	80 81       	ld	r24, Z
     e6e:	80 61       	ori	r24, 0x10	; 16
     e70:	80 83       	st	Z, r24
    PtrUCSRB->RXCIE_BIT = Enable;
     e72:	e0 91 a7 03 	lds	r30, 0x03A7
     e76:	f0 91 a8 03 	lds	r31, 0x03A8
     e7a:	80 81       	ld	r24, Z
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	80 83       	st	Z, r24
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <UART_sendByte>:

void UART_sendByte( u8 Data)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	0f 92       	push	r0
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	89 83       	std	Y+1, r24	; 0x01
	
	/* Enable Tx  */
	PtrUCSRB->TXEN_BIT = Enable;
     e9a:	e0 91 a7 03 	lds	r30, 0x03A7
     e9e:	f0 91 a8 03 	lds	r31, 0x03A8
     ea2:	80 81       	ld	r24, Z
     ea4:	88 60       	ori	r24, 0x08	; 8
     ea6:	80 83       	st	Z, r24
	
	while(PtrUCSRA->UDRE_BIT == 0);
     ea8:	e0 91 a5 03 	lds	r30, 0x03A5
     eac:	f0 91 a6 03 	lds	r31, 0x03A6
     eb0:	80 81       	ld	r24, Z
     eb2:	80 72       	andi	r24, 0x20	; 32
     eb4:	88 23       	and	r24, r24
     eb6:	c1 f3       	breq	.-16     	; 0xea8 <UART_sendByte+0x1a>
	
	/* write data to UDR register  */
	PtrUDR->UDR_REG = Data;
     eb8:	e0 91 a3 03 	lds	r30, 0x03A3
     ebc:	f0 91 a4 03 	lds	r31, 0x03A4
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	80 83       	st	Z, r24
}
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <UART_sendString>:

void UART_sendString(u8 *String)
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <UART_sendString+0x6>
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	9a 83       	std	Y+2, r25	; 0x02
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	15 c0       	rjmp	.+42     	; 0xf06 <UART_sendString+0x3a>
	while(*String != '\0')
	{
		PtrUDR->UDR_REG =*String;
     edc:	e0 91 a3 03 	lds	r30, 0x03A3
     ee0:	f0 91 a4 03 	lds	r31, 0x03A4
     ee4:	a9 81       	ldd	r26, Y+1	; 0x01
     ee6:	ba 81       	ldd	r27, Y+2	; 0x02
     ee8:	8c 91       	ld	r24, X
     eea:	80 83       	st	Z, r24
		/* wait until UDR reg is ready to write new data  */
		while(PtrUCSRA->UDRE_BIT == 0);
     eec:	e0 91 a5 03 	lds	r30, 0x03A5
     ef0:	f0 91 a6 03 	lds	r31, 0x03A6
     ef4:	80 81       	ld	r24, Z
     ef6:	80 72       	andi	r24, 0x20	; 32
     ef8:	88 23       	and	r24, r24
     efa:	c1 f3       	breq	.-16     	; 0xeec <UART_sendString+0x20>
		
		String++;
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
	PtrUDR->UDR_REG = Data;
}

void UART_sendString(u8 *String)
{
	while(*String != '\0')
     f06:	e9 81       	ldd	r30, Y+1	; 0x01
     f08:	fa 81       	ldd	r31, Y+2	; 0x02
     f0a:	80 81       	ld	r24, Z
     f0c:	88 23       	and	r24, r24
     f0e:	31 f7       	brne	.-52     	; 0xedc <UART_sendString+0x10>
		
		String++;
	}
	
	//PtrUDR->UDR_REG = '\0';
}
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <UART_receiveByteSynchNonBlocking>:


void UART_receiveByteSynchNonBlocking(u8 *data)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <UART_receiveByteSynchNonBlocking+0x6>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
	while(PtrUCSRA->RXC_BIT == 0 && Time_Out2 > 0)
	{
		Time_Out2--;
	}
	*/
	while(PtrUCSRA->RXC_BIT == 0);
     f28:	e0 91 a5 03 	lds	r30, 0x03A5
     f2c:	f0 91 a6 03 	lds	r31, 0x03A6
     f30:	80 81       	ld	r24, Z
     f32:	80 78       	andi	r24, 0x80	; 128
     f34:	88 23       	and	r24, r24
     f36:	c1 f3       	breq	.-16     	; 0xf28 <UART_receiveByteSynchNonBlocking+0xe>

	*data = PtrUDR->UDR_REG;
     f38:	e0 91 a3 03 	lds	r30, 0x03A3
     f3c:	f0 91 a4 03 	lds	r31, 0x03A4
     f40:	80 81       	ld	r24, Z
     f42:	e9 81       	ldd	r30, Y+1	; 0x01
     f44:	fa 81       	ldd	r31, Y+2	; 0x02
     f46:	80 83       	st	Z, r24
}
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <UART_receiveByteSynchNonBlocking2>:

volatile u8 Time_Out3 = 200;


u8 UART_receiveByteSynchNonBlocking2()
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	68 97       	sbiw	r28, 0x18	; 24
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	c3 c0       	rjmp	.+390    	; 0x10ee <UART_receiveByteSynchNonBlocking2+0x19c>

	while(PtrUCSRA->RXC_BIT == 0 && Time_Out3 > 0)
	{
		Time_Out3--;
     f68:	80 91 b3 03 	lds	r24, 0x03B3
     f6c:	81 50       	subi	r24, 0x01	; 1
     f6e:	80 93 b3 03 	sts	0x03B3, r24
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	a0 ea       	ldi	r26, 0xA0	; 160
     f78:	b0 e4       	ldi	r27, 0x40	; 64
     f7a:	8d 8b       	std	Y+21, r24	; 0x15
     f7c:	9e 8b       	std	Y+22, r25	; 0x16
     f7e:	af 8b       	std	Y+23, r26	; 0x17
     f80:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f82:	6d 89       	ldd	r22, Y+21	; 0x15
     f84:	7e 89       	ldd	r23, Y+22	; 0x16
     f86:	8f 89       	ldd	r24, Y+23	; 0x17
     f88:	98 8d       	ldd	r25, Y+24	; 0x18
     f8a:	2b ea       	ldi	r18, 0xAB	; 171
     f8c:	3a ea       	ldi	r19, 0xAA	; 170
     f8e:	4a ea       	ldi	r20, 0xAA	; 170
     f90:	50 e4       	ldi	r21, 0x40	; 64
     f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	89 8b       	std	Y+17, r24	; 0x11
     f9c:	9a 8b       	std	Y+18, r25	; 0x12
     f9e:	ab 8b       	std	Y+19, r26	; 0x13
     fa0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     fa2:	69 89       	ldd	r22, Y+17	; 0x11
     fa4:	7a 89       	ldd	r23, Y+18	; 0x12
     fa6:	8b 89       	ldd	r24, Y+19	; 0x13
     fa8:	9c 89       	ldd	r25, Y+20	; 0x14
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e8       	ldi	r20, 0x80	; 128
     fb0:	5f e3       	ldi	r21, 0x3F	; 63
     fb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fb6:	88 23       	and	r24, r24
     fb8:	1c f4       	brge	.+6      	; 0xfc0 <UART_receiveByteSynchNonBlocking2+0x6e>
		__ticks = 1;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	88 8b       	std	Y+16, r24	; 0x10
     fbe:	91 c0       	rjmp	.+290    	; 0x10e2 <UART_receiveByteSynchNonBlocking2+0x190>
	else if (__tmp > 255)
     fc0:	69 89       	ldd	r22, Y+17	; 0x11
     fc2:	7a 89       	ldd	r23, Y+18	; 0x12
     fc4:	8b 89       	ldd	r24, Y+19	; 0x13
     fc6:	9c 89       	ldd	r25, Y+20	; 0x14
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	4f e7       	ldi	r20, 0x7F	; 127
     fce:	53 e4       	ldi	r21, 0x43	; 67
     fd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fd4:	18 16       	cp	r1, r24
     fd6:	0c f0       	brlt	.+2      	; 0xfda <UART_receiveByteSynchNonBlocking2+0x88>
     fd8:	7b c0       	rjmp	.+246    	; 0x10d0 <UART_receiveByteSynchNonBlocking2+0x17e>
	{
		_delay_ms(__us / 1000.0);
     fda:	6d 89       	ldd	r22, Y+21	; 0x15
     fdc:	7e 89       	ldd	r23, Y+22	; 0x16
     fde:	8f 89       	ldd	r24, Y+23	; 0x17
     fe0:	98 8d       	ldd	r25, Y+24	; 0x18
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a e7       	ldi	r20, 0x7A	; 122
     fe8:	54 e4       	ldi	r21, 0x44	; 68
     fea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	8c 87       	std	Y+12, r24	; 0x0c
     ff4:	9d 87       	std	Y+13, r25	; 0x0d
     ff6:	ae 87       	std	Y+14, r26	; 0x0e
     ff8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffa:	6c 85       	ldd	r22, Y+12	; 0x0c
     ffc:	7d 85       	ldd	r23, Y+13	; 0x0d
     ffe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1000:	9f 85       	ldd	r25, Y+15	; 0x0f
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	4a e7       	ldi	r20, 0x7A	; 122
    1008:	55 e4       	ldi	r21, 0x45	; 69
    100a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	88 87       	std	Y+8, r24	; 0x08
    1014:	99 87       	std	Y+9, r25	; 0x09
    1016:	aa 87       	std	Y+10, r26	; 0x0a
    1018:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    101a:	68 85       	ldd	r22, Y+8	; 0x08
    101c:	79 85       	ldd	r23, Y+9	; 0x09
    101e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1020:	9b 85       	ldd	r25, Y+11	; 0x0b
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e8       	ldi	r20, 0x80	; 128
    1028:	5f e3       	ldi	r21, 0x3F	; 63
    102a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    102e:	88 23       	and	r24, r24
    1030:	2c f4       	brge	.+10     	; 0x103c <UART_receiveByteSynchNonBlocking2+0xea>
		__ticks = 1;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	9f 83       	std	Y+7, r25	; 0x07
    1038:	8e 83       	std	Y+6, r24	; 0x06
    103a:	3f c0       	rjmp	.+126    	; 0x10ba <UART_receiveByteSynchNonBlocking2+0x168>
	else if (__tmp > 65535)
    103c:	68 85       	ldd	r22, Y+8	; 0x08
    103e:	79 85       	ldd	r23, Y+9	; 0x09
    1040:	8a 85       	ldd	r24, Y+10	; 0x0a
    1042:	9b 85       	ldd	r25, Y+11	; 0x0b
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	3f ef       	ldi	r19, 0xFF	; 255
    1048:	4f e7       	ldi	r20, 0x7F	; 127
    104a:	57 e4       	ldi	r21, 0x47	; 71
    104c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1050:	18 16       	cp	r1, r24
    1052:	4c f5       	brge	.+82     	; 0x10a6 <UART_receiveByteSynchNonBlocking2+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1054:	6c 85       	ldd	r22, Y+12	; 0x0c
    1056:	7d 85       	ldd	r23, Y+13	; 0x0d
    1058:	8e 85       	ldd	r24, Y+14	; 0x0e
    105a:	9f 85       	ldd	r25, Y+15	; 0x0f
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e2       	ldi	r20, 0x20	; 32
    1062:	51 e4       	ldi	r21, 0x41	; 65
    1064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	bc 01       	movw	r22, r24
    106e:	cd 01       	movw	r24, r26
    1070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	9f 83       	std	Y+7, r25	; 0x07
    107a:	8e 83       	std	Y+6, r24	; 0x06
    107c:	0f c0       	rjmp	.+30     	; 0x109c <UART_receiveByteSynchNonBlocking2+0x14a>
    107e:	80 e9       	ldi	r24, 0x90	; 144
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	9d 83       	std	Y+5, r25	; 0x05
    1084:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	9d 81       	ldd	r25, Y+5	; 0x05
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <UART_receiveByteSynchNonBlocking2+0x138>
    108e:	9d 83       	std	Y+5, r25	; 0x05
    1090:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1092:	8e 81       	ldd	r24, Y+6	; 0x06
    1094:	9f 81       	ldd	r25, Y+7	; 0x07
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	9f 83       	std	Y+7, r25	; 0x07
    109a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109c:	8e 81       	ldd	r24, Y+6	; 0x06
    109e:	9f 81       	ldd	r25, Y+7	; 0x07
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	69 f7       	brne	.-38     	; 0x107e <UART_receiveByteSynchNonBlocking2+0x12c>
    10a4:	24 c0       	rjmp	.+72     	; 0x10ee <UART_receiveByteSynchNonBlocking2+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a6:	68 85       	ldd	r22, Y+8	; 0x08
    10a8:	79 85       	ldd	r23, Y+9	; 0x09
    10aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    10ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    10ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	9f 83       	std	Y+7, r25	; 0x07
    10b8:	8e 83       	std	Y+6, r24	; 0x06
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	9f 81       	ldd	r25, Y+7	; 0x07
    10be:	9b 83       	std	Y+3, r25	; 0x03
    10c0:	8a 83       	std	Y+2, r24	; 0x02
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	9b 81       	ldd	r25, Y+3	; 0x03
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <UART_receiveByteSynchNonBlocking2+0x174>
    10ca:	9b 83       	std	Y+3, r25	; 0x03
    10cc:	8a 83       	std	Y+2, r24	; 0x02
    10ce:	0f c0       	rjmp	.+30     	; 0x10ee <UART_receiveByteSynchNonBlocking2+0x19c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    10d0:	69 89       	ldd	r22, Y+17	; 0x11
    10d2:	7a 89       	ldd	r23, Y+18	; 0x12
    10d4:	8b 89       	ldd	r24, Y+19	; 0x13
    10d6:	9c 89       	ldd	r25, Y+20	; 0x14
    10d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	88 8b       	std	Y+16, r24	; 0x10
    10e2:	88 89       	ldd	r24, Y+16	; 0x10
    10e4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	8a 95       	dec	r24
    10ea:	f1 f7       	brne	.-4      	; 0x10e8 <UART_receiveByteSynchNonBlocking2+0x196>
    10ec:	89 83       	std	Y+1, r24	; 0x01


u8 UART_receiveByteSynchNonBlocking2()
{

	while(PtrUCSRA->RXC_BIT == 0 && Time_Out3 > 0)
    10ee:	e0 91 a5 03 	lds	r30, 0x03A5
    10f2:	f0 91 a6 03 	lds	r31, 0x03A6
    10f6:	80 81       	ld	r24, Z
    10f8:	80 78       	andi	r24, 0x80	; 128
    10fa:	88 23       	and	r24, r24
    10fc:	29 f4       	brne	.+10     	; 0x1108 <UART_receiveByteSynchNonBlocking2+0x1b6>
    10fe:	80 91 b3 03 	lds	r24, 0x03B3
    1102:	88 23       	and	r24, r24
    1104:	09 f0       	breq	.+2      	; 0x1108 <UART_receiveByteSynchNonBlocking2+0x1b6>
    1106:	30 cf       	rjmp	.-416    	; 0xf68 <UART_receiveByteSynchNonBlocking2+0x16>
	{
		Time_Out3--;
		_delay_us(5);
	}

	return UART_UDR_REG;
    1108:	ec e2       	ldi	r30, 0x2C	; 44
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
}
    110e:	68 96       	adiw	r28, 0x18	; 24
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <UART_Set_CallBack>:


/**************************************************/
void UART_Set_CallBack(void (*PtrFun)(void))
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	00 d0       	rcall	.+0      	; 0x1126 <UART_Set_CallBack+0x6>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
	if(PtrFun != NULL)
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	31 f0       	breq	.+12     	; 0x1142 <UART_Set_CallBack+0x22>
	{
		UART_CallBack = PtrFun;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	90 93 68 04 	sts	0x0468, r25
    113e:	80 93 67 04 	sts	0x0467, r24
	}
}
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <__vector_13>:


/******************************/
ISR(USART_RXC_vect)
{
    114c:	1f 92       	push	r1
    114e:	0f 92       	push	r0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	0f 92       	push	r0
    1154:	11 24       	eor	r1, r1
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	4f 93       	push	r20
    115c:	5f 93       	push	r21
    115e:	6f 93       	push	r22
    1160:	7f 93       	push	r23
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
    116a:	ef 93       	push	r30
    116c:	ff 93       	push	r31
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
		
	if(UART_CallBack != NULL)
    1176:	80 91 67 04 	lds	r24, 0x0467
    117a:	90 91 68 04 	lds	r25, 0x0468
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	29 f0       	breq	.+10     	; 0x118c <__vector_13+0x40>
	{
		UART_CallBack();
    1182:	e0 91 67 04 	lds	r30, 0x0467
    1186:	f0 91 68 04 	lds	r31, 0x0468
    118a:	09 95       	icall
	}
	
}
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <M_TIMER1_void_Init>:

void (*ICU_CallBackFun)(void) = NULL ;


void M_TIMER1_void_Init(TIMER_1_MD Local_Mode,TIMER_1_WG Local_WG)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <M_TIMER1_void_Init+0x6>
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_Mode == TIMER_1_NM)
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	88 23       	and	r24, r24
    11c4:	a9 f5       	brne	.+106    	; 0x1230 <M_TIMER1_void_Init+0x7e>
	{
		/*Select normal mode*/
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    11c6:	af e4       	ldi	r26, 0x4F	; 79
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ef e4       	ldi	r30, 0x4F	; 79
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	8e 7f       	andi	r24, 0xFE	; 254
    11d2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    11d4:	af e4       	ldi	r26, 0x4F	; 79
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ef e4       	ldi	r30, 0x4F	; 79
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8d 7f       	andi	r24, 0xFD	; 253
    11e0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    11e2:	ae e4       	ldi	r26, 0x4E	; 78
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	ee e4       	ldi	r30, 0x4E	; 78
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	91 81       	ldd	r25, Z+1	; 0x01
    11ee:	87 7f       	andi	r24, 0xF7	; 247
    11f0:	11 96       	adiw	r26, 0x01	; 1
    11f2:	9c 93       	st	X, r25
    11f4:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    11f6:	ae e4       	ldi	r26, 0x4E	; 78
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	ee e4       	ldi	r30, 0x4E	; 78
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	91 81       	ldd	r25, Z+1	; 0x01
    1202:	8f 7e       	andi	r24, 0xEF	; 239
    1204:	11 96       	adiw	r26, 0x01	; 1
    1206:	9c 93       	st	X, r25
    1208:	8e 93       	st	-X, r24
		if(Local_WG == TIMER_1_NWG)
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	88 23       	and	r24, r24
    120e:	09 f0       	breq	.+2      	; 0x1212 <M_TIMER1_void_Init+0x60>
    1210:	45 c0       	rjmp	.+138    	; 0x129c <M_TIMER1_void_Init+0xea>
		{
			/*Select compare output mode*/
			CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1212:	af e4       	ldi	r26, 0x4F	; 79
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	ef e4       	ldi	r30, 0x4F	; 79
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	8f 7b       	andi	r24, 0xBF	; 191
    121e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    1220:	af e4       	ldi	r26, 0x4F	; 79
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	ef e4       	ldi	r30, 0x4F	; 79
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	8f 77       	andi	r24, 0x7F	; 127
    122c:	8c 93       	st	X, r24
    122e:	36 c0       	rjmp	.+108    	; 0x129c <M_TIMER1_void_Init+0xea>
		}
	}
	else if(Local_Mode == Timer_1_Fast_PWM)
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	99 f5       	brne	.+102    	; 0x129c <M_TIMER1_void_Init+0xea>
	{
		/*Setting waveform for fast PWM*/
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1236:	af e4       	ldi	r26, 0x4F	; 79
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	ef e4       	ldi	r30, 0x4F	; 79
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	8e 7f       	andi	r24, 0xFE	; 254
    1242:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1244:	af e4       	ldi	r26, 0x4F	; 79
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	ef e4       	ldi	r30, 0x4F	; 79
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	82 60       	ori	r24, 0x02	; 2
    1250:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1252:	ae e4       	ldi	r26, 0x4E	; 78
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ee e4       	ldi	r30, 0x4E	; 78
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	88 60       	ori	r24, 0x08	; 8
    1260:	11 96       	adiw	r26, 0x01	; 1
    1262:	9c 93       	st	X, r25
    1264:	8e 93       	st	-X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    1266:	ae e4       	ldi	r26, 0x4E	; 78
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	ee e4       	ldi	r30, 0x4E	; 78
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	80 61       	ori	r24, 0x10	; 16
    1274:	11 96       	adiw	r26, 0x01	; 1
    1276:	9c 93       	st	X, r25
    1278:	8e 93       	st	-X, r24
		if(Local_WG==TIMER_1_NonINV)
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	71 f4       	brne	.+28     	; 0x129c <M_TIMER1_void_Init+0xea>
		{
			/*Select Fast-PWM Non-inverting mode*/
			SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1280:	af e4       	ldi	r26, 0x4F	; 79
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	ef e4       	ldi	r30, 0x4F	; 79
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	80 68       	ori	r24, 0x80	; 128
    128c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    128e:	af e4       	ldi	r26, 0x4F	; 79
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ef e4       	ldi	r30, 0x4F	; 79
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	8f 7b       	andi	r24, 0xBF	; 191
    129a:	8c 93       	st	X, r24
		}
	}
}
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <M_TIMER1_void_FastPWM>:
void M_TIMER1_void_FastPWM(u16 Duty_Cycle)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <M_TIMER1_void_FastPWM+0x6>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	9a 83       	std	Y+2, r25	; 0x02
    12b2:	89 83       	std	Y+1, r24	; 0x01
	/*Select compare output mode*/
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    12b4:	af e4       	ldi	r26, 0x4F	; 79
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ef e4       	ldi	r30, 0x4F	; 79
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	80 68       	ori	r24, 0x80	; 128
    12c0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    12c2:	af e4       	ldi	r26, 0x4F	; 79
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ef e4       	ldi	r30, 0x4F	; 79
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8f 7b       	andi	r24, 0xBF	; 191
    12ce:	8c 93       	st	X, r24
	/*Set the top value for timer1 counts where overflow occurs*/
	ICR1=TOP_VALUE;
    12d0:	e6 e4       	ldi	r30, 0x46	; 70
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8b e0       	ldi	r24, 0x0B	; 11
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	80 83       	st	Z, r24
	/*OCR1A Value = On time since it's non inverting mode*/
	OCR1A=((Duty_Cycle*TOP_VALUE-1)/100)-1;
    12dc:	ea e4       	ldi	r30, 0x4A	; 74
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	49 81       	ldd	r20, Y+1	; 0x01
    12e2:	5a 81       	ldd	r21, Y+2	; 0x02
    12e4:	ca 01       	movw	r24, r20
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	9c 01       	movw	r18, r24
    12ec:	22 0f       	add	r18, r18
    12ee:	33 1f       	adc	r19, r19
    12f0:	22 0f       	add	r18, r18
    12f2:	33 1f       	adc	r19, r19
    12f4:	82 0f       	add	r24, r18
    12f6:	93 1f       	adc	r25, r19
    12f8:	84 0f       	add	r24, r20
    12fa:	95 1f       	adc	r25, r21
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	24 e6       	ldi	r18, 0x64	; 100
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	b9 01       	movw	r22, r18
    1304:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <__udivmodhi4>
    1308:	cb 01       	movw	r24, r22
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	91 83       	std	Z+1, r25	; 0x01
    130e:	80 83       	st	Z, r24
	M_TIMER1_void_Start(TIMER1_CLK_8);
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	0e 94 90 09 	call	0x1320	; 0x1320 <M_TIMER1_void_Start>

}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <M_TIMER1_void_Start>:
void M_TIMER1_void_Start(TIMER1_PRESCALER Local_Prescaller)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	89 83       	std	Y+1, r24	; 0x01
	if(Local_Prescaller== TIMER1_CLK_8)
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	82 30       	cpi	r24, 0x02	; 2
    1330:	f1 f4       	brne	.+60     	; 0x136e <M_TIMER1_void_Start+0x4e>
	{
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    1332:	ae e4       	ldi	r26, 0x4E	; 78
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ee e4       	ldi	r30, 0x4E	; 78
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	91 81       	ldd	r25, Z+1	; 0x01
    133e:	8e 7f       	andi	r24, 0xFE	; 254
    1340:	11 96       	adiw	r26, 0x01	; 1
    1342:	9c 93       	st	X, r25
    1344:	8e 93       	st	-X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    1346:	ae e4       	ldi	r26, 0x4E	; 78
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ee e4       	ldi	r30, 0x4E	; 78
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	91 81       	ldd	r25, Z+1	; 0x01
    1352:	82 60       	ori	r24, 0x02	; 2
    1354:	11 96       	adiw	r26, 0x01	; 1
    1356:	9c 93       	st	X, r25
    1358:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);
    135a:	ae e4       	ldi	r26, 0x4E	; 78
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	ee e4       	ldi	r30, 0x4E	; 78
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	91 81       	ldd	r25, Z+1	; 0x01
    1366:	8b 7f       	andi	r24, 0xFB	; 251
    1368:	11 96       	adiw	r26, 0x01	; 1
    136a:	9c 93       	st	X, r25
    136c:	8e 93       	st	-X, r24
	}
}
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <M_TIMER1_void_Stop>:
void M_TIMER1_void_Stop(void)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    137e:	af e4       	ldi	r26, 0x4F	; 79
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	ef e4       	ldi	r30, 0x4F	; 79
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	8f 7b       	andi	r24, 0xBF	; 191
    138a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    138c:	af e4       	ldi	r26, 0x4F	; 79
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	ef e4       	ldi	r30, 0x4F	; 79
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	8f 77       	andi	r24, 0x7F	; 127
    1398:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    139a:	ae e4       	ldi	r26, 0x4E	; 78
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	ee e4       	ldi	r30, 0x4E	; 78
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	91 81       	ldd	r25, Z+1	; 0x01
    13a6:	8e 7f       	andi	r24, 0xFE	; 254
    13a8:	11 96       	adiw	r26, 0x01	; 1
    13aa:	9c 93       	st	X, r25
    13ac:	8e 93       	st	-X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    13ae:	ae e4       	ldi	r26, 0x4E	; 78
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	ee e4       	ldi	r30, 0x4E	; 78
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	91 81       	ldd	r25, Z+1	; 0x01
    13ba:	8d 7f       	andi	r24, 0xFD	; 253
    13bc:	11 96       	adiw	r26, 0x01	; 1
    13be:	9c 93       	st	X, r25
    13c0:	8e 93       	st	-X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    13c2:	ae e4       	ldi	r26, 0x4E	; 78
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ee e4       	ldi	r30, 0x4E	; 78
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	8b 7f       	andi	r24, 0xFB	; 251
    13d0:	11 96       	adiw	r26, 0x01	; 1
    13d2:	9c 93       	st	X, r25
    13d4:	8e 93       	st	-X, r24

}
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <M_TIMER1_void_ICU_Enable>:

void M_TIMER1_void_ICU_Enable(void)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
	/*Enable ICU Interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    13e4:	a9 e5       	ldi	r26, 0x59	; 89
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e9 e5       	ldi	r30, 0x59	; 89
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	80 62       	ori	r24, 0x20	; 32
    13f0:	8c 93       	st	X, r24
	/*Set trigger to rising edge*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    13f2:	ae e4       	ldi	r26, 0x4E	; 78
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ee e4       	ldi	r30, 0x4E	; 78
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	80 64       	ori	r24, 0x40	; 64
    1400:	11 96       	adiw	r26, 0x01	; 1
    1402:	9c 93       	st	X, r25
    1404:	8e 93       	st	-X, r24

}
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <M_TIMER1_void_ICU_TriggerSelect>:


void M_TIMER1_void_ICU_TriggerSelect(ICU_Trigger Local_Trigger)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	0f 92       	push	r0
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	89 83       	std	Y+1, r24	; 0x01
	if(Local_Trigger == ICU_FALLING)
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	88 23       	and	r24, r24
    141c:	59 f4       	brne	.+22     	; 0x1434 <M_TIMER1_void_ICU_TriggerSelect+0x28>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    141e:	ae e4       	ldi	r26, 0x4E	; 78
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	ee e4       	ldi	r30, 0x4E	; 78
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	91 81       	ldd	r25, Z+1	; 0x01
    142a:	8f 7b       	andi	r24, 0xBF	; 191
    142c:	11 96       	adiw	r26, 0x01	; 1
    142e:	9c 93       	st	X, r25
    1430:	8e 93       	st	-X, r24
    1432:	0d c0       	rjmp	.+26     	; 0x144e <M_TIMER1_void_ICU_TriggerSelect+0x42>

	}
	else if(Local_Trigger == ICU_RISING)
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	51 f4       	brne	.+20     	; 0x144e <M_TIMER1_void_ICU_TriggerSelect+0x42>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    143a:	ae e4       	ldi	r26, 0x4E	; 78
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	ee e4       	ldi	r30, 0x4E	; 78
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	91 81       	ldd	r25, Z+1	; 0x01
    1446:	80 64       	ori	r24, 0x40	; 64
    1448:	11 96       	adiw	r26, 0x01	; 1
    144a:	9c 93       	st	X, r25
    144c:	8e 93       	st	-X, r24

	}
}
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <M_TIMER1_void_ICU_INTERRUPTDIS>:

void M_TIMER1_void_ICU_INTERRUPTDIS(void)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
	/*Enable ICU Interrupt*/
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    145e:	a9 e5       	ldi	r26, 0x59	; 89
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e9 e5       	ldi	r30, 0x59	; 89
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	8f 7d       	andi	r24, 0xDF	; 223
    146a:	8c 93       	st	X, r24
}
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <M_TIMER1_void_ICU_Reading>:

u16 M_TIMER1_void_ICU_Reading(void)
{
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    147a:	e6 e4       	ldi	r30, 0x46	; 70
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	91 81       	ldd	r25, Z+1	; 0x01
}
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <M_TIMER1_void_ICU_SetCallBack>:

void M_TIMER1_void_ICU_SetCallBack(void)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62

}
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <M_TIMER1_u8_Reset_flag>:

u8 M_TIMER1_u8_Reset_flag(TIMER1_INTERRUPT_TYPE Local_type)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	0f 92       	push	r0
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	89 83       	std	Y+1, r24	; 0x01
	if(Local_type == TIMER1_ICU)
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	88 23       	and	r24, r24
    14a6:	41 f4       	brne	.+16     	; 0x14b8 <M_TIMER1_u8_Reset_flag+0x22>
	{
		SET_BIT(TIFR,TIFR_ICF1);
    14a8:	a8 e5       	ldi	r26, 0x58	; 88
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e8 e5       	ldi	r30, 0x58	; 88
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	80 62       	ori	r24, 0x20	; 32
    14b4:	8c 93       	st	X, r24
    14b6:	0a c0       	rjmp	.+20     	; 0x14cc <M_TIMER1_u8_Reset_flag+0x36>
	}
	else if(Local_type == TIMER1_OVF)
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	83 30       	cpi	r24, 0x03	; 3
    14bc:	39 f4       	brne	.+14     	; 0x14cc <M_TIMER1_u8_Reset_flag+0x36>
	{
		SET_BIT(TIFR,TIFR_TOV1);
    14be:	a8 e5       	ldi	r26, 0x58	; 88
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e8 e5       	ldi	r30, 0x58	; 88
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	84 60       	ori	r24, 0x04	; 4
    14ca:	8c 93       	st	X, r24
	}
	return 0;
    14cc:	80 e0       	ldi	r24, 0x00	; 0
}
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <M_vTIMER0_Init>:

/*******************************************************************/
/*******************************************************************/

void M_vTIMER0_Init(TIMER0_MODES_t TIMER0_MODE, u8 OC0_MODE)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <M_vTIMER0_Init+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <M_vTIMER0_Init+0x8>
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	6a 83       	std	Y+2, r22	; 0x02
	//u8 Timer0_Mode = TIMER0_Cfg.TIMER0_MODE;
	//u8 OC0_MODE;

	switch(TIMER0_MODE)
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	3c 83       	std	Y+4, r19	; 0x04
    14ee:	2b 83       	std	Y+3, r18	; 0x03
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	88 30       	cpi	r24, 0x08	; 8
    14f6:	91 05       	cpc	r25, r1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <M_vTIMER0_Init+0x26>
    14fa:	51 c0       	rjmp	.+162    	; 0x159e <M_vTIMER0_Init+0xc8>
    14fc:	2b 81       	ldd	r18, Y+3	; 0x03
    14fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1500:	29 30       	cpi	r18, 0x09	; 9
    1502:	31 05       	cpc	r19, r1
    1504:	2c f4       	brge	.+10     	; 0x1510 <M_vTIMER0_Init+0x3a>
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	9c 81       	ldd	r25, Y+4	; 0x04
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	69 f0       	breq	.+26     	; 0x1528 <M_vTIMER0_Init+0x52>
    150e:	82 c0       	rjmp	.+260    	; 0x1614 <M_vTIMER0_Init+0x13e>
    1510:	2b 81       	ldd	r18, Y+3	; 0x03
    1512:	3c 81       	ldd	r19, Y+4	; 0x04
    1514:	20 34       	cpi	r18, 0x40	; 64
    1516:	31 05       	cpc	r19, r1
    1518:	21 f1       	breq	.+72     	; 0x1562 <M_vTIMER0_Init+0x8c>
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	88 34       	cpi	r24, 0x48	; 72
    1520:	91 05       	cpc	r25, r1
    1522:	09 f4       	brne	.+2      	; 0x1526 <M_vTIMER0_Init+0x50>
    1524:	5a c0       	rjmp	.+180    	; 0x15da <M_vTIMER0_Init+0x104>
    1526:	76 c0       	rjmp	.+236    	; 0x1614 <M_vTIMER0_Init+0x13e>

	{
	    case TIMER0_NORMAL_MODE:
	    						/* ENABLE SELECTED MODE  */
	    						APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_WGM_MASK);
    1528:	a3 e5       	ldi	r26, 0x53	; 83
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e3 e5       	ldi	r30, 0x53	; 83
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	87 7b       	andi	r24, 0xB7	; 183
    1534:	8c 93       	st	X, r24
	    						SET_REG(TIMER0_TCCR0_REG, TIMER0_NORMAL_MODE);
    1536:	a3 e5       	ldi	r26, 0x53	; 83
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e3 e5       	ldi	r30, 0x53	; 83
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8c 93       	st	X, r24

	    						/* select COM Mode */
	    						APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_COM_MASK);
    1542:	a3 e5       	ldi	r26, 0x53	; 83
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e3 e5       	ldi	r30, 0x53	; 83
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	8f 7c       	andi	r24, 0xCF	; 207
    154e:	8c 93       	st	X, r24
	    						//OC0_MODE = TIMER0_Cfg.TIMER0_OC0_MODE.OC0_NONPWM_MODE;
	    						SET_REG(TIMER0_TCCR0_REG, (OC0_MODE));
    1550:	a3 e5       	ldi	r26, 0x53	; 83
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e3 e5       	ldi	r30, 0x53	; 83
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	90 81       	ld	r25, Z
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	89 2b       	or	r24, r25
    155e:	8c 93       	st	X, r24
    1560:	59 c0       	rjmp	.+178    	; 0x1614 <M_vTIMER0_Init+0x13e>

	    						break;

	    case TIMER0_PWM_PhaseCorrect_MODE:
								/* ENABLE SELECTED MODE  */
								APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_WGM_MASK);
    1562:	a3 e5       	ldi	r26, 0x53	; 83
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e3 e5       	ldi	r30, 0x53	; 83
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	87 7b       	andi	r24, 0xB7	; 183
    156e:	8c 93       	st	X, r24
								SET_REG(TIMER0_TCCR0_REG, TIMER0_PWM_PhaseCorrect_MODE);
    1570:	a3 e5       	ldi	r26, 0x53	; 83
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e3 e5       	ldi	r30, 0x53	; 83
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	80 64       	ori	r24, 0x40	; 64
    157c:	8c 93       	st	X, r24

	    						/* select COM Mode */
	    						APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_COM_MASK);
    157e:	a3 e5       	ldi	r26, 0x53	; 83
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e3 e5       	ldi	r30, 0x53	; 83
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8f 7c       	andi	r24, 0xCF	; 207
    158a:	8c 93       	st	X, r24
	    						//OC0_MODE = TIMER0_Cfg.TIMER0_OC0_MODE.OC0_PHASECORRECT_MODE;
	    						SET_REG(TIMER0_TCCR0_REG, (OC0_MODE));
    158c:	a3 e5       	ldi	r26, 0x53	; 83
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e3 e5       	ldi	r30, 0x53	; 83
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	90 81       	ld	r25, Z
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	89 2b       	or	r24, r25
    159a:	8c 93       	st	X, r24
    159c:	3b c0       	rjmp	.+118    	; 0x1614 <M_vTIMER0_Init+0x13e>
								break;

	    case TIMER0_CTC_MODE:
	    					   /* ENABLE SELECTED MODE  */
							   APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_WGM_MASK);
    159e:	a3 e5       	ldi	r26, 0x53	; 83
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e3 e5       	ldi	r30, 0x53	; 83
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	87 7b       	andi	r24, 0xB7	; 183
    15aa:	8c 93       	st	X, r24
							   SET_REG(TIMER0_TCCR0_REG, TIMER0_CTC_MODE);
    15ac:	a3 e5       	ldi	r26, 0x53	; 83
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e3 e5       	ldi	r30, 0x53	; 83
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	88 60       	ori	r24, 0x08	; 8
    15b8:	8c 93       	st	X, r24

	    						/* select COM Mode */
	    						APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_COM_MASK);
    15ba:	a3 e5       	ldi	r26, 0x53	; 83
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e3 e5       	ldi	r30, 0x53	; 83
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8f 7c       	andi	r24, 0xCF	; 207
    15c6:	8c 93       	st	X, r24
	    						//OC0_MODE = TIMER0_Cfg.TIMER0_OC0_MODE.OC0_NONPWM_MODE;
	    						SET_REG(TIMER0_TCCR0_REG, (OC0_MODE));
    15c8:	a3 e5       	ldi	r26, 0x53	; 83
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e3 e5       	ldi	r30, 0x53	; 83
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	90 81       	ld	r25, Z
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	89 2b       	or	r24, r25
    15d6:	8c 93       	st	X, r24
    15d8:	1d c0       	rjmp	.+58     	; 0x1614 <M_vTIMER0_Init+0x13e>
							   break;

	    case TIMER0_PWM_FAST_MODE:
	    						/* ENABLE SELECTED MODE  */
							   APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_WGM_MASK);
    15da:	a3 e5       	ldi	r26, 0x53	; 83
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e3 e5       	ldi	r30, 0x53	; 83
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	87 7b       	andi	r24, 0xB7	; 183
    15e6:	8c 93       	st	X, r24
							   SET_REG(TIMER0_TCCR0_REG, TIMER0_PWM_FAST_MODE);
    15e8:	a3 e5       	ldi	r26, 0x53	; 83
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e3 e5       	ldi	r30, 0x53	; 83
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	88 64       	ori	r24, 0x48	; 72
    15f4:	8c 93       	st	X, r24

	    						/* select COM Mode */
	    						APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_COM_MASK);
    15f6:	a3 e5       	ldi	r26, 0x53	; 83
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e3 e5       	ldi	r30, 0x53	; 83
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	8f 7c       	andi	r24, 0xCF	; 207
    1602:	8c 93       	st	X, r24
	    						//OC0_MODE = TIMER0_Cfg.TIMER0_OC0_MODE.OC0_FASTPWM_MODE;
	    						SET_REG(TIMER0_TCCR0_REG, (OC0_MODE));
    1604:	a3 e5       	ldi	r26, 0x53	; 83
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e3 e5       	ldi	r30, 0x53	; 83
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	90 81       	ld	r25, Z
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	89 2b       	or	r24, r25
    1612:	8c 93       	st	X, r24

	    default: 			   break;


	}
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <M_vTIMER0_Start>:

/*******************************************************************/
/*******************************************************************/
void M_vTIMER0_Start(TIMER0_Prescaler_t	CLK_Src_Prescaler )
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	00 d0       	rcall	.+0      	; 0x1628 <M_vTIMER0_Start+0x6>
    1628:	00 d0       	rcall	.+0      	; 0x162a <M_vTIMER0_Start+0x8>
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01

	//TIMER0_OCR0_REG = TIMER0_OCR_VALUE;

	switch(CLK_Src_Prescaler)
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	9c 83       	std	Y+4, r25	; 0x04
    1638:	8b 83       	std	Y+3, r24	; 0x03
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	80 34       	cpi	r24, 0x40	; 64
    1640:	91 05       	cpc	r25, r1
    1642:	d9 f1       	breq	.+118    	; 0x16ba <M_vTIMER0_Start+0x98>
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	9c 81       	ldd	r25, Y+4	; 0x04
    1648:	81 34       	cpi	r24, 0x41	; 65
    164a:	91 05       	cpc	r25, r1
    164c:	58 f4       	brcc	.+22     	; 0x1664 <M_vTIMER0_Start+0x42>
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	91 05       	cpc	r25, r1
    1656:	99 f0       	breq	.+38     	; 0x167e <M_vTIMER0_Start+0x5c>
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	88 30       	cpi	r24, 0x08	; 8
    165e:	91 05       	cpc	r25, r1
    1660:	e9 f0       	breq	.+58     	; 0x169c <M_vTIMER0_Start+0x7a>
    1662:	57 c0       	rjmp	.+174    	; 0x1712 <M_vTIMER0_Start+0xf0>
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	21 e0       	ldi	r18, 0x01	; 1
    166a:	80 30       	cpi	r24, 0x00	; 0
    166c:	92 07       	cpc	r25, r18
    166e:	a1 f1       	breq	.+104    	; 0x16d8 <M_vTIMER0_Start+0xb6>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	24 e0       	ldi	r18, 0x04	; 4
    1676:	80 30       	cpi	r24, 0x00	; 0
    1678:	92 07       	cpc	r25, r18
    167a:	e9 f1       	breq	.+122    	; 0x16f6 <M_vTIMER0_Start+0xd4>
    167c:	4a c0       	rjmp	.+148    	; 0x1712 <M_vTIMER0_Start+0xf0>
	{

		case NO_PRESCALING:
							 APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_CS_MASK);
    167e:	a3 e5       	ldi	r26, 0x53	; 83
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e3 e5       	ldi	r30, 0x53	; 83
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	88 7f       	andi	r24, 0xF8	; 248
    168a:	8c 93       	st	X, r24
							 SET_REG(TIMER0_TCCR0_REG, TIMER0_CLK_NO_PRESCALING);
    168c:	a3 e5       	ldi	r26, 0x53	; 83
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e3 e5       	ldi	r30, 0x53	; 83
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	81 60       	ori	r24, 0x01	; 1
    1698:	8c 93       	st	X, r24
    169a:	3b c0       	rjmp	.+118    	; 0x1712 <M_vTIMER0_Start+0xf0>
							 break;

		case PRESCALER8:
							 APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_CS_MASK);
    169c:	a3 e5       	ldi	r26, 0x53	; 83
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e3 e5       	ldi	r30, 0x53	; 83
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	88 7f       	andi	r24, 0xF8	; 248
    16a8:	8c 93       	st	X, r24
							 SET_REG(TIMER0_TCCR0_REG, TIMER0_CLK_PRESCALER8);
    16aa:	a3 e5       	ldi	r26, 0x53	; 83
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e3 e5       	ldi	r30, 0x53	; 83
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	82 60       	ori	r24, 0x02	; 2
    16b6:	8c 93       	st	X, r24
    16b8:	2c c0       	rjmp	.+88     	; 0x1712 <M_vTIMER0_Start+0xf0>
							 break;

		case PRESCALER64:
		                     APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_CS_MASK);
    16ba:	a3 e5       	ldi	r26, 0x53	; 83
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e3 e5       	ldi	r30, 0x53	; 83
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	88 7f       	andi	r24, 0xF8	; 248
    16c6:	8c 93       	st	X, r24
		                     SET_REG(TIMER0_TCCR0_REG, TIMER0_CLK_PRESCALER64);
    16c8:	a3 e5       	ldi	r26, 0x53	; 83
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e3 e5       	ldi	r30, 0x53	; 83
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	83 60       	ori	r24, 0x03	; 3
    16d4:	8c 93       	st	X, r24
    16d6:	1d c0       	rjmp	.+58     	; 0x1712 <M_vTIMER0_Start+0xf0>
		                     break;

		case PRESCALER256:
							 APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_CS_MASK);
    16d8:	a3 e5       	ldi	r26, 0x53	; 83
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e3 e5       	ldi	r30, 0x53	; 83
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	88 7f       	andi	r24, 0xF8	; 248
    16e4:	8c 93       	st	X, r24
							 SET_REG(TIMER0_TCCR0_REG, TIMER0_CLK_PRESCALER256);
    16e6:	a3 e5       	ldi	r26, 0x53	; 83
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e3 e5       	ldi	r30, 0x53	; 83
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	84 60       	ori	r24, 0x04	; 4
    16f2:	8c 93       	st	X, r24
    16f4:	0e c0       	rjmp	.+28     	; 0x1712 <M_vTIMER0_Start+0xf0>
							 break;

		case PRESCALER1024:
							 APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_CS_MASK);
    16f6:	a3 e5       	ldi	r26, 0x53	; 83
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e3 e5       	ldi	r30, 0x53	; 83
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	88 7f       	andi	r24, 0xF8	; 248
    1702:	8c 93       	st	X, r24
							 SET_REG(TIMER0_TCCR0_REG, TIMER0_CLK_PRESCALER1024);
    1704:	a3 e5       	ldi	r26, 0x53	; 83
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e3 e5       	ldi	r30, 0x53	; 83
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	85 60       	ori	r24, 0x05	; 5
    1710:	8c 93       	st	X, r24
							 break;

	}

}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <M_vTIMER0_Stop>:


/*******************************************************************/
/*******************************************************************/
void M_vTIMER0_Stop(void){
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62

 APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_CS_MASK);
    1728:	a3 e5       	ldi	r26, 0x53	; 83
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e3 e5       	ldi	r30, 0x53	; 83
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	88 7f       	andi	r24, 0xF8	; 248
    1734:	8c 93       	st	X, r24
 SET_REG(TIMER0_TCCR0_REG, TIMER0_NO_CLK);
    1736:	a3 e5       	ldi	r26, 0x53	; 83
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e3 e5       	ldi	r30, 0x53	; 83
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	8c 93       	st	X, r24

}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <M_vTIMER0_GetCounts>:



/*******************************************************************/
/*******************************************************************/
void M_vTIMER0_GetCounts(void){
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62

}
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <M_vTIMER0_SetDelayTimeMilliSec>:


/*******************************************************************/
/*******************************************************************/
u32 M_vTIMER0_SetDelayTimeMilliSec(u32 millisec , TIMER0_Prescaler_t  Prescaler, TIMER0_MODES_t MODE){
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	69 97       	sbiw	r28, 0x19	; 25
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	69 8b       	std	Y+17, r22	; 0x11
    176c:	7a 8b       	std	Y+18, r23	; 0x12
    176e:	8b 8b       	std	Y+19, r24	; 0x13
    1770:	9c 8b       	std	Y+20, r25	; 0x14
    1772:	5e 8b       	std	Y+22, r21	; 0x16
    1774:	4d 8b       	std	Y+21, r20	; 0x15
    1776:	2f 8b       	std	Y+23, r18	; 0x17

	f32 TickTime;
	u32 Remaining_OverFlowCount;
	TickTime = ((f32)Prescaler*1000000 / FCPU);
    1778:	8d 89       	ldd	r24, Y+21	; 0x15
    177a:	9e 89       	ldd	r25, Y+22	; 0x16
    177c:	cc 01       	movw	r24, r24
    177e:	a0 e0       	ldi	r26, 0x00	; 0
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	bc 01       	movw	r22, r24
    1784:	cd 01       	movw	r24, r26
    1786:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	34 e2       	ldi	r19, 0x24	; 36
    1796:	44 e7       	ldi	r20, 0x74	; 116
    1798:	59 e4       	ldi	r21, 0x49	; 73
    179a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	bc 01       	movw	r22, r24
    17a4:	cd 01       	movw	r24, r26
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	34 e2       	ldi	r19, 0x24	; 36
    17aa:	44 e7       	ldi	r20, 0x74	; 116
    17ac:	5b e4       	ldi	r21, 0x4B	; 75
    17ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	8d 87       	std	Y+13, r24	; 0x0d
    17b8:	9e 87       	std	Y+14, r25	; 0x0e
    17ba:	af 87       	std	Y+15, r26	; 0x0f
    17bc:	b8 8b       	std	Y+16, r27	; 0x10

	u32 DesiredTick = ((millisec*1000) / TickTime);	       // *1000 to convert it to miceosec
    17be:	89 89       	ldd	r24, Y+17	; 0x11
    17c0:	9a 89       	ldd	r25, Y+18	; 0x12
    17c2:	ab 89       	ldd	r26, Y+19	; 0x13
    17c4:	bc 89       	ldd	r27, Y+20	; 0x14
    17c6:	28 ee       	ldi	r18, 0xE8	; 232
    17c8:	33 e0       	ldi	r19, 0x03	; 3
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	bc 01       	movw	r22, r24
    17d0:	cd 01       	movw	r24, r26
    17d2:	0e 94 a6 35 	call	0x6b4c	; 0x6b4c <__mulsi3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	bc 01       	movw	r22, r24
    17dc:	cd 01       	movw	r24, r26
    17de:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    17ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    17ee:	4f 85       	ldd	r20, Y+15	; 0x0f
    17f0:	58 89       	ldd	r21, Y+16	; 0x10
    17f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	bc 01       	movw	r22, r24
    17fc:	cd 01       	movw	r24, r26
    17fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	8d 83       	std	Y+5, r24	; 0x05
    1808:	9e 83       	std	Y+6, r25	; 0x06
    180a:	af 83       	std	Y+7, r26	; 0x07
    180c:	b8 87       	std	Y+8, r27	; 0x08

	u32 MAX_OC0_VALUE = 255;
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a0 e0       	ldi	r26, 0x00	; 0
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	ab 83       	std	Y+3, r26	; 0x03
    181c:	bc 83       	std	Y+4, r27	; 0x04
	/*CmpMatch_Count NORMAL MODE */

	switch(MODE)
    181e:	8f 89       	ldd	r24, Y+23	; 0x17
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	39 8f       	std	Y+25, r19	; 0x19
    1826:	28 8f       	std	Y+24, r18	; 0x18
    1828:	88 8d       	ldd	r24, Y+24	; 0x18
    182a:	99 8d       	ldd	r25, Y+25	; 0x19
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	39 f0       	breq	.+14     	; 0x183e <M_vTIMER0_SetDelayTimeMilliSec+0xe8>
    1830:	28 8d       	ldd	r18, Y+24	; 0x18
    1832:	39 8d       	ldd	r19, Y+25	; 0x19
    1834:	28 30       	cpi	r18, 0x08	; 8
    1836:	31 05       	cpc	r19, r1
    1838:	09 f4       	brne	.+2      	; 0x183c <M_vTIMER0_SetDelayTimeMilliSec+0xe6>
    183a:	49 c0       	rjmp	.+146    	; 0x18ce <M_vTIMER0_SetDelayTimeMilliSec+0x178>
    183c:	70 c0       	rjmp	.+224    	; 0x191e <M_vTIMER0_SetDelayTimeMilliSec+0x1c8>
	{

		case TIMER0_NORMAL_MODE:
								Delay_OverFlow_Count = (DesiredTick / 256);
    183e:	8d 81       	ldd	r24, Y+5	; 0x05
    1840:	9e 81       	ldd	r25, Y+6	; 0x06
    1842:	af 81       	ldd	r26, Y+7	; 0x07
    1844:	b8 85       	ldd	r27, Y+8	; 0x08
    1846:	89 2f       	mov	r24, r25
    1848:	9a 2f       	mov	r25, r26
    184a:	ab 2f       	mov	r26, r27
    184c:	bb 27       	eor	r27, r27
    184e:	80 93 b5 04 	sts	0x04B5, r24
    1852:	90 93 b6 04 	sts	0x04B6, r25
    1856:	a0 93 b7 04 	sts	0x04B7, r26
    185a:	b0 93 b8 04 	sts	0x04B8, r27
								Remaining_OverFlowCount = (DesiredTick %256);
    185e:	8d 81       	ldd	r24, Y+5	; 0x05
    1860:	9e 81       	ldd	r25, Y+6	; 0x06
    1862:	af 81       	ldd	r26, Y+7	; 0x07
    1864:	b8 85       	ldd	r27, Y+8	; 0x08
    1866:	90 70       	andi	r25, 0x00	; 0
    1868:	a0 70       	andi	r26, 0x00	; 0
    186a:	b0 70       	andi	r27, 0x00	; 0
    186c:	89 87       	std	Y+9, r24	; 0x09
    186e:	9a 87       	std	Y+10, r25	; 0x0a
    1870:	ab 87       	std	Y+11, r26	; 0x0b
    1872:	bc 87       	std	Y+12, r27	; 0x0c

								if(Remaining_OverFlowCount != 0)
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	9a 85       	ldd	r25, Y+10	; 0x0a
    1878:	ab 85       	ldd	r26, Y+11	; 0x0b
    187a:	bc 85       	ldd	r27, Y+12	; 0x0c
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	a1 05       	cpc	r26, r1
    1880:	b1 05       	cpc	r27, r1
    1882:	09 f4       	brne	.+2      	; 0x1886 <M_vTIMER0_SetDelayTimeMilliSec+0x130>
    1884:	4c c0       	rjmp	.+152    	; 0x191e <M_vTIMER0_SetDelayTimeMilliSec+0x1c8>
								{

									TIMER0_TCNT0_REG = (256 - Remaining_OverFlowCount);
    1886:	e2 e5       	ldi	r30, 0x52	; 82
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	89 85       	ldd	r24, Y+9	; 0x09
    188c:	81 95       	neg	r24
    188e:	80 83       	st	Z, r24
									Delay_OverFlow_Count++;
    1890:	80 91 b5 04 	lds	r24, 0x04B5
    1894:	90 91 b6 04 	lds	r25, 0x04B6
    1898:	a0 91 b7 04 	lds	r26, 0x04B7
    189c:	b0 91 b8 04 	lds	r27, 0x04B8
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	a1 1d       	adc	r26, r1
    18a4:	b1 1d       	adc	r27, r1
    18a6:	80 93 b5 04 	sts	0x04B5, r24
    18aa:	90 93 b6 04 	sts	0x04B6, r25
    18ae:	a0 93 b7 04 	sts	0x04B7, r26
    18b2:	b0 93 b8 04 	sts	0x04B8, r27
    18b6:	33 c0       	rjmp	.+102    	; 0x191e <M_vTIMER0_SetDelayTimeMilliSec+0x1c8>

		case TIMER0_CTC_MODE:		/* ctc mode */

								while(DesiredTick % MAX_OC0_VALUE)
								{
									MAX_OC0_VALUE--;
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	9a 81       	ldd	r25, Y+2	; 0x02
    18bc:	ab 81       	ldd	r26, Y+3	; 0x03
    18be:	bc 81       	ldd	r27, Y+4	; 0x04
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	a1 09       	sbc	r26, r1
    18c4:	b1 09       	sbc	r27, r1
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	9a 83       	std	Y+2, r25	; 0x02
    18ca:	ab 83       	std	Y+3, r26	; 0x03
    18cc:	bc 83       	std	Y+4, r27	; 0x04
								break;


		case TIMER0_CTC_MODE:		/* ctc mode */

								while(DesiredTick % MAX_OC0_VALUE)
    18ce:	8d 81       	ldd	r24, Y+5	; 0x05
    18d0:	9e 81       	ldd	r25, Y+6	; 0x06
    18d2:	af 81       	ldd	r26, Y+7	; 0x07
    18d4:	b8 85       	ldd	r27, Y+8	; 0x08
    18d6:	29 81       	ldd	r18, Y+1	; 0x01
    18d8:	3a 81       	ldd	r19, Y+2	; 0x02
    18da:	4b 81       	ldd	r20, Y+3	; 0x03
    18dc:	5c 81       	ldd	r21, Y+4	; 0x04
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <__udivmodsi4>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	a1 05       	cpc	r26, r1
    18ee:	b1 05       	cpc	r27, r1
    18f0:	19 f7       	brne	.-58     	; 0x18b8 <M_vTIMER0_SetDelayTimeMilliSec+0x162>
								{
									MAX_OC0_VALUE--;
								}
								//TIMER0_OCR0_REG = MAX_OC0_VALUE;
								Delay_CmpMatch_Count = DesiredTick / MAX_OC0_VALUE;
    18f2:	8d 81       	ldd	r24, Y+5	; 0x05
    18f4:	9e 81       	ldd	r25, Y+6	; 0x06
    18f6:	af 81       	ldd	r26, Y+7	; 0x07
    18f8:	b8 85       	ldd	r27, Y+8	; 0x08
    18fa:	29 81       	ldd	r18, Y+1	; 0x01
    18fc:	3a 81       	ldd	r19, Y+2	; 0x02
    18fe:	4b 81       	ldd	r20, Y+3	; 0x03
    1900:	5c 81       	ldd	r21, Y+4	; 0x04
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <__udivmodsi4>
    190a:	da 01       	movw	r26, r20
    190c:	c9 01       	movw	r24, r18
    190e:	80 93 b9 04 	sts	0x04B9, r24
    1912:	90 93 ba 04 	sts	0x04BA, r25
    1916:	a0 93 bb 04 	sts	0x04BB, r26
    191a:	b0 93 bc 04 	sts	0x04BC, r27


	}


	M_vTIMER0_Start(Prescaler);
    191e:	8d 89       	ldd	r24, Y+21	; 0x15
    1920:	9e 89       	ldd	r25, Y+22	; 0x16
    1922:	0e 94 11 0b 	call	0x1622	; 0x1622 <M_vTIMER0_Start>
	return Delay_OverFlow_Count;
    1926:	80 91 b5 04 	lds	r24, 0x04B5
    192a:	90 91 b6 04 	lds	r25, 0x04B6
    192e:	a0 91 b7 04 	lds	r26, 0x04B7
    1932:	b0 91 b8 04 	lds	r27, 0x04B8
}
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	69 96       	adiw	r28, 0x19	; 25
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <M_vTIMER0_EnableInt>:


/*******************************************************************/
/*******************************************************************/
void M_vTIMER0_EnableInt(TIMER0_INT_TYPES_t  TIMER0_INT)
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	00 d0       	rcall	.+0      	; 0x1952 <M_vTIMER0_EnableInt+0x6>
    1952:	0f 92       	push	r0
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	89 83       	std	Y+1, r24	; 0x01


	switch(TIMER0_INT)
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	3b 83       	std	Y+3, r19	; 0x03
    1962:	2a 83       	std	Y+2, r18	; 0x02
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	9b 81       	ldd	r25, Y+3	; 0x03
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	31 f0       	breq	.+12     	; 0x1978 <M_vTIMER0_EnableInt+0x2c>
    196c:	2a 81       	ldd	r18, Y+2	; 0x02
    196e:	3b 81       	ldd	r19, Y+3	; 0x03
    1970:	21 30       	cpi	r18, 0x01	; 1
    1972:	31 05       	cpc	r19, r1
    1974:	49 f0       	breq	.+18     	; 0x1988 <M_vTIMER0_EnableInt+0x3c>
    1976:	0f c0       	rjmp	.+30     	; 0x1996 <M_vTIMER0_EnableInt+0x4a>
	{

		case TIMER0_OVERFLOW_INT:
									SET_BIT(TIMER0_TIMSK_REG, TIMER0_TIMSK_REG_TOIE0_POS);
    1978:	a9 e5       	ldi	r26, 0x59	; 89
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e9 e5       	ldi	r30, 0x59	; 89
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	81 60       	ori	r24, 0x01	; 1
    1984:	8c 93       	st	X, r24
    1986:	07 c0       	rjmp	.+14     	; 0x1996 <M_vTIMER0_EnableInt+0x4a>
									break;

		case TIMER0_OC0_INT:
									SET_BIT(TIMER0_TIMSK_REG, TIMER0_TIMSK_REG_OCIE0_POS);
    1988:	a9 e5       	ldi	r26, 0x59	; 89
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e9 e5       	ldi	r30, 0x59	; 89
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	82 60       	ori	r24, 0x02	; 2
    1994:	8c 93       	st	X, r24
									break;
	}

}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <M_vTIMER0_DisableInt>:


/*******************************************************************/
/*******************************************************************/
void M_vTIMER0_DisableInt(TIMER0_INT_TYPES_t  TIMER0_INT){
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <M_vTIMER0_DisableInt+0x6>
    19a8:	0f 92       	push	r0
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	89 83       	std	Y+1, r24	; 0x01

	switch(TIMER0_INT)
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	3b 83       	std	Y+3, r19	; 0x03
    19b8:	2a 83       	std	Y+2, r18	; 0x02
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	9b 81       	ldd	r25, Y+3	; 0x03
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	31 f0       	breq	.+12     	; 0x19ce <M_vTIMER0_DisableInt+0x2c>
    19c2:	2a 81       	ldd	r18, Y+2	; 0x02
    19c4:	3b 81       	ldd	r19, Y+3	; 0x03
    19c6:	21 30       	cpi	r18, 0x01	; 1
    19c8:	31 05       	cpc	r19, r1
    19ca:	49 f0       	breq	.+18     	; 0x19de <M_vTIMER0_DisableInt+0x3c>
    19cc:	0f c0       	rjmp	.+30     	; 0x19ec <M_vTIMER0_DisableInt+0x4a>
	{

		case TIMER0_OVERFLOW_INT:
									CLR_BIT(TIMER0_TIMSK_REG, TIMER0_TIMSK_REG_TOIE0_POS);
    19ce:	a9 e5       	ldi	r26, 0x59	; 89
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e9 e5       	ldi	r30, 0x59	; 89
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8e 7f       	andi	r24, 0xFE	; 254
    19da:	8c 93       	st	X, r24
    19dc:	07 c0       	rjmp	.+14     	; 0x19ec <M_vTIMER0_DisableInt+0x4a>
									break;

		case TIMER0_OC0_INT:
									CLR_BIT(TIMER0_TIMSK_REG, TIMER0_TIMSK_REG_OCIE0_POS);
    19de:	a9 e5       	ldi	r26, 0x59	; 89
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e9 e5       	ldi	r30, 0x59	; 89
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	8d 7f       	andi	r24, 0xFD	; 253
    19ea:	8c 93       	st	X, r24
									break;
	}

}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <M_vTIMER0_SetFastPWM>:


/*******************************************************************/
/*******************************************************************/
void M_vTIMER0_SetFastPWM(u32 Frequency, u8 Duty_Cycle, TIMER0_PWM_FAST_OC0_MODES_t FAST_PWM_MODE){
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	2a 97       	sbiw	r28, 0x0a	; 10
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	6b 83       	std	Y+3, r22	; 0x03
    1a0e:	7c 83       	std	Y+4, r23	; 0x04
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	4f 83       	std	Y+7, r20	; 0x07
    1a16:	28 87       	std	Y+8, r18	; 0x08

	//u8 OCR0_Value;
	TIMER0_Prescaler_t Required_Prescaler;

	switch(FAST_PWM_MODE)
    1a18:	88 85       	ldd	r24, Y+8	; 0x08
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	3a 87       	std	Y+10, r19	; 0x0a
    1a20:	29 87       	std	Y+9, r18	; 0x09
    1a22:	49 85       	ldd	r20, Y+9	; 0x09
    1a24:	5a 85       	ldd	r21, Y+10	; 0x0a
    1a26:	40 32       	cpi	r20, 0x20	; 32
    1a28:	51 05       	cpc	r21, r1
    1a2a:	31 f0       	breq	.+12     	; 0x1a38 <M_vTIMER0_SetFastPWM+0x40>
    1a2c:	89 85       	ldd	r24, Y+9	; 0x09
    1a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a30:	80 33       	cpi	r24, 0x30	; 48
    1a32:	91 05       	cpc	r25, r1
    1a34:	89 f0       	breq	.+34     	; 0x1a58 <M_vTIMER0_SetFastPWM+0x60>
    1a36:	25 c0       	rjmp	.+74     	; 0x1a82 <M_vTIMER0_SetFastPWM+0x8a>
	{
		case TIMER0_PWM_FAST_NonInverted_MODE:
												TIMER0_OCR0_REG = ((Duty_Cycle*256)/100)-1;
    1a38:	ec e5       	ldi	r30, 0x5C	; 92
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	98 2f       	mov	r25, r24
    1a44:	88 27       	eor	r24, r24
    1a46:	24 e6       	ldi	r18, 0x64	; 100
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	b9 01       	movw	r22, r18
    1a4c:	0e 94 e5 35 	call	0x6bca	; 0x6bca <__divmodhi4>
    1a50:	cb 01       	movw	r24, r22
    1a52:	81 50       	subi	r24, 0x01	; 1
    1a54:	80 83       	st	Z, r24
    1a56:	15 c0       	rjmp	.+42     	; 0x1a82 <M_vTIMER0_SetFastPWM+0x8a>
												//TIMER0_OCR0_REG = OCR0_Value;
												break;

		case TIMER0_PWM_FAST_Inverted_MODE:		TIMER0_OCR0_REG = (255 - (Duty_Cycle/100)*256);
    1a58:	ec e5       	ldi	r30, 0x5C	; 92
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a5e:	94 e6       	ldi	r25, 0x64	; 100
    1a60:	69 2f       	mov	r22, r25
    1a62:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <__udivmodqi4>
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	9f ef       	ldi	r25, 0xFF	; 255
    1a6e:	ac 01       	movw	r20, r24
    1a70:	24 9f       	mul	r18, r20
    1a72:	c0 01       	movw	r24, r0
    1a74:	25 9f       	mul	r18, r21
    1a76:	90 0d       	add	r25, r0
    1a78:	34 9f       	mul	r19, r20
    1a7a:	90 0d       	add	r25, r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	81 50       	subi	r24, 0x01	; 1
    1a80:	80 83       	st	Z, r24
												//TIMER0_OCR0_REG = OCR0_Value;
												break;
	}


	Required_Prescaler = FCPU/(256*Frequency);
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	ad 81       	ldd	r26, Y+5	; 0x05
    1a88:	be 81       	ldd	r27, Y+6	; 0x06
    1a8a:	22 27       	eor	r18, r18
    1a8c:	38 2f       	mov	r19, r24
    1a8e:	49 2f       	mov	r20, r25
    1a90:	5a 2f       	mov	r21, r26
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	94 e2       	ldi	r25, 0x24	; 36
    1a96:	a4 ef       	ldi	r26, 0xF4	; 244
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	bc 01       	movw	r22, r24
    1a9c:	cd 01       	movw	r24, r26
    1a9e:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <__udivmodsi4>
    1aa2:	da 01       	movw	r26, r20
    1aa4:	c9 01       	movw	r24, r18
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01

	M_vTIMER0_Start(Required_Prescaler);
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	0e 94 11 0b 	call	0x1622	; 0x1622 <M_vTIMER0_Start>


}
    1ab2:	2a 96       	adiw	r28, 0x0a	; 10
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <M_vTIMER0_SetPhaseCorrectPWM>:


/*******************************************************************/
/*******************************************************************/
void M_vTIMER0_SetPhaseCorrectPWM(u32 Frequency, u8 Duty_Cycle, TIMER0_PWM_PHASECORRECT_OC0_MODES_t PWM_PHASECORRECT_MODE2)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	2b 97       	sbiw	r28, 0x0b	; 11
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	6c 83       	std	Y+4, r22	; 0x04
    1ada:	7d 83       	std	Y+5, r23	; 0x05
    1adc:	8e 83       	std	Y+6, r24	; 0x06
    1ade:	9f 83       	std	Y+7, r25	; 0x07
    1ae0:	48 87       	std	Y+8, r20	; 0x08
    1ae2:	29 87       	std	Y+9, r18	; 0x09

	u8 OCR0_Value;
	TIMER0_Prescaler_t Required_Prescaler;

	switch(PWM_PHASECORRECT_MODE2)
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	3b 87       	std	Y+11, r19	; 0x0b
    1aec:	2a 87       	std	Y+10, r18	; 0x0a
    1aee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1af0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1af2:	80 32       	cpi	r24, 0x20	; 32
    1af4:	91 05       	cpc	r25, r1
    1af6:	31 f0       	breq	.+12     	; 0x1b04 <M_vTIMER0_SetPhaseCorrectPWM+0x40>
    1af8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1afa:	3b 85       	ldd	r19, Y+11	; 0x0b
    1afc:	20 33       	cpi	r18, 0x30	; 48
    1afe:	31 05       	cpc	r19, r1
    1b00:	e1 f0       	breq	.+56     	; 0x1b3a <M_vTIMER0_SetPhaseCorrectPWM+0x76>
    1b02:	38 c0       	rjmp	.+112    	; 0x1b74 <M_vTIMER0_SetPhaseCorrectPWM+0xb0>
	{
		case TIMER0_PWM_PHASECORRECT_NonInverted_MODE:
														TIMER0_OCR0_REG = ((Duty_Cycle*255)/100);
    1b04:	ec e5       	ldi	r30, 0x5C	; 92
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	88 85       	ldd	r24, Y+8	; 0x08
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	ca 01       	movw	r24, r20
    1b10:	9c 01       	movw	r18, r24
    1b12:	22 0f       	add	r18, r18
    1b14:	33 1f       	adc	r19, r19
    1b16:	c9 01       	movw	r24, r18
    1b18:	96 95       	lsr	r25
    1b1a:	98 2f       	mov	r25, r24
    1b1c:	88 27       	eor	r24, r24
    1b1e:	97 95       	ror	r25
    1b20:	87 95       	ror	r24
    1b22:	82 1b       	sub	r24, r18
    1b24:	93 0b       	sbc	r25, r19
    1b26:	84 0f       	add	r24, r20
    1b28:	95 1f       	adc	r25, r21
    1b2a:	24 e6       	ldi	r18, 0x64	; 100
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	b9 01       	movw	r22, r18
    1b30:	0e 94 e5 35 	call	0x6bca	; 0x6bca <__divmodhi4>
    1b34:	cb 01       	movw	r24, r22
    1b36:	80 83       	st	Z, r24
    1b38:	1d c0       	rjmp	.+58     	; 0x1b74 <M_vTIMER0_SetPhaseCorrectPWM+0xb0>
														//TIMER0_OCR0_REG = Duty_Cycle;
														break;

		case TIMER0_PWM_PHASECORRECT_Inverted_MODE:
														TIMER0_OCR0_REG = ((1 - (Duty_Cycle/100))*255);
    1b3a:	ec e5       	ldi	r30, 0x5C	; 92
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	88 85       	ldd	r24, Y+8	; 0x08
    1b40:	94 e6       	ldi	r25, 0x64	; 100
    1b42:	69 2f       	mov	r22, r25
    1b44:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <__udivmodqi4>
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	ac 01       	movw	r20, r24
    1b52:	42 1b       	sub	r20, r18
    1b54:	53 0b       	sbc	r21, r19
    1b56:	ca 01       	movw	r24, r20
    1b58:	9c 01       	movw	r18, r24
    1b5a:	22 0f       	add	r18, r18
    1b5c:	33 1f       	adc	r19, r19
    1b5e:	c9 01       	movw	r24, r18
    1b60:	96 95       	lsr	r25
    1b62:	98 2f       	mov	r25, r24
    1b64:	88 27       	eor	r24, r24
    1b66:	97 95       	ror	r25
    1b68:	87 95       	ror	r24
    1b6a:	82 1b       	sub	r24, r18
    1b6c:	93 0b       	sbc	r25, r19
    1b6e:	84 0f       	add	r24, r20
    1b70:	95 1f       	adc	r25, r21
    1b72:	80 83       	st	Z, r24
														break;
	}


 
	Required_Prescaler = FCPU/(510*Frequency);
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	9d 81       	ldd	r25, Y+5	; 0x05
    1b78:	ae 81       	ldd	r26, Y+6	; 0x06
    1b7a:	bf 81       	ldd	r27, Y+7	; 0x07
    1b7c:	2e ef       	ldi	r18, 0xFE	; 254
    1b7e:	31 e0       	ldi	r19, 0x01	; 1
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	bc 01       	movw	r22, r24
    1b86:	cd 01       	movw	r24, r26
    1b88:	0e 94 a6 35 	call	0x6b4c	; 0x6b4c <__mulsi3>
    1b8c:	9b 01       	movw	r18, r22
    1b8e:	ac 01       	movw	r20, r24
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	94 e2       	ldi	r25, 0x24	; 36
    1b94:	a4 ef       	ldi	r26, 0xF4	; 244
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	bc 01       	movw	r22, r24
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <__udivmodsi4>
    1ba0:	da 01       	movw	r26, r20
    1ba2:	c9 01       	movw	r24, r18
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
	
	if( (Required_Prescaler < 5)  && (Required_Prescaler != 1) )
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bac:	85 30       	cpi	r24, 0x05	; 5
    1bae:	91 05       	cpc	r25, r1
    1bb0:	50 f4       	brcc	.+20     	; 0x1bc6 <M_vTIMER0_SetPhaseCorrectPWM+0x102>
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	91 05       	cpc	r25, r1
    1bba:	29 f0       	breq	.+10     	; 0x1bc6 <M_vTIMER0_SetPhaseCorrectPWM+0x102>
	{
		
		Required_Prescaler = 1;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	4e c0       	rjmp	.+156    	; 0x1c62 <M_vTIMER0_SetPhaseCorrectPWM+0x19e>
	}
	else if( (Required_Prescaler > 5)  && (Required_Prescaler <= 30) && (Required_Prescaler != 8) )
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	86 30       	cpi	r24, 0x06	; 6
    1bcc:	91 05       	cpc	r25, r1
    1bce:	78 f0       	brcs	.+30     	; 0x1bee <M_vTIMER0_SetPhaseCorrectPWM+0x12a>
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	8f 31       	cpi	r24, 0x1F	; 31
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	50 f4       	brcc	.+20     	; 0x1bee <M_vTIMER0_SetPhaseCorrectPWM+0x12a>
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	88 30       	cpi	r24, 0x08	; 8
    1be0:	91 05       	cpc	r25, r1
    1be2:	29 f0       	breq	.+10     	; 0x1bee <M_vTIMER0_SetPhaseCorrectPWM+0x12a>
	{
		Required_Prescaler = 8;
    1be4:	88 e0       	ldi	r24, 0x08	; 8
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	3a c0       	rjmp	.+116    	; 0x1c62 <M_vTIMER0_SetPhaseCorrectPWM+0x19e>
	}
	else if( (Required_Prescaler > 30)  && (Required_Prescaler <= 150) && (Required_Prescaler != 64) )
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	8f 31       	cpi	r24, 0x1F	; 31
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	78 f0       	brcs	.+30     	; 0x1c16 <M_vTIMER0_SetPhaseCorrectPWM+0x152>
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	87 39       	cpi	r24, 0x97	; 151
    1bfe:	91 05       	cpc	r25, r1
    1c00:	50 f4       	brcc	.+20     	; 0x1c16 <M_vTIMER0_SetPhaseCorrectPWM+0x152>
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	9a 81       	ldd	r25, Y+2	; 0x02
    1c06:	80 34       	cpi	r24, 0x40	; 64
    1c08:	91 05       	cpc	r25, r1
    1c0a:	29 f0       	breq	.+10     	; 0x1c16 <M_vTIMER0_SetPhaseCorrectPWM+0x152>
	{
		Required_Prescaler = 64;
    1c0c:	80 e4       	ldi	r24, 0x40	; 64
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9a 83       	std	Y+2, r25	; 0x02
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	26 c0       	rjmp	.+76     	; 0x1c62 <M_vTIMER0_SetPhaseCorrectPWM+0x19e>
	}
	else if( (Required_Prescaler > 150)  && (Required_Prescaler <= 750) && (Required_Prescaler != 256) )
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1a:	87 39       	cpi	r24, 0x97	; 151
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	88 f0       	brcs	.+34     	; 0x1c42 <M_vTIMER0_SetPhaseCorrectPWM+0x17e>
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	9a 81       	ldd	r25, Y+2	; 0x02
    1c24:	32 e0       	ldi	r19, 0x02	; 2
    1c26:	8f 3e       	cpi	r24, 0xEF	; 239
    1c28:	93 07       	cpc	r25, r19
    1c2a:	58 f4       	brcc	.+22     	; 0x1c42 <M_vTIMER0_SetPhaseCorrectPWM+0x17e>
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	21 e0       	ldi	r18, 0x01	; 1
    1c32:	80 30       	cpi	r24, 0x00	; 0
    1c34:	92 07       	cpc	r25, r18
    1c36:	29 f0       	breq	.+10     	; 0x1c42 <M_vTIMER0_SetPhaseCorrectPWM+0x17e>
	{
		Required_Prescaler = 256;
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	91 e0       	ldi	r25, 0x01	; 1
    1c3c:	9a 83       	std	Y+2, r25	; 0x02
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	10 c0       	rjmp	.+32     	; 0x1c62 <M_vTIMER0_SetPhaseCorrectPWM+0x19e>
	}
	else if( (Required_Prescaler > 750) &&  (Required_Prescaler != 1024) )
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	9a 81       	ldd	r25, Y+2	; 0x02
    1c46:	32 e0       	ldi	r19, 0x02	; 2
    1c48:	8f 3e       	cpi	r24, 0xEF	; 239
    1c4a:	93 07       	cpc	r25, r19
    1c4c:	50 f0       	brcs	.+20     	; 0x1c62 <M_vTIMER0_SetPhaseCorrectPWM+0x19e>
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	9a 81       	ldd	r25, Y+2	; 0x02
    1c52:	24 e0       	ldi	r18, 0x04	; 4
    1c54:	80 30       	cpi	r24, 0x00	; 0
    1c56:	92 07       	cpc	r25, r18
    1c58:	21 f0       	breq	.+8      	; 0x1c62 <M_vTIMER0_SetPhaseCorrectPWM+0x19e>
	{
		Required_Prescaler = 1024;
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	94 e0       	ldi	r25, 0x04	; 4
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01
	}

	//Required_Prescaler = 256;
	M_vTIMER0_Start(1024);
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	94 e0       	ldi	r25, 0x04	; 4
    1c66:	0e 94 11 0b 	call	0x1622	; 0x1622 <M_vTIMER0_Start>

}
    1c6a:	2b 96       	adiw	r28, 0x0b	; 11
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <M_vTIMER0_SetCallBack>:

/*******************************************************************/
/*******************************************************************/
/* Set callback functions  */
void M_vTIMER0_SetCallBack(void(*PtrFun)(void) , TIMER0_INT_TYPES_t INT_ID )
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <M_vTIMER0_SetCallBack+0x6>
    1c82:	0f 92       	push	r0
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    1c8c:	6b 83       	std	Y+3, r22	; 0x03

	if(PtrFun != NULL)
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	61 f0       	breq	.+24     	; 0x1cae <M_vTIMER0_SetCallBack+0x32>
	{
		Timer0_CallBack_Arr[INT_ID] = PtrFun;
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	e7 55       	subi	r30, 0x57	; 87
    1ca4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	80 83       	st	Z, r24
	}

}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <__vector_11>:
/*******************************************************************/
/*******************************************************************/
/* OverFlow interrupt */

ISR(TIMER0_OVF_vect)
{
    1cba:	1f 92       	push	r1
    1cbc:	0f 92       	push	r0
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	0f 92       	push	r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	2f 93       	push	r18
    1cc6:	3f 93       	push	r19
    1cc8:	4f 93       	push	r20
    1cca:	5f 93       	push	r21
    1ccc:	6f 93       	push	r22
    1cce:	7f 93       	push	r23
    1cd0:	8f 93       	push	r24
    1cd2:	9f 93       	push	r25
    1cd4:	af 93       	push	r26
    1cd6:	bf 93       	push	r27
    1cd8:	ef 93       	push	r30
    1cda:	ff 93       	push	r31
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62

	static  u32 OverFlow_Counter =0;


	if(OverFlow_Counter == Delay_OverFlow_Count)
    1ce4:	20 91 b1 04 	lds	r18, 0x04B1
    1ce8:	30 91 b2 04 	lds	r19, 0x04B2
    1cec:	40 91 b3 04 	lds	r20, 0x04B3
    1cf0:	50 91 b4 04 	lds	r21, 0x04B4
    1cf4:	80 91 b5 04 	lds	r24, 0x04B5
    1cf8:	90 91 b6 04 	lds	r25, 0x04B6
    1cfc:	a0 91 b7 04 	lds	r26, 0x04B7
    1d00:	b0 91 b8 04 	lds	r27, 0x04B8
    1d04:	28 17       	cp	r18, r24
    1d06:	39 07       	cpc	r19, r25
    1d08:	4a 07       	cpc	r20, r26
    1d0a:	5b 07       	cpc	r21, r27
    1d0c:	a1 f4       	brne	.+40     	; 0x1d36 <__vector_11+0x7c>
	{
		if(Timer0_CallBack_Arr[0] != NULL)
    1d0e:	80 91 a9 04 	lds	r24, 0x04A9
    1d12:	90 91 aa 04 	lds	r25, 0x04AA
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	09 f1       	breq	.+66     	; 0x1d5c <__vector_11+0xa2>
		{
			Timer0_CallBack_Arr[0]();
    1d1a:	e0 91 a9 04 	lds	r30, 0x04A9
    1d1e:	f0 91 aa 04 	lds	r31, 0x04AA
    1d22:	09 95       	icall
			OverFlow_Counter =0;
    1d24:	10 92 b1 04 	sts	0x04B1, r1
    1d28:	10 92 b2 04 	sts	0x04B2, r1
    1d2c:	10 92 b3 04 	sts	0x04B3, r1
    1d30:	10 92 b4 04 	sts	0x04B4, r1
    1d34:	13 c0       	rjmp	.+38     	; 0x1d5c <__vector_11+0xa2>
			//M_vTIMER0_Stop();  // uncomment this line for one time delay
		}
	}

	else{
	OverFlow_Counter++;
    1d36:	80 91 b1 04 	lds	r24, 0x04B1
    1d3a:	90 91 b2 04 	lds	r25, 0x04B2
    1d3e:	a0 91 b3 04 	lds	r26, 0x04B3
    1d42:	b0 91 b4 04 	lds	r27, 0x04B4
    1d46:	01 96       	adiw	r24, 0x01	; 1
    1d48:	a1 1d       	adc	r26, r1
    1d4a:	b1 1d       	adc	r27, r1
    1d4c:	80 93 b1 04 	sts	0x04B1, r24
    1d50:	90 93 b2 04 	sts	0x04B2, r25
    1d54:	a0 93 b3 04 	sts	0x04B3, r26
    1d58:	b0 93 b4 04 	sts	0x04B4, r27
	}

}
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	ff 91       	pop	r31
    1d62:	ef 91       	pop	r30
    1d64:	bf 91       	pop	r27
    1d66:	af 91       	pop	r26
    1d68:	9f 91       	pop	r25
    1d6a:	8f 91       	pop	r24
    1d6c:	7f 91       	pop	r23
    1d6e:	6f 91       	pop	r22
    1d70:	5f 91       	pop	r21
    1d72:	4f 91       	pop	r20
    1d74:	3f 91       	pop	r19
    1d76:	2f 91       	pop	r18
    1d78:	0f 90       	pop	r0
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	0f 90       	pop	r0
    1d7e:	1f 90       	pop	r1
    1d80:	18 95       	reti

00001d82 <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr, int arr_size)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	2d 97       	sbiw	r28, 0x0d	; 13
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
    1d96:	9d 83       	std	Y+5, r25	; 0x05
    1d98:	8c 83       	std	Y+4, r24	; 0x04
    1d9a:	7f 83       	std	Y+7, r23	; 0x07
    1d9c:	6e 83       	std	Y+6, r22	; 0x06

	if(ConfigPtr == NULL)
    1d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1da0:	9d 81       	ldd	r25, Y+5	; 0x05
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <Port_Init+0x26>
    1da6:	55 c2       	rjmp	.+1194   	; 0x2252 <Port_Init+0x4d0>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<arr_size;i++)
    1da8:	1b 82       	std	Y+3, r1	; 0x03
    1daa:	4a c2       	rjmp	.+1172   	; 0x2240 <Port_Init+0x4be>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9c 01       	movw	r18, r24
    1db4:	22 0f       	add	r18, r18
    1db6:	33 1f       	adc	r19, r19
    1db8:	22 0f       	add	r18, r18
    1dba:	33 1f       	adc	r19, r19
    1dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e2 0f       	add	r30, r18
    1dc4:	f3 1f       	adc	r31, r19
    1dc6:	80 81       	ld	r24, Z
    1dc8:	9a e0       	ldi	r25, 0x0A	; 10
    1dca:	69 2f       	mov	r22, r25
    1dcc:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <__udivmodqi4>
    1dd0:	89 2f       	mov	r24, r25
    1dd2:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	88 2f       	mov	r24, r24
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9c 01       	movw	r18, r24
    1ddc:	22 0f       	add	r18, r18
    1dde:	33 1f       	adc	r19, r19
    1de0:	22 0f       	add	r18, r18
    1de2:	33 1f       	adc	r19, r19
    1de4:	8c 81       	ldd	r24, Y+4	; 0x04
    1de6:	9d 81       	ldd	r25, Y+5	; 0x05
    1de8:	fc 01       	movw	r30, r24
    1dea:	e2 0f       	add	r30, r18
    1dec:	f3 1f       	adc	r31, r19
    1dee:	80 81       	ld	r24, Z
    1df0:	9a e0       	ldi	r25, 0x0A	; 10
    1df2:	69 2f       	mov	r22, r25
    1df4:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <__udivmodqi4>
    1df8:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9c 01       	movw	r18, r24
    1e02:	22 0f       	add	r18, r18
    1e04:	33 1f       	adc	r19, r19
    1e06:	22 0f       	add	r18, r18
    1e08:	33 1f       	adc	r19, r19
    1e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0e:	fc 01       	movw	r30, r24
    1e10:	e2 0f       	add	r30, r18
    1e12:	f3 1f       	adc	r31, r19
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	88 23       	and	r24, r24
    1e18:	89 f0       	breq	.+34     	; 0x1e3c <Port_Init+0xba>
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	9c 01       	movw	r18, r24
    1e22:	22 0f       	add	r18, r18
    1e24:	33 1f       	adc	r19, r19
    1e26:	22 0f       	add	r18, r18
    1e28:	33 1f       	adc	r19, r19
    1e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2e:	fc 01       	movw	r30, r24
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	81 30       	cpi	r24, 0x01	; 1
    1e38:	09 f0       	breq	.+2      	; 0x1e3c <Port_Init+0xba>
    1e3a:	ff c1       	rjmp	.+1022   	; 0x223a <Port_Init+0x4b8>
				{
					switch(Local_port)
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	3d 87       	std	Y+13, r19	; 0x0d
    1e44:	2c 87       	std	Y+12, r18	; 0x0c
    1e46:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e48:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e4a:	62 30       	cpi	r22, 0x02	; 2
    1e4c:	71 05       	cpc	r23, r1
    1e4e:	d1 f1       	breq	.+116    	; 0x1ec4 <Port_Init+0x142>
    1e50:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e52:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e54:	83 30       	cpi	r24, 0x03	; 3
    1e56:	91 05       	cpc	r25, r1
    1e58:	34 f4       	brge	.+12     	; 0x1e66 <Port_Init+0xe4>
    1e5a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e5c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e5e:	21 30       	cpi	r18, 0x01	; 1
    1e60:	31 05       	cpc	r19, r1
    1e62:	71 f0       	breq	.+28     	; 0x1e80 <Port_Init+0xfe>
    1e64:	94 c0       	rjmp	.+296    	; 0x1f8e <Port_Init+0x20c>
    1e66:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e68:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e6a:	63 30       	cpi	r22, 0x03	; 3
    1e6c:	71 05       	cpc	r23, r1
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <Port_Init+0xf0>
    1e70:	4b c0       	rjmp	.+150    	; 0x1f08 <Port_Init+0x186>
    1e72:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e74:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e76:	84 30       	cpi	r24, 0x04	; 4
    1e78:	91 05       	cpc	r25, r1
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <Port_Init+0xfc>
    1e7c:	67 c0       	rjmp	.+206    	; 0x1f4c <Port_Init+0x1ca>
    1e7e:	87 c0       	rjmp	.+270    	; 0x1f8e <Port_Init+0x20c>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1e80:	aa e3       	ldi	r26, 0x3A	; 58
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	ea e3       	ldi	r30, 0x3A	; 58
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	40 81       	ld	r20, Z
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	88 2f       	mov	r24, r24
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9c 01       	movw	r18, r24
    1e92:	22 0f       	add	r18, r18
    1e94:	33 1f       	adc	r19, r19
    1e96:	22 0f       	add	r18, r18
    1e98:	33 1f       	adc	r19, r19
    1e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	e2 0f       	add	r30, r18
    1ea2:	f3 1f       	adc	r31, r19
    1ea4:	82 81       	ldd	r24, Z+2	; 0x02
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	b9 01       	movw	r22, r18
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <Port_Init+0x136>
    1eb4:	66 0f       	add	r22, r22
    1eb6:	77 1f       	adc	r23, r23
    1eb8:	8a 95       	dec	r24
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <Port_Init+0x132>
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	84 2b       	or	r24, r20
    1ec0:	8c 93       	st	X, r24
    1ec2:	65 c0       	rjmp	.+202    	; 0x1f8e <Port_Init+0x20c>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1ec4:	a7 e3       	ldi	r26, 0x37	; 55
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e7 e3       	ldi	r30, 0x37	; 55
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	40 81       	ld	r20, Z
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9c 01       	movw	r18, r24
    1ed6:	22 0f       	add	r18, r18
    1ed8:	33 1f       	adc	r19, r19
    1eda:	22 0f       	add	r18, r18
    1edc:	33 1f       	adc	r19, r19
    1ede:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	e2 0f       	add	r30, r18
    1ee6:	f3 1f       	adc	r31, r19
    1ee8:	82 81       	ldd	r24, Z+2	; 0x02
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	b9 01       	movw	r22, r18
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <Port_Init+0x17a>
    1ef8:	66 0f       	add	r22, r22
    1efa:	77 1f       	adc	r23, r23
    1efc:	8a 95       	dec	r24
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <Port_Init+0x176>
    1f00:	cb 01       	movw	r24, r22
    1f02:	84 2b       	or	r24, r20
    1f04:	8c 93       	st	X, r24
    1f06:	43 c0       	rjmp	.+134    	; 0x1f8e <Port_Init+0x20c>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1f08:	a4 e3       	ldi	r26, 0x34	; 52
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e4 e3       	ldi	r30, 0x34	; 52
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	40 81       	ld	r20, Z
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	88 2f       	mov	r24, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9c 01       	movw	r18, r24
    1f1a:	22 0f       	add	r18, r18
    1f1c:	33 1f       	adc	r19, r19
    1f1e:	22 0f       	add	r18, r18
    1f20:	33 1f       	adc	r19, r19
    1f22:	8c 81       	ldd	r24, Y+4	; 0x04
    1f24:	9d 81       	ldd	r25, Y+5	; 0x05
    1f26:	fc 01       	movw	r30, r24
    1f28:	e2 0f       	add	r30, r18
    1f2a:	f3 1f       	adc	r31, r19
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	88 2f       	mov	r24, r24
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	b9 01       	movw	r22, r18
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <Port_Init+0x1be>
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	8a 95       	dec	r24
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <Port_Init+0x1ba>
    1f44:	cb 01       	movw	r24, r22
    1f46:	84 2b       	or	r24, r20
    1f48:	8c 93       	st	X, r24
    1f4a:	21 c0       	rjmp	.+66     	; 0x1f8e <Port_Init+0x20c>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1f4c:	a1 e3       	ldi	r26, 0x31	; 49
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e1 e3       	ldi	r30, 0x31	; 49
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	40 81       	ld	r20, Z
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9c 01       	movw	r18, r24
    1f5e:	22 0f       	add	r18, r18
    1f60:	33 1f       	adc	r19, r19
    1f62:	22 0f       	add	r18, r18
    1f64:	33 1f       	adc	r19, r19
    1f66:	8c 81       	ldd	r24, Y+4	; 0x04
    1f68:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	e2 0f       	add	r30, r18
    1f6e:	f3 1f       	adc	r31, r19
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	b9 01       	movw	r22, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <Port_Init+0x202>
    1f80:	66 0f       	add	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	8a 95       	dec	r24
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <Port_Init+0x1fe>
    1f88:	cb 01       	movw	r24, r22
    1f8a:	84 2b       	or	r24, r20
    1f8c:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	88 2f       	mov	r24, r24
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	9c 01       	movw	r18, r24
    1f96:	22 0f       	add	r18, r18
    1f98:	33 1f       	adc	r19, r19
    1f9a:	22 0f       	add	r18, r18
    1f9c:	33 1f       	adc	r19, r19
    1f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	e2 0f       	add	r30, r18
    1fa6:	f3 1f       	adc	r31, r19
    1fa8:	81 81       	ldd	r24, Z+1	; 0x01
    1faa:	88 23       	and	r24, r24
    1fac:	89 f0       	breq	.+34     	; 0x1fd0 <Port_Init+0x24e>
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9c 01       	movw	r18, r24
    1fb6:	22 0f       	add	r18, r18
    1fb8:	33 1f       	adc	r19, r19
    1fba:	22 0f       	add	r18, r18
    1fbc:	33 1f       	adc	r19, r19
    1fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	e2 0f       	add	r30, r18
    1fc6:	f3 1f       	adc	r31, r19
    1fc8:	81 81       	ldd	r24, Z+1	; 0x01
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <Port_Init+0x24e>
    1fce:	35 c1       	rjmp	.+618    	; 0x223a <Port_Init+0x4b8>
					{
						switch(Local_port)
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	3b 87       	std	Y+11, r19	; 0x0b
    1fd8:	2a 87       	std	Y+10, r18	; 0x0a
    1fda:	6a 85       	ldd	r22, Y+10	; 0x0a
    1fdc:	7b 85       	ldd	r23, Y+11	; 0x0b
    1fde:	62 30       	cpi	r22, 0x02	; 2
    1fe0:	71 05       	cpc	r23, r1
    1fe2:	d1 f1       	breq	.+116    	; 0x2058 <Port_Init+0x2d6>
    1fe4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fe6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fe8:	83 30       	cpi	r24, 0x03	; 3
    1fea:	91 05       	cpc	r25, r1
    1fec:	34 f4       	brge	.+12     	; 0x1ffa <Port_Init+0x278>
    1fee:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ff0:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ff2:	21 30       	cpi	r18, 0x01	; 1
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	71 f0       	breq	.+28     	; 0x2014 <Port_Init+0x292>
    1ff8:	94 c0       	rjmp	.+296    	; 0x2122 <Port_Init+0x3a0>
    1ffa:	6a 85       	ldd	r22, Y+10	; 0x0a
    1ffc:	7b 85       	ldd	r23, Y+11	; 0x0b
    1ffe:	63 30       	cpi	r22, 0x03	; 3
    2000:	71 05       	cpc	r23, r1
    2002:	09 f4       	brne	.+2      	; 0x2006 <Port_Init+0x284>
    2004:	4b c0       	rjmp	.+150    	; 0x209c <Port_Init+0x31a>
    2006:	8a 85       	ldd	r24, Y+10	; 0x0a
    2008:	9b 85       	ldd	r25, Y+11	; 0x0b
    200a:	84 30       	cpi	r24, 0x04	; 4
    200c:	91 05       	cpc	r25, r1
    200e:	09 f4       	brne	.+2      	; 0x2012 <Port_Init+0x290>
    2010:	67 c0       	rjmp	.+206    	; 0x20e0 <Port_Init+0x35e>
    2012:	87 c0       	rjmp	.+270    	; 0x2122 <Port_Init+0x3a0>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    2014:	ab e3       	ldi	r26, 0x3B	; 59
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	eb e3       	ldi	r30, 0x3B	; 59
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	40 81       	ld	r20, Z
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	88 2f       	mov	r24, r24
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9c 01       	movw	r18, r24
    2026:	22 0f       	add	r18, r18
    2028:	33 1f       	adc	r19, r19
    202a:	22 0f       	add	r18, r18
    202c:	33 1f       	adc	r19, r19
    202e:	8c 81       	ldd	r24, Y+4	; 0x04
    2030:	9d 81       	ldd	r25, Y+5	; 0x05
    2032:	fc 01       	movw	r30, r24
    2034:	e2 0f       	add	r30, r18
    2036:	f3 1f       	adc	r31, r19
    2038:	81 81       	ldd	r24, Z+1	; 0x01
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	88 2f       	mov	r24, r24
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	b9 01       	movw	r22, r18
    2046:	02 c0       	rjmp	.+4      	; 0x204c <Port_Init+0x2ca>
    2048:	66 0f       	add	r22, r22
    204a:	77 1f       	adc	r23, r23
    204c:	8a 95       	dec	r24
    204e:	e2 f7       	brpl	.-8      	; 0x2048 <Port_Init+0x2c6>
    2050:	cb 01       	movw	r24, r22
    2052:	84 2b       	or	r24, r20
    2054:	8c 93       	st	X, r24
    2056:	65 c0       	rjmp	.+202    	; 0x2122 <Port_Init+0x3a0>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    2058:	a8 e3       	ldi	r26, 0x38	; 56
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e8 e3       	ldi	r30, 0x38	; 56
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	40 81       	ld	r20, Z
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	9c 01       	movw	r18, r24
    206a:	22 0f       	add	r18, r18
    206c:	33 1f       	adc	r19, r19
    206e:	22 0f       	add	r18, r18
    2070:	33 1f       	adc	r19, r19
    2072:	8c 81       	ldd	r24, Y+4	; 0x04
    2074:	9d 81       	ldd	r25, Y+5	; 0x05
    2076:	fc 01       	movw	r30, r24
    2078:	e2 0f       	add	r30, r18
    207a:	f3 1f       	adc	r31, r19
    207c:	81 81       	ldd	r24, Z+1	; 0x01
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	b9 01       	movw	r22, r18
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <Port_Init+0x30e>
    208c:	66 0f       	add	r22, r22
    208e:	77 1f       	adc	r23, r23
    2090:	8a 95       	dec	r24
    2092:	e2 f7       	brpl	.-8      	; 0x208c <Port_Init+0x30a>
    2094:	cb 01       	movw	r24, r22
    2096:	84 2b       	or	r24, r20
    2098:	8c 93       	st	X, r24
    209a:	43 c0       	rjmp	.+134    	; 0x2122 <Port_Init+0x3a0>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    209c:	a5 e3       	ldi	r26, 0x35	; 53
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e5 e3       	ldi	r30, 0x35	; 53
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	40 81       	ld	r20, Z
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9c 01       	movw	r18, r24
    20ae:	22 0f       	add	r18, r18
    20b0:	33 1f       	adc	r19, r19
    20b2:	22 0f       	add	r18, r18
    20b4:	33 1f       	adc	r19, r19
    20b6:	8c 81       	ldd	r24, Y+4	; 0x04
    20b8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ba:	fc 01       	movw	r30, r24
    20bc:	e2 0f       	add	r30, r18
    20be:	f3 1f       	adc	r31, r19
    20c0:	81 81       	ldd	r24, Z+1	; 0x01
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	b9 01       	movw	r22, r18
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <Port_Init+0x352>
    20d0:	66 0f       	add	r22, r22
    20d2:	77 1f       	adc	r23, r23
    20d4:	8a 95       	dec	r24
    20d6:	e2 f7       	brpl	.-8      	; 0x20d0 <Port_Init+0x34e>
    20d8:	cb 01       	movw	r24, r22
    20da:	84 2b       	or	r24, r20
    20dc:	8c 93       	st	X, r24
    20de:	21 c0       	rjmp	.+66     	; 0x2122 <Port_Init+0x3a0>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    20e0:	a2 e3       	ldi	r26, 0x32	; 50
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e2 e3       	ldi	r30, 0x32	; 50
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	40 81       	ld	r20, Z
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9c 01       	movw	r18, r24
    20f2:	22 0f       	add	r18, r18
    20f4:	33 1f       	adc	r19, r19
    20f6:	22 0f       	add	r18, r18
    20f8:	33 1f       	adc	r19, r19
    20fa:	8c 81       	ldd	r24, Y+4	; 0x04
    20fc:	9d 81       	ldd	r25, Y+5	; 0x05
    20fe:	fc 01       	movw	r30, r24
    2100:	e2 0f       	add	r30, r18
    2102:	f3 1f       	adc	r31, r19
    2104:	81 81       	ldd	r24, Z+1	; 0x01
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	b9 01       	movw	r22, r18
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <Port_Init+0x396>
    2114:	66 0f       	add	r22, r22
    2116:	77 1f       	adc	r23, r23
    2118:	8a 95       	dec	r24
    211a:	e2 f7       	brpl	.-8      	; 0x2114 <Port_Init+0x392>
    211c:	cb 01       	movw	r24, r22
    211e:	84 2b       	or	r24, r20
    2120:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP && ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT )
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	88 2f       	mov	r24, r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9c 01       	movw	r18, r24
    212a:	22 0f       	add	r18, r18
    212c:	33 1f       	adc	r19, r19
    212e:	22 0f       	add	r18, r18
    2130:	33 1f       	adc	r19, r19
    2132:	8c 81       	ldd	r24, Y+4	; 0x04
    2134:	9d 81       	ldd	r25, Y+5	; 0x05
    2136:	fc 01       	movw	r30, r24
    2138:	e2 0f       	add	r30, r18
    213a:	f3 1f       	adc	r31, r19
    213c:	83 81       	ldd	r24, Z+3	; 0x03
    213e:	88 23       	and	r24, r24
    2140:	09 f0       	breq	.+2      	; 0x2144 <Port_Init+0x3c2>
    2142:	7b c0       	rjmp	.+246    	; 0x223a <Port_Init+0x4b8>
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9c 01       	movw	r18, r24
    214c:	22 0f       	add	r18, r18
    214e:	33 1f       	adc	r19, r19
    2150:	22 0f       	add	r18, r18
    2152:	33 1f       	adc	r19, r19
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	9d 81       	ldd	r25, Y+5	; 0x05
    2158:	fc 01       	movw	r30, r24
    215a:	e2 0f       	add	r30, r18
    215c:	f3 1f       	adc	r31, r19
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	88 23       	and	r24, r24
    2162:	09 f0       	breq	.+2      	; 0x2166 <Port_Init+0x3e4>
    2164:	6a c0       	rjmp	.+212    	; 0x223a <Port_Init+0x4b8>
						{
							switch(Local_port)
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	39 87       	std	Y+9, r19	; 0x09
    216e:	28 87       	std	Y+8, r18	; 0x08
    2170:	68 85       	ldd	r22, Y+8	; 0x08
    2172:	79 85       	ldd	r23, Y+9	; 0x09
    2174:	62 30       	cpi	r22, 0x02	; 2
    2176:	71 05       	cpc	r23, r1
    2178:	49 f1       	breq	.+82     	; 0x21cc <Port_Init+0x44a>
    217a:	88 85       	ldd	r24, Y+8	; 0x08
    217c:	99 85       	ldd	r25, Y+9	; 0x09
    217e:	83 30       	cpi	r24, 0x03	; 3
    2180:	91 05       	cpc	r25, r1
    2182:	34 f4       	brge	.+12     	; 0x2190 <Port_Init+0x40e>
    2184:	28 85       	ldd	r18, Y+8	; 0x08
    2186:	39 85       	ldd	r19, Y+9	; 0x09
    2188:	21 30       	cpi	r18, 0x01	; 1
    218a:	31 05       	cpc	r19, r1
    218c:	61 f0       	breq	.+24     	; 0x21a6 <Port_Init+0x424>
    218e:	55 c0       	rjmp	.+170    	; 0x223a <Port_Init+0x4b8>
    2190:	68 85       	ldd	r22, Y+8	; 0x08
    2192:	79 85       	ldd	r23, Y+9	; 0x09
    2194:	63 30       	cpi	r22, 0x03	; 3
    2196:	71 05       	cpc	r23, r1
    2198:	61 f1       	breq	.+88     	; 0x21f2 <Port_Init+0x470>
    219a:	88 85       	ldd	r24, Y+8	; 0x08
    219c:	99 85       	ldd	r25, Y+9	; 0x09
    219e:	84 30       	cpi	r24, 0x04	; 4
    21a0:	91 05       	cpc	r25, r1
    21a2:	d1 f1       	breq	.+116    	; 0x2218 <Port_Init+0x496>
    21a4:	4a c0       	rjmp	.+148    	; 0x223a <Port_Init+0x4b8>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    21a6:	ab e3       	ldi	r26, 0x3B	; 59
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	eb e3       	ldi	r30, 0x3B	; 59
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	40 81       	ld	r20, Z
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	02 2e       	mov	r0, r18
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <Port_Init+0x440>
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	0a 94       	dec	r0
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <Port_Init+0x43c>
    21c6:	84 2b       	or	r24, r20
    21c8:	8c 93       	st	X, r24
    21ca:	37 c0       	rjmp	.+110    	; 0x223a <Port_Init+0x4b8>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    21cc:	a8 e3       	ldi	r26, 0x38	; 56
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e8 e3       	ldi	r30, 0x38	; 56
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	40 81       	ld	r20, Z
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	02 2e       	mov	r0, r18
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <Port_Init+0x466>
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	0a 94       	dec	r0
    21ea:	e2 f7       	brpl	.-8      	; 0x21e4 <Port_Init+0x462>
    21ec:	84 2b       	or	r24, r20
    21ee:	8c 93       	st	X, r24
    21f0:	24 c0       	rjmp	.+72     	; 0x223a <Port_Init+0x4b8>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    21f2:	a5 e3       	ldi	r26, 0x35	; 53
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	e5 e3       	ldi	r30, 0x35	; 53
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	40 81       	ld	r20, Z
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	02 2e       	mov	r0, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <Port_Init+0x48c>
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	0a 94       	dec	r0
    2210:	e2 f7       	brpl	.-8      	; 0x220a <Port_Init+0x488>
    2212:	84 2b       	or	r24, r20
    2214:	8c 93       	st	X, r24
    2216:	11 c0       	rjmp	.+34     	; 0x223a <Port_Init+0x4b8>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    2218:	a2 e3       	ldi	r26, 0x32	; 50
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e2 e3       	ldi	r30, 0x32	; 50
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	40 81       	ld	r20, Z
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <Port_Init+0x4b0>
    222e:	88 0f       	add	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	2a 95       	dec	r18
    2234:	e2 f7       	brpl	.-8      	; 0x222e <Port_Init+0x4ac>
    2236:	84 2b       	or	r24, r20
    2238:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<arr_size;i++)
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	8f 5f       	subi	r24, 0xFF	; 255
    223e:	8b 83       	std	Y+3, r24	; 0x03
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	8e 81       	ldd	r24, Y+6	; 0x06
    2248:	9f 81       	ldd	r25, Y+7	; 0x07
    224a:	28 17       	cp	r18, r24
    224c:	39 07       	cpc	r19, r25
    224e:	0c f4       	brge	.+2      	; 0x2252 <Port_Init+0x4d0>
    2250:	ad cd       	rjmp	.-1190   	; 0x1dac <Port_Init+0x2a>
					//report error
				}

		    }//for
		}//else
}
    2252:	2d 96       	adiw	r28, 0x0d	; 13
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <M_vEnable_Global_Interrupts>:
#include "BIT_MATH.h"
#include "GLOBAL_INT_priv.h"
#include "GLOBAL_INT_int.h"

void M_vEnable_Global_Interrupts()
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GLOBAL_INT_SREG, 7);
    226c:	af e5       	ldi	r26, 0x5F	; 95
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	ef e5       	ldi	r30, 0x5F	; 95
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	80 68       	ori	r24, 0x80	; 128
    2278:	8c 93       	st	X, r24
}
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <M_vDisable_Global_Interrupts>:
void M_vDisable_Global_Interrupts()
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GLOBAL_INT_SREG, 7);
    2288:	af e5       	ldi	r26, 0x5F	; 95
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	ef e5       	ldi	r30, 0x5F	; 95
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	8f 77       	andi	r24, 0x7F	; 127
    2294:	8c 93       	st	X, r24
}
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <M_vEXTI_INT_Enable>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/

void M_vEXTI_INT_Enable(EXTI_CONFIG_t	EXTI_Arr[]){
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	28 97       	sbiw	r28, 0x08	; 8
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	8d 83       	std	Y+5, r24	; 0x05
	//EXTI_Arr_Len = (sizeof(EXTI_Arr) / sizeof (EXTI_CONFIG_t));

	EXTI_ID  ID;
    EXTI_SenseType_t  INT_Sense;

	for (int i =0; i < EXTI_INT_ArrConfig_Size; i++ )
    22b4:	1a 82       	std	Y+2, r1	; 0x02
    22b6:	19 82       	std	Y+1, r1	; 0x01
    22b8:	82 c0       	rjmp	.+260    	; 0x23be <M_vEXTI_INT_Enable+0x122>
	{
		ID = EXTI_Arr[i].INT_ID;
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	9a 81       	ldd	r25, Y+2	; 0x02
    22be:	9c 01       	movw	r18, r24
    22c0:	22 0f       	add	r18, r18
    22c2:	33 1f       	adc	r19, r19
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	fc 01       	movw	r30, r24
    22ca:	e2 0f       	add	r30, r18
    22cc:	f3 1f       	adc	r31, r19
    22ce:	80 81       	ld	r24, Z
    22d0:	8c 83       	std	Y+4, r24	; 0x04
		INT_Sense = EXTI_Arr[i].INT_SENSE;
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	9a 81       	ldd	r25, Y+2	; 0x02
    22d6:	9c 01       	movw	r18, r24
    22d8:	22 0f       	add	r18, r18
    22da:	33 1f       	adc	r19, r19
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
    22de:	9e 81       	ldd	r25, Y+6	; 0x06
    22e0:	fc 01       	movw	r30, r24
    22e2:	e2 0f       	add	r30, r18
    22e4:	f3 1f       	adc	r31, r19
    22e6:	81 81       	ldd	r24, Z+1	; 0x01
    22e8:	8b 83       	std	Y+3, r24	; 0x03

		switch(ID)
    22ea:	8c 81       	ldd	r24, Y+4	; 0x04
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	38 87       	std	Y+8, r19	; 0x08
    22f2:	2f 83       	std	Y+7, r18	; 0x07
    22f4:	8f 81       	ldd	r24, Y+7	; 0x07
    22f6:	98 85       	ldd	r25, Y+8	; 0x08
    22f8:	81 30       	cpi	r24, 0x01	; 1
    22fa:	91 05       	cpc	r25, r1
    22fc:	09 f1       	breq	.+66     	; 0x2340 <M_vEXTI_INT_Enable+0xa4>
    22fe:	2f 81       	ldd	r18, Y+7	; 0x07
    2300:	38 85       	ldd	r19, Y+8	; 0x08
    2302:	22 30       	cpi	r18, 0x02	; 2
    2304:	31 05       	cpc	r19, r1
    2306:	d1 f1       	breq	.+116    	; 0x237c <M_vEXTI_INT_Enable+0xe0>
    2308:	8f 81       	ldd	r24, Y+7	; 0x07
    230a:	98 85       	ldd	r25, Y+8	; 0x08
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	09 f0       	breq	.+2      	; 0x2312 <M_vEXTI_INT_Enable+0x76>
    2310:	51 c0       	rjmp	.+162    	; 0x23b4 <M_vEXTI_INT_Enable+0x118>
		{
			case EXTI_INT0: APPLY_MASK(EXTI_MCUCR_REG, EXTI_INT0_MCUCR_ISC_MASK);
    2312:	a5 e5       	ldi	r26, 0x55	; 85
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e5 e5       	ldi	r30, 0x55	; 85
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	8c 7f       	andi	r24, 0xFC	; 252
    231e:	8c 93       	st	X, r24
							SET_BITS(EXTI_MCUCR_REG, INT_Sense, EXTI_INT0_MCUCR_ISC_POS);
    2320:	a5 e5       	ldi	r26, 0x55	; 85
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e5 e5       	ldi	r30, 0x55	; 85
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	90 81       	ld	r25, Z
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	89 2b       	or	r24, r25
    232e:	8c 93       	st	X, r24
							SET_BIT(EXTI_GICR_REG, EXTI_INT0_GICR_POS);
    2330:	ab e5       	ldi	r26, 0x5B	; 91
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	eb e5       	ldi	r30, 0x5B	; 91
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	80 64       	ori	r24, 0x40	; 64
    233c:	8c 93       	st	X, r24
    233e:	3a c0       	rjmp	.+116    	; 0x23b4 <M_vEXTI_INT_Enable+0x118>
							break;

			case EXTI_INT1: APPLY_MASK(EXTI_MCUCR_REG, EXTI_INT1_MCUCR_ISC_MASK);
    2340:	a5 e5       	ldi	r26, 0x55	; 85
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e5 e5       	ldi	r30, 0x55	; 85
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	83 7f       	andi	r24, 0xF3	; 243
    234c:	8c 93       	st	X, r24
							SET_BITS(EXTI_MCUCR_REG, INT_Sense, EXTI_INT1_MCUCR_ISC_POS);
    234e:	a5 e5       	ldi	r26, 0x55	; 85
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e5 e5       	ldi	r30, 0x55	; 85
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	28 2f       	mov	r18, r24
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	88 2f       	mov	r24, r24
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	82 2b       	or	r24, r18
    236a:	8c 93       	st	X, r24
							SET_BIT(EXTI_GICR_REG, EXTI_INT1_GICR_POS);
    236c:	ab e5       	ldi	r26, 0x5B	; 91
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	eb e5       	ldi	r30, 0x5B	; 91
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	80 68       	ori	r24, 0x80	; 128
    2378:	8c 93       	st	X, r24
    237a:	1c c0       	rjmp	.+56     	; 0x23b4 <M_vEXTI_INT_Enable+0x118>
							break;

			case EXTI_INT2: if(INT_Sense == EXTI_Sense_Falling_Edge)
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	82 30       	cpi	r24, 0x02	; 2
    2380:	41 f4       	brne	.+16     	; 0x2392 <M_vEXTI_INT_Enable+0xf6>
							{
								CLR_BIT(EXTI_MCUCSR_REG, EXTI_INT2_MCUCSR_ISC_POS);
    2382:	a4 e5       	ldi	r26, 0x54	; 84
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e4 e5       	ldi	r30, 0x54	; 84
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	8f 7b       	andi	r24, 0xBF	; 191
    238e:	8c 93       	st	X, r24
    2390:	0a c0       	rjmp	.+20     	; 0x23a6 <M_vEXTI_INT_Enable+0x10a>
							}
							else if(INT_Sense == EXTI_Sense_Rising_Edge)
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	83 30       	cpi	r24, 0x03	; 3
    2396:	39 f4       	brne	.+14     	; 0x23a6 <M_vEXTI_INT_Enable+0x10a>
							{
								SET_BIT(EXTI_MCUCSR_REG, EXTI_INT2_MCUCSR_ISC_POS);
    2398:	a4 e5       	ldi	r26, 0x54	; 84
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e4 e5       	ldi	r30, 0x54	; 84
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	80 64       	ori	r24, 0x40	; 64
    23a4:	8c 93       	st	X, r24
							}
							SET_BIT(EXTI_GICR_REG, EXTI_INT2_GICR_POS);
    23a6:	ab e5       	ldi	r26, 0x5B	; 91
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	eb e5       	ldi	r30, 0x5B	; 91
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	80 62       	ori	r24, 0x20	; 32
    23b2:	8c 93       	st	X, r24
	//EXTI_Arr_Len = (sizeof(EXTI_Arr) / sizeof (EXTI_CONFIG_t));

	EXTI_ID  ID;
    EXTI_SenseType_t  INT_Sense;

	for (int i =0; i < EXTI_INT_ArrConfig_Size; i++ )
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	01 96       	adiw	r24, 0x01	; 1
    23ba:	9a 83       	std	Y+2, r25	; 0x02
    23bc:	89 83       	std	Y+1, r24	; 0x01
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	9a 81       	ldd	r25, Y+2	; 0x02
    23c2:	18 16       	cp	r1, r24
    23c4:	19 06       	cpc	r1, r25
    23c6:	0c f0       	brlt	.+2      	; 0x23ca <M_vEXTI_INT_Enable+0x12e>
    23c8:	78 cf       	rjmp	.-272    	; 0x22ba <M_vEXTI_INT_Enable+0x1e>

		}

	}

}
    23ca:	28 96       	adiw	r28, 0x08	; 8
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <M_vEXTI_INT_Disable>:


/*********************************************************/
/*********************************************************/
void M_vEXTI_INT_Disable(EXTI_CONFIG_t	EXTI_INT){
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <M_vEXTI_INT_Disable+0x6>
    23e2:	00 d0       	rcall	.+0      	; 0x23e4 <M_vEXTI_INT_Disable+0x8>
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <M_vEXTI_INT_Disable+0xa>
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	9c 83       	std	Y+4, r25	; 0x04
    23ec:	8b 83       	std	Y+3, r24	; 0x03

	EXTI_ID  ID = EXTI_INT.INT_ID;
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	8a 83       	std	Y+2, r24	; 0x02
    EXTI_SenseType_t  INT_Sense = EXTI_INT.INT_SENSE;
    23f2:	8c 81       	ldd	r24, Y+4	; 0x04
    23f4:	89 83       	std	Y+1, r24	; 0x01


		switch(ID)
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	3e 83       	std	Y+6, r19	; 0x06
    23fe:	2d 83       	std	Y+5, r18	; 0x05
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	81 30       	cpi	r24, 0x01	; 1
    2406:	91 05       	cpc	r25, r1
    2408:	89 f0       	breq	.+34     	; 0x242c <M_vEXTI_INT_Disable+0x50>
    240a:	2d 81       	ldd	r18, Y+5	; 0x05
    240c:	3e 81       	ldd	r19, Y+6	; 0x06
    240e:	22 30       	cpi	r18, 0x02	; 2
    2410:	31 05       	cpc	r19, r1
    2412:	a1 f0       	breq	.+40     	; 0x243c <M_vEXTI_INT_Disable+0x60>
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	b9 f4       	brne	.+46     	; 0x244a <M_vEXTI_INT_Disable+0x6e>
		{
			case EXTI_INT0:
							CLR_BIT(EXTI_GICR_REG, EXTI_INT0_GICR_POS);
    241c:	ab e5       	ldi	r26, 0x5B	; 91
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	eb e5       	ldi	r30, 0x5B	; 91
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	8f 7b       	andi	r24, 0xBF	; 191
    2428:	8c 93       	st	X, r24
    242a:	0f c0       	rjmp	.+30     	; 0x244a <M_vEXTI_INT_Disable+0x6e>
							break;

			case EXTI_INT1:

							CLR_BIT(EXTI_GICR_REG, EXTI_INT1_GICR_POS);
    242c:	ab e5       	ldi	r26, 0x5B	; 91
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	eb e5       	ldi	r30, 0x5B	; 91
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	8f 77       	andi	r24, 0x7F	; 127
    2438:	8c 93       	st	X, r24
    243a:	07 c0       	rjmp	.+14     	; 0x244a <M_vEXTI_INT_Disable+0x6e>
							break;

			case EXTI_INT2:

							CLR_BIT(EXTI_GICR_REG, EXTI_INT2_GICR_POS);
    243c:	ab e5       	ldi	r26, 0x5B	; 91
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	eb e5       	ldi	r30, 0x5B	; 91
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	8f 7d       	andi	r24, 0xDF	; 223
    2448:	8c 93       	st	X, r24
							break;

		}

	}
    244a:	26 96       	adiw	r28, 0x06	; 6
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <M_vEXTI_SetCallBack>:


/*********************************************************/
/*********************************************************/
void M_vEXTI_SetCallBack(void (*Ptrf)(void), EXTI_ID  ID)
{
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	00 d0       	rcall	.+0      	; 0x2462 <M_vEXTI_SetCallBack+0x6>
    2462:	0f 92       	push	r0
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	9a 83       	std	Y+2, r25	; 0x02
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	6b 83       	std	Y+3, r22	; 0x03

	if (Ptrf != NULL)
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	9a 81       	ldd	r25, Y+2	; 0x02
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	61 f0       	breq	.+24     	; 0x248e <M_vEXTI_SetCallBack+0x32>
	{
		CallBack_Arr[ID] = Ptrf;
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	88 2f       	mov	r24, r24
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	fc 01       	movw	r30, r24
    2482:	e3 54       	subi	r30, 0x43	; 67
    2484:	fb 4f       	sbci	r31, 0xFB	; 251
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	80 83       	st	Z, r24
	}
}
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <__vector_1>:


/*********************************************************/
/*********************************************************/
ISR(INT0_vect)
{
    249a:	1f 92       	push	r1
    249c:	0f 92       	push	r0
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	0f 92       	push	r0
    24a2:	11 24       	eor	r1, r1
    24a4:	2f 93       	push	r18
    24a6:	3f 93       	push	r19
    24a8:	4f 93       	push	r20
    24aa:	5f 93       	push	r21
    24ac:	6f 93       	push	r22
    24ae:	7f 93       	push	r23
    24b0:	8f 93       	push	r24
    24b2:	9f 93       	push	r25
    24b4:	af 93       	push	r26
    24b6:	bf 93       	push	r27
    24b8:	ef 93       	push	r30
    24ba:	ff 93       	push	r31
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
	if(CallBack_Arr[0] != NULL)
    24c4:	80 91 bd 04 	lds	r24, 0x04BD
    24c8:	90 91 be 04 	lds	r25, 0x04BE
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	29 f0       	breq	.+10     	; 0x24da <__vector_1+0x40>
	{
		CallBack_Arr[0]();
    24d0:	e0 91 bd 04 	lds	r30, 0x04BD
    24d4:	f0 91 be 04 	lds	r31, 0x04BE
    24d8:	09 95       	icall
	}
}
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	ff 91       	pop	r31
    24e0:	ef 91       	pop	r30
    24e2:	bf 91       	pop	r27
    24e4:	af 91       	pop	r26
    24e6:	9f 91       	pop	r25
    24e8:	8f 91       	pop	r24
    24ea:	7f 91       	pop	r23
    24ec:	6f 91       	pop	r22
    24ee:	5f 91       	pop	r21
    24f0:	4f 91       	pop	r20
    24f2:	3f 91       	pop	r19
    24f4:	2f 91       	pop	r18
    24f6:	0f 90       	pop	r0
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	0f 90       	pop	r0
    24fc:	1f 90       	pop	r1
    24fe:	18 95       	reti

00002500 <__vector_2>:


/*********************************************************/
/*********************************************************/
ISR(INT1_vect)
{
    2500:	1f 92       	push	r1
    2502:	0f 92       	push	r0
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	0f 92       	push	r0
    2508:	11 24       	eor	r1, r1
    250a:	2f 93       	push	r18
    250c:	3f 93       	push	r19
    250e:	4f 93       	push	r20
    2510:	5f 93       	push	r21
    2512:	6f 93       	push	r22
    2514:	7f 93       	push	r23
    2516:	8f 93       	push	r24
    2518:	9f 93       	push	r25
    251a:	af 93       	push	r26
    251c:	bf 93       	push	r27
    251e:	ef 93       	push	r30
    2520:	ff 93       	push	r31
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
	if(CallBack_Arr[1] != NULL)
    252a:	80 91 bf 04 	lds	r24, 0x04BF
    252e:	90 91 c0 04 	lds	r25, 0x04C0
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	29 f0       	breq	.+10     	; 0x2540 <__vector_2+0x40>
	{
		CallBack_Arr[1]();
    2536:	e0 91 bf 04 	lds	r30, 0x04BF
    253a:	f0 91 c0 04 	lds	r31, 0x04C0
    253e:	09 95       	icall
	}
}
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	ff 91       	pop	r31
    2546:	ef 91       	pop	r30
    2548:	bf 91       	pop	r27
    254a:	af 91       	pop	r26
    254c:	9f 91       	pop	r25
    254e:	8f 91       	pop	r24
    2550:	7f 91       	pop	r23
    2552:	6f 91       	pop	r22
    2554:	5f 91       	pop	r21
    2556:	4f 91       	pop	r20
    2558:	3f 91       	pop	r19
    255a:	2f 91       	pop	r18
    255c:	0f 90       	pop	r0
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	0f 90       	pop	r0
    2562:	1f 90       	pop	r1
    2564:	18 95       	reti

00002566 <__vector_3>:


/*********************************************************/
/*********************************************************/
ISR(INT2_vect)
{
    2566:	1f 92       	push	r1
    2568:	0f 92       	push	r0
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	0f 92       	push	r0
    256e:	11 24       	eor	r1, r1
    2570:	2f 93       	push	r18
    2572:	3f 93       	push	r19
    2574:	4f 93       	push	r20
    2576:	5f 93       	push	r21
    2578:	6f 93       	push	r22
    257a:	7f 93       	push	r23
    257c:	8f 93       	push	r24
    257e:	9f 93       	push	r25
    2580:	af 93       	push	r26
    2582:	bf 93       	push	r27
    2584:	ef 93       	push	r30
    2586:	ff 93       	push	r31
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
	if(CallBack_Arr[2] != NULL)
    2590:	80 91 c1 04 	lds	r24, 0x04C1
    2594:	90 91 c2 04 	lds	r25, 0x04C2
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	29 f0       	breq	.+10     	; 0x25a6 <__vector_3+0x40>
	{
		CallBack_Arr[2]();
    259c:	e0 91 c1 04 	lds	r30, 0x04C1
    25a0:	f0 91 c2 04 	lds	r31, 0x04C2
    25a4:	09 95       	icall
	}
}
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	ff 91       	pop	r31
    25ac:	ef 91       	pop	r30
    25ae:	bf 91       	pop	r27
    25b0:	af 91       	pop	r26
    25b2:	9f 91       	pop	r25
    25b4:	8f 91       	pop	r24
    25b6:	7f 91       	pop	r23
    25b8:	6f 91       	pop	r22
    25ba:	5f 91       	pop	r21
    25bc:	4f 91       	pop	r20
    25be:	3f 91       	pop	r19
    25c0:	2f 91       	pop	r18
    25c2:	0f 90       	pop	r0
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	0f 90       	pop	r0
    25c8:	1f 90       	pop	r1
    25ca:	18 95       	reti

000025cc <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <M_Dio_en_getPinValue+0x6>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <M_Dio_en_getPinValue+0x8>
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <M_Dio_en_getPinValue+0xa>
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    25dc:	8c 81       	ldd	r24, Y+4	; 0x04
    25de:	9a e0       	ldi	r25, 0x0A	; 10
    25e0:	69 2f       	mov	r22, r25
    25e2:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <__udivmodqi4>
    25e6:	89 2f       	mov	r24, r25
    25e8:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    25ea:	8c 81       	ldd	r24, Y+4	; 0x04
    25ec:	9a e0       	ldi	r25, 0x0A	; 10
    25ee:	69 2f       	mov	r22, r25
    25f0:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <__udivmodqi4>
    25f4:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	28 2f       	mov	r18, r24
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	3e 83       	std	Y+6, r19	; 0x06
    25fe:	2d 83       	std	Y+5, r18	; 0x05
    2600:	4d 81       	ldd	r20, Y+5	; 0x05
    2602:	5e 81       	ldd	r21, Y+6	; 0x06
    2604:	42 30       	cpi	r20, 0x02	; 2
    2606:	51 05       	cpc	r21, r1
    2608:	41 f1       	breq	.+80     	; 0x265a <M_Dio_en_getPinValue+0x8e>
    260a:	8d 81       	ldd	r24, Y+5	; 0x05
    260c:	9e 81       	ldd	r25, Y+6	; 0x06
    260e:	83 30       	cpi	r24, 0x03	; 3
    2610:	91 05       	cpc	r25, r1
    2612:	34 f4       	brge	.+12     	; 0x2620 <M_Dio_en_getPinValue+0x54>
    2614:	2d 81       	ldd	r18, Y+5	; 0x05
    2616:	3e 81       	ldd	r19, Y+6	; 0x06
    2618:	21 30       	cpi	r18, 0x01	; 1
    261a:	31 05       	cpc	r19, r1
    261c:	61 f0       	breq	.+24     	; 0x2636 <M_Dio_en_getPinValue+0x6a>
    261e:	52 c0       	rjmp	.+164    	; 0x26c4 <M_Dio_en_getPinValue+0xf8>
    2620:	4d 81       	ldd	r20, Y+5	; 0x05
    2622:	5e 81       	ldd	r21, Y+6	; 0x06
    2624:	43 30       	cpi	r20, 0x03	; 3
    2626:	51 05       	cpc	r21, r1
    2628:	51 f1       	breq	.+84     	; 0x267e <M_Dio_en_getPinValue+0xb2>
    262a:	8d 81       	ldd	r24, Y+5	; 0x05
    262c:	9e 81       	ldd	r25, Y+6	; 0x06
    262e:	84 30       	cpi	r24, 0x04	; 4
    2630:	91 05       	cpc	r25, r1
    2632:	b9 f1       	breq	.+110    	; 0x26a2 <M_Dio_en_getPinValue+0xd6>
    2634:	47 c0       	rjmp	.+142    	; 0x26c4 <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    2636:	e9 e3       	ldi	r30, 0x39	; 57
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	88 2f       	mov	r24, r24
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	a9 01       	movw	r20, r18
    2648:	02 c0       	rjmp	.+4      	; 0x264e <M_Dio_en_getPinValue+0x82>
    264a:	55 95       	asr	r21
    264c:	47 95       	ror	r20
    264e:	8a 95       	dec	r24
    2650:	e2 f7       	brpl	.-8      	; 0x264a <M_Dio_en_getPinValue+0x7e>
    2652:	ca 01       	movw	r24, r20
    2654:	81 70       	andi	r24, 0x01	; 1
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	35 c0       	rjmp	.+106    	; 0x26c4 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    265a:	e6 e3       	ldi	r30, 0x36	; 54
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	88 2f       	mov	r24, r24
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	a9 01       	movw	r20, r18
    266c:	02 c0       	rjmp	.+4      	; 0x2672 <M_Dio_en_getPinValue+0xa6>
    266e:	55 95       	asr	r21
    2670:	47 95       	ror	r20
    2672:	8a 95       	dec	r24
    2674:	e2 f7       	brpl	.-8      	; 0x266e <M_Dio_en_getPinValue+0xa2>
    2676:	ca 01       	movw	r24, r20
    2678:	81 70       	andi	r24, 0x01	; 1
    267a:	89 83       	std	Y+1, r24	; 0x01
    267c:	23 c0       	rjmp	.+70     	; 0x26c4 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    267e:	e3 e3       	ldi	r30, 0x33	; 51
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	88 2f       	mov	r24, r24
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	a9 01       	movw	r20, r18
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <M_Dio_en_getPinValue+0xca>
    2692:	55 95       	asr	r21
    2694:	47 95       	ror	r20
    2696:	8a 95       	dec	r24
    2698:	e2 f7       	brpl	.-8      	; 0x2692 <M_Dio_en_getPinValue+0xc6>
    269a:	ca 01       	movw	r24, r20
    269c:	81 70       	andi	r24, 0x01	; 1
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	11 c0       	rjmp	.+34     	; 0x26c4 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    26a2:	e0 e3       	ldi	r30, 0x30	; 48
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	88 2f       	mov	r24, r24
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	a9 01       	movw	r20, r18
    26b4:	02 c0       	rjmp	.+4      	; 0x26ba <M_Dio_en_getPinValue+0xee>
    26b6:	55 95       	asr	r21
    26b8:	47 95       	ror	r20
    26ba:	8a 95       	dec	r24
    26bc:	e2 f7       	brpl	.-8      	; 0x26b6 <M_Dio_en_getPinValue+0xea>
    26be:	ca 01       	movw	r24, r20
    26c0:	81 70       	andi	r24, 0x01	; 1
    26c2:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    26c6:	26 96       	adiw	r28, 0x06	; 6
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	28 97       	sbiw	r28, 0x08	; 8
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	8b 83       	std	Y+3, r24	; 0x03
    26ee:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    26f0:	8b 81       	ldd	r24, Y+3	; 0x03
    26f2:	9a e0       	ldi	r25, 0x0A	; 10
    26f4:	69 2f       	mov	r22, r25
    26f6:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <__udivmodqi4>
    26fa:	89 2f       	mov	r24, r25
    26fc:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	9a e0       	ldi	r25, 0x0A	; 10
    2702:	69 2f       	mov	r22, r25
    2704:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <__udivmodqi4>
    2708:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    270a:	8c 81       	ldd	r24, Y+4	; 0x04
    270c:	81 30       	cpi	r24, 0x01	; 1
    270e:	09 f0       	breq	.+2      	; 0x2712 <M_Dio_void_setPinValue+0x3a>
    2710:	70 c0       	rjmp	.+224    	; 0x27f2 <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	28 2f       	mov	r18, r24
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	38 87       	std	Y+8, r19	; 0x08
    271a:	2f 83       	std	Y+7, r18	; 0x07
    271c:	8f 81       	ldd	r24, Y+7	; 0x07
    271e:	98 85       	ldd	r25, Y+8	; 0x08
    2720:	82 30       	cpi	r24, 0x02	; 2
    2722:	91 05       	cpc	r25, r1
    2724:	51 f1       	breq	.+84     	; 0x277a <M_Dio_void_setPinValue+0xa2>
    2726:	2f 81       	ldd	r18, Y+7	; 0x07
    2728:	38 85       	ldd	r19, Y+8	; 0x08
    272a:	23 30       	cpi	r18, 0x03	; 3
    272c:	31 05       	cpc	r19, r1
    272e:	34 f4       	brge	.+12     	; 0x273c <M_Dio_void_setPinValue+0x64>
    2730:	8f 81       	ldd	r24, Y+7	; 0x07
    2732:	98 85       	ldd	r25, Y+8	; 0x08
    2734:	81 30       	cpi	r24, 0x01	; 1
    2736:	91 05       	cpc	r25, r1
    2738:	61 f0       	breq	.+24     	; 0x2752 <M_Dio_void_setPinValue+0x7a>
    273a:	d3 c0       	rjmp	.+422    	; 0x28e2 <M_Dio_void_setPinValue+0x20a>
    273c:	2f 81       	ldd	r18, Y+7	; 0x07
    273e:	38 85       	ldd	r19, Y+8	; 0x08
    2740:	23 30       	cpi	r18, 0x03	; 3
    2742:	31 05       	cpc	r19, r1
    2744:	71 f1       	breq	.+92     	; 0x27a2 <M_Dio_void_setPinValue+0xca>
    2746:	8f 81       	ldd	r24, Y+7	; 0x07
    2748:	98 85       	ldd	r25, Y+8	; 0x08
    274a:	84 30       	cpi	r24, 0x04	; 4
    274c:	91 05       	cpc	r25, r1
    274e:	e9 f1       	breq	.+122    	; 0x27ca <M_Dio_void_setPinValue+0xf2>
    2750:	c8 c0       	rjmp	.+400    	; 0x28e2 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    2752:	ab e3       	ldi	r26, 0x3B	; 59
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	eb e3       	ldi	r30, 0x3B	; 59
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	48 2f       	mov	r20, r24
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	02 2e       	mov	r0, r18
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <M_Dio_void_setPinValue+0x98>
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	0a 94       	dec	r0
    2772:	e2 f7       	brpl	.-8      	; 0x276c <M_Dio_void_setPinValue+0x94>
    2774:	84 2b       	or	r24, r20
    2776:	8c 93       	st	X, r24
    2778:	b4 c0       	rjmp	.+360    	; 0x28e2 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    277a:	a8 e3       	ldi	r26, 0x38	; 56
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e8 e3       	ldi	r30, 0x38	; 56
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	48 2f       	mov	r20, r24
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	28 2f       	mov	r18, r24
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	02 2e       	mov	r0, r18
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <M_Dio_void_setPinValue+0xc0>
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	0a 94       	dec	r0
    279a:	e2 f7       	brpl	.-8      	; 0x2794 <M_Dio_void_setPinValue+0xbc>
    279c:	84 2b       	or	r24, r20
    279e:	8c 93       	st	X, r24
    27a0:	a0 c0       	rjmp	.+320    	; 0x28e2 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    27a2:	a5 e3       	ldi	r26, 0x35	; 53
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e5 e3       	ldi	r30, 0x35	; 53
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	48 2f       	mov	r20, r24
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	02 2e       	mov	r0, r18
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <M_Dio_void_setPinValue+0xe8>
    27bc:	88 0f       	add	r24, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	0a 94       	dec	r0
    27c2:	e2 f7       	brpl	.-8      	; 0x27bc <M_Dio_void_setPinValue+0xe4>
    27c4:	84 2b       	or	r24, r20
    27c6:	8c 93       	st	X, r24
    27c8:	8c c0       	rjmp	.+280    	; 0x28e2 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    27ca:	a2 e3       	ldi	r26, 0x32	; 50
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	e2 e3       	ldi	r30, 0x32	; 50
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	48 2f       	mov	r20, r24
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	28 2f       	mov	r18, r24
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	02 2e       	mov	r0, r18
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <M_Dio_void_setPinValue+0x110>
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	0a 94       	dec	r0
    27ea:	e2 f7       	brpl	.-8      	; 0x27e4 <M_Dio_void_setPinValue+0x10c>
    27ec:	84 2b       	or	r24, r20
    27ee:	8c 93       	st	X, r24
    27f0:	78 c0       	rjmp	.+240    	; 0x28e2 <M_Dio_void_setPinValue+0x20a>
		}

	}
	else if (Level == DIO_LOW)
    27f2:	8c 81       	ldd	r24, Y+4	; 0x04
    27f4:	88 23       	and	r24, r24
    27f6:	09 f0       	breq	.+2      	; 0x27fa <M_Dio_void_setPinValue+0x122>
    27f8:	74 c0       	rjmp	.+232    	; 0x28e2 <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	28 2f       	mov	r18, r24
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	3e 83       	std	Y+6, r19	; 0x06
    2802:	2d 83       	std	Y+5, r18	; 0x05
    2804:	8d 81       	ldd	r24, Y+5	; 0x05
    2806:	9e 81       	ldd	r25, Y+6	; 0x06
    2808:	82 30       	cpi	r24, 0x02	; 2
    280a:	91 05       	cpc	r25, r1
    280c:	61 f1       	breq	.+88     	; 0x2866 <M_Dio_void_setPinValue+0x18e>
    280e:	2d 81       	ldd	r18, Y+5	; 0x05
    2810:	3e 81       	ldd	r19, Y+6	; 0x06
    2812:	23 30       	cpi	r18, 0x03	; 3
    2814:	31 05       	cpc	r19, r1
    2816:	34 f4       	brge	.+12     	; 0x2824 <M_Dio_void_setPinValue+0x14c>
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	81 30       	cpi	r24, 0x01	; 1
    281e:	91 05       	cpc	r25, r1
    2820:	69 f0       	breq	.+26     	; 0x283c <M_Dio_void_setPinValue+0x164>
    2822:	5f c0       	rjmp	.+190    	; 0x28e2 <M_Dio_void_setPinValue+0x20a>
    2824:	2d 81       	ldd	r18, Y+5	; 0x05
    2826:	3e 81       	ldd	r19, Y+6	; 0x06
    2828:	23 30       	cpi	r18, 0x03	; 3
    282a:	31 05       	cpc	r19, r1
    282c:	89 f1       	breq	.+98     	; 0x2890 <M_Dio_void_setPinValue+0x1b8>
    282e:	8d 81       	ldd	r24, Y+5	; 0x05
    2830:	9e 81       	ldd	r25, Y+6	; 0x06
    2832:	84 30       	cpi	r24, 0x04	; 4
    2834:	91 05       	cpc	r25, r1
    2836:	09 f4       	brne	.+2      	; 0x283a <M_Dio_void_setPinValue+0x162>
    2838:	40 c0       	rjmp	.+128    	; 0x28ba <M_Dio_void_setPinValue+0x1e2>
    283a:	53 c0       	rjmp	.+166    	; 0x28e2 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    283c:	ab e3       	ldi	r26, 0x3B	; 59
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	eb e3       	ldi	r30, 0x3B	; 59
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	48 2f       	mov	r20, r24
    2848:	8a 81       	ldd	r24, Y+2	; 0x02
    284a:	28 2f       	mov	r18, r24
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	02 2e       	mov	r0, r18
    2854:	02 c0       	rjmp	.+4      	; 0x285a <M_Dio_void_setPinValue+0x182>
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	0a 94       	dec	r0
    285c:	e2 f7       	brpl	.-8      	; 0x2856 <M_Dio_void_setPinValue+0x17e>
    285e:	80 95       	com	r24
    2860:	84 23       	and	r24, r20
    2862:	8c 93       	st	X, r24
    2864:	3e c0       	rjmp	.+124    	; 0x28e2 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    2866:	a8 e3       	ldi	r26, 0x38	; 56
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e8 e3       	ldi	r30, 0x38	; 56
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	48 2f       	mov	r20, r24
    2872:	8a 81       	ldd	r24, Y+2	; 0x02
    2874:	28 2f       	mov	r18, r24
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	02 2e       	mov	r0, r18
    287e:	02 c0       	rjmp	.+4      	; 0x2884 <M_Dio_void_setPinValue+0x1ac>
    2880:	88 0f       	add	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	0a 94       	dec	r0
    2886:	e2 f7       	brpl	.-8      	; 0x2880 <M_Dio_void_setPinValue+0x1a8>
    2888:	80 95       	com	r24
    288a:	84 23       	and	r24, r20
    288c:	8c 93       	st	X, r24
    288e:	29 c0       	rjmp	.+82     	; 0x28e2 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    2890:	a5 e3       	ldi	r26, 0x35	; 53
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	e5 e3       	ldi	r30, 0x35	; 53
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	48 2f       	mov	r20, r24
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	28 2f       	mov	r18, r24
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	02 2e       	mov	r0, r18
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <M_Dio_void_setPinValue+0x1d6>
    28aa:	88 0f       	add	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	0a 94       	dec	r0
    28b0:	e2 f7       	brpl	.-8      	; 0x28aa <M_Dio_void_setPinValue+0x1d2>
    28b2:	80 95       	com	r24
    28b4:	84 23       	and	r24, r20
    28b6:	8c 93       	st	X, r24
    28b8:	14 c0       	rjmp	.+40     	; 0x28e2 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    28ba:	a2 e3       	ldi	r26, 0x32	; 50
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	e2 e3       	ldi	r30, 0x32	; 50
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	48 2f       	mov	r20, r24
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	28 2f       	mov	r18, r24
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	02 2e       	mov	r0, r18
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <M_Dio_void_setPinValue+0x200>
    28d4:	88 0f       	add	r24, r24
    28d6:	99 1f       	adc	r25, r25
    28d8:	0a 94       	dec	r0
    28da:	e2 f7       	brpl	.-8      	; 0x28d4 <M_Dio_void_setPinValue+0x1fc>
    28dc:	80 95       	com	r24
    28de:	84 23       	and	r24, r20
    28e0:	8c 93       	st	X, r24
		}

	}

}
    28e2:	28 96       	adiw	r28, 0x08	; 8
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
    28ee:	cf 91       	pop	r28
    28f0:	df 91       	pop	r29
    28f2:	08 95       	ret

000028f4 <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	00 d0       	rcall	.+0      	; 0x28fa <M_Dio_en_getPortValue+0x6>
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <M_Dio_en_getPortValue+0x8>
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	28 2f       	mov	r18, r24
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	3c 83       	std	Y+4, r19	; 0x04
    290a:	2b 83       	std	Y+3, r18	; 0x03
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	82 30       	cpi	r24, 0x02	; 2
    2912:	91 05       	cpc	r25, r1
    2914:	d9 f0       	breq	.+54     	; 0x294c <M_Dio_en_getPortValue+0x58>
    2916:	2b 81       	ldd	r18, Y+3	; 0x03
    2918:	3c 81       	ldd	r19, Y+4	; 0x04
    291a:	23 30       	cpi	r18, 0x03	; 3
    291c:	31 05       	cpc	r19, r1
    291e:	34 f4       	brge	.+12     	; 0x292c <M_Dio_en_getPortValue+0x38>
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	9c 81       	ldd	r25, Y+4	; 0x04
    2924:	81 30       	cpi	r24, 0x01	; 1
    2926:	91 05       	cpc	r25, r1
    2928:	61 f0       	breq	.+24     	; 0x2942 <M_Dio_en_getPortValue+0x4e>
    292a:	1e c0       	rjmp	.+60     	; 0x2968 <M_Dio_en_getPortValue+0x74>
    292c:	2b 81       	ldd	r18, Y+3	; 0x03
    292e:	3c 81       	ldd	r19, Y+4	; 0x04
    2930:	23 30       	cpi	r18, 0x03	; 3
    2932:	31 05       	cpc	r19, r1
    2934:	81 f0       	breq	.+32     	; 0x2956 <M_Dio_en_getPortValue+0x62>
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	84 30       	cpi	r24, 0x04	; 4
    293c:	91 05       	cpc	r25, r1
    293e:	81 f0       	breq	.+32     	; 0x2960 <M_Dio_en_getPortValue+0x6c>
    2940:	13 c0       	rjmp	.+38     	; 0x2968 <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    2942:	eb e3       	ldi	r30, 0x3B	; 59
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	0e c0       	rjmp	.+28     	; 0x2968 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    294c:	e8 e3       	ldi	r30, 0x38	; 56
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	89 83       	std	Y+1, r24	; 0x01
    2954:	09 c0       	rjmp	.+18     	; 0x2968 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    2956:	e5 e3       	ldi	r30, 0x35	; 53
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	89 83       	std	Y+1, r24	; 0x01
    295e:	04 c0       	rjmp	.+8      	; 0x2968 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    2960:	e2 e3       	ldi	r30, 0x32	; 50
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    2968:	89 81       	ldd	r24, Y+1	; 0x01
}
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	08 95       	ret

00002978 <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	00 d0       	rcall	.+0      	; 0x297e <M_Dio_void_setPortValue+0x6>
    297e:	00 d0       	rcall	.+0      	; 0x2980 <M_Dio_void_setPortValue+0x8>
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
    2984:	89 83       	std	Y+1, r24	; 0x01
    2986:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	28 2f       	mov	r18, r24
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	3c 83       	std	Y+4, r19	; 0x04
    2990:	2b 83       	std	Y+3, r18	; 0x03
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	9c 81       	ldd	r25, Y+4	; 0x04
    2996:	82 30       	cpi	r24, 0x02	; 2
    2998:	91 05       	cpc	r25, r1
    299a:	d9 f0       	breq	.+54     	; 0x29d2 <M_Dio_void_setPortValue+0x5a>
    299c:	2b 81       	ldd	r18, Y+3	; 0x03
    299e:	3c 81       	ldd	r19, Y+4	; 0x04
    29a0:	23 30       	cpi	r18, 0x03	; 3
    29a2:	31 05       	cpc	r19, r1
    29a4:	34 f4       	brge	.+12     	; 0x29b2 <M_Dio_void_setPortValue+0x3a>
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	9c 81       	ldd	r25, Y+4	; 0x04
    29aa:	81 30       	cpi	r24, 0x01	; 1
    29ac:	91 05       	cpc	r25, r1
    29ae:	61 f0       	breq	.+24     	; 0x29c8 <M_Dio_void_setPortValue+0x50>
    29b0:	1e c0       	rjmp	.+60     	; 0x29ee <M_Dio_void_setPortValue+0x76>
    29b2:	2b 81       	ldd	r18, Y+3	; 0x03
    29b4:	3c 81       	ldd	r19, Y+4	; 0x04
    29b6:	23 30       	cpi	r18, 0x03	; 3
    29b8:	31 05       	cpc	r19, r1
    29ba:	81 f0       	breq	.+32     	; 0x29dc <M_Dio_void_setPortValue+0x64>
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	9c 81       	ldd	r25, Y+4	; 0x04
    29c0:	84 30       	cpi	r24, 0x04	; 4
    29c2:	91 05       	cpc	r25, r1
    29c4:	81 f0       	breq	.+32     	; 0x29e6 <M_Dio_void_setPortValue+0x6e>
    29c6:	13 c0       	rjmp	.+38     	; 0x29ee <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    29c8:	eb e3       	ldi	r30, 0x3B	; 59
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	80 83       	st	Z, r24
    29d0:	0e c0       	rjmp	.+28     	; 0x29ee <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    29d2:	e8 e3       	ldi	r30, 0x38	; 56
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	8a 81       	ldd	r24, Y+2	; 0x02
    29d8:	80 83       	st	Z, r24
    29da:	09 c0       	rjmp	.+18     	; 0x29ee <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    29dc:	e5 e3       	ldi	r30, 0x35	; 53
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	80 83       	st	Z, r24
    29e4:	04 c0       	rjmp	.+8      	; 0x29ee <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    29e6:	e2 e3       	ldi	r30, 0x32	; 50
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	8a 81       	ldd	r24, Y+2	; 0x02
    29ec:	80 83       	st	Z, r24
	}
}
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	0f 90       	pop	r0
    29f6:	cf 91       	pop	r28
    29f8:	df 91       	pop	r29
    29fa:	08 95       	ret

000029fc <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    29fc:	df 93       	push	r29
    29fe:	cf 93       	push	r28
    2a00:	00 d0       	rcall	.+0      	; 0x2a02 <M_Dio_void_togglePinValue+0x6>
    2a02:	00 d0       	rcall	.+0      	; 0x2a04 <M_Dio_void_togglePinValue+0x8>
    2a04:	0f 92       	push	r0
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	9a e0       	ldi	r25, 0x0A	; 10
    2a10:	69 2f       	mov	r22, r25
    2a12:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <__udivmodqi4>
    2a16:	89 2f       	mov	r24, r25
    2a18:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    2a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1c:	9a e0       	ldi	r25, 0x0A	; 10
    2a1e:	69 2f       	mov	r22, r25
    2a20:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <__udivmodqi4>
    2a24:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	28 2f       	mov	r18, r24
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	3d 83       	std	Y+5, r19	; 0x05
    2a2e:	2c 83       	std	Y+4, r18	; 0x04
    2a30:	8c 81       	ldd	r24, Y+4	; 0x04
    2a32:	9d 81       	ldd	r25, Y+5	; 0x05
    2a34:	82 30       	cpi	r24, 0x02	; 2
    2a36:	91 05       	cpc	r25, r1
    2a38:	51 f1       	breq	.+84     	; 0x2a8e <M_Dio_void_togglePinValue+0x92>
    2a3a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a3c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a3e:	23 30       	cpi	r18, 0x03	; 3
    2a40:	31 05       	cpc	r19, r1
    2a42:	34 f4       	brge	.+12     	; 0x2a50 <M_Dio_void_togglePinValue+0x54>
    2a44:	8c 81       	ldd	r24, Y+4	; 0x04
    2a46:	9d 81       	ldd	r25, Y+5	; 0x05
    2a48:	81 30       	cpi	r24, 0x01	; 1
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	61 f0       	breq	.+24     	; 0x2a66 <M_Dio_void_togglePinValue+0x6a>
    2a4e:	5a c0       	rjmp	.+180    	; 0x2b04 <M_Dio_void_togglePinValue+0x108>
    2a50:	2c 81       	ldd	r18, Y+4	; 0x04
    2a52:	3d 81       	ldd	r19, Y+5	; 0x05
    2a54:	23 30       	cpi	r18, 0x03	; 3
    2a56:	31 05       	cpc	r19, r1
    2a58:	71 f1       	breq	.+92     	; 0x2ab6 <M_Dio_void_togglePinValue+0xba>
    2a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a5e:	84 30       	cpi	r24, 0x04	; 4
    2a60:	91 05       	cpc	r25, r1
    2a62:	e9 f1       	breq	.+122    	; 0x2ade <M_Dio_void_togglePinValue+0xe2>
    2a64:	4f c0       	rjmp	.+158    	; 0x2b04 <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    2a66:	ab e3       	ldi	r26, 0x3B	; 59
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	eb e3       	ldi	r30, 0x3B	; 59
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	48 2f       	mov	r20, r24
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	28 2f       	mov	r18, r24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	02 2e       	mov	r0, r18
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <M_Dio_void_togglePinValue+0x88>
    2a80:	88 0f       	add	r24, r24
    2a82:	99 1f       	adc	r25, r25
    2a84:	0a 94       	dec	r0
    2a86:	e2 f7       	brpl	.-8      	; 0x2a80 <M_Dio_void_togglePinValue+0x84>
    2a88:	84 27       	eor	r24, r20
    2a8a:	8c 93       	st	X, r24
    2a8c:	3b c0       	rjmp	.+118    	; 0x2b04 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    2a8e:	a8 e3       	ldi	r26, 0x38	; 56
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	e8 e3       	ldi	r30, 0x38	; 56
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	48 2f       	mov	r20, r24
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	02 2e       	mov	r0, r18
    2aa6:	02 c0       	rjmp	.+4      	; 0x2aac <M_Dio_void_togglePinValue+0xb0>
    2aa8:	88 0f       	add	r24, r24
    2aaa:	99 1f       	adc	r25, r25
    2aac:	0a 94       	dec	r0
    2aae:	e2 f7       	brpl	.-8      	; 0x2aa8 <M_Dio_void_togglePinValue+0xac>
    2ab0:	84 27       	eor	r24, r20
    2ab2:	8c 93       	st	X, r24
    2ab4:	27 c0       	rjmp	.+78     	; 0x2b04 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    2ab6:	a5 e3       	ldi	r26, 0x35	; 53
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e5 e3       	ldi	r30, 0x35	; 53
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	48 2f       	mov	r20, r24
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	02 2e       	mov	r0, r18
    2ace:	02 c0       	rjmp	.+4      	; 0x2ad4 <M_Dio_void_togglePinValue+0xd8>
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	0a 94       	dec	r0
    2ad6:	e2 f7       	brpl	.-8      	; 0x2ad0 <M_Dio_void_togglePinValue+0xd4>
    2ad8:	84 27       	eor	r24, r20
    2ada:	8c 93       	st	X, r24
    2adc:	13 c0       	rjmp	.+38     	; 0x2b04 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    2ade:	a2 e3       	ldi	r26, 0x32	; 50
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	e2 e3       	ldi	r30, 0x32	; 50
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	48 2f       	mov	r20, r24
    2aea:	8a 81       	ldd	r24, Y+2	; 0x02
    2aec:	28 2f       	mov	r18, r24
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	02 2e       	mov	r0, r18
    2af6:	02 c0       	rjmp	.+4      	; 0x2afc <M_Dio_void_togglePinValue+0x100>
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	0a 94       	dec	r0
    2afe:	e2 f7       	brpl	.-8      	; 0x2af8 <M_Dio_void_togglePinValue+0xfc>
    2b00:	84 27       	eor	r24, r20
    2b02:	8c 93       	st	X, r24
	}

}
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	08 95       	ret

00002b14 <M_ADC_enu_init>:
#define Timeout		50000
ES_t (*ADCpfunAppFun)(void*) = NULL;
void * ADCpvidAppParameter = NULL;


ES_t M_ADC_enu_init(ADC_cfg_type copy_ADCcfg){
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    2b1c:	2e 97       	sbiw	r28, 0x0e	; 14
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	f8 94       	cli
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	cd bf       	out	0x3d, r28	; 61
    2b28:	2c 83       	std	Y+4, r18	; 0x04
    2b2a:	3d 83       	std	Y+5, r19	; 0x05
    2b2c:	4e 83       	std	Y+6, r20	; 0x06
    2b2e:	5f 83       	std	Y+7, r21	; 0x07
    2b30:	68 87       	std	Y+8, r22	; 0x08
    2b32:	79 87       	std	Y+9, r23	; 0x09
    2b34:	8a 87       	std	Y+10, r24	; 0x0a
	ES_t Local_enuErrorState=ES_OK;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	8b 83       	std	Y+3, r24	; 0x03
	/*prescaler*/
	ADC_PRES_TYPE ADC_PS = copy_ADCcfg.ADC_PRES;
    2b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b3c:	8a 83       	std	Y+2, r24	; 0x02
	switch(ADC_PS){
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	28 2f       	mov	r18, r24
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	3e 87       	std	Y+14, r19	; 0x0e
    2b46:	2d 87       	std	Y+13, r18	; 0x0d
    2b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b4c:	83 30       	cpi	r24, 0x03	; 3
    2b4e:	91 05       	cpc	r25, r1
    2b50:	09 f4       	brne	.+2      	; 0x2b54 <M_ADC_enu_init+0x40>
    2b52:	45 c0       	rjmp	.+138    	; 0x2bde <M_ADC_enu_init+0xca>
    2b54:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b56:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b58:	24 30       	cpi	r18, 0x04	; 4
    2b5a:	31 05       	cpc	r19, r1
    2b5c:	7c f4       	brge	.+30     	; 0x2b7c <M_ADC_enu_init+0x68>
    2b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b62:	81 30       	cpi	r24, 0x01	; 1
    2b64:	91 05       	cpc	r25, r1
    2b66:	49 f1       	breq	.+82     	; 0x2bba <M_ADC_enu_init+0xa6>
    2b68:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b6a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b6c:	22 30       	cpi	r18, 0x02	; 2
    2b6e:	31 05       	cpc	r19, r1
    2b70:	6c f5       	brge	.+90     	; 0x2bcc <M_ADC_enu_init+0xb8>
    2b72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	c1 f0       	breq	.+48     	; 0x2baa <M_ADC_enu_init+0x96>
    2b7a:	5d c0       	rjmp	.+186    	; 0x2c36 <M_ADC_enu_init+0x122>
    2b7c:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b7e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b80:	25 30       	cpi	r18, 0x05	; 5
    2b82:	31 05       	cpc	r19, r1
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <M_ADC_enu_init+0x74>
    2b86:	3d c0       	rjmp	.+122    	; 0x2c02 <M_ADC_enu_init+0xee>
    2b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8c:	85 30       	cpi	r24, 0x05	; 5
    2b8e:	91 05       	cpc	r25, r1
    2b90:	7c f1       	brlt	.+94     	; 0x2bf0 <M_ADC_enu_init+0xdc>
    2b92:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b94:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b96:	26 30       	cpi	r18, 0x06	; 6
    2b98:	31 05       	cpc	r19, r1
    2b9a:	e1 f1       	breq	.+120    	; 0x2c14 <M_ADC_enu_init+0x100>
    2b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba0:	87 30       	cpi	r24, 0x07	; 7
    2ba2:	91 05       	cpc	r25, r1
    2ba4:	09 f4       	brne	.+2      	; 0x2ba8 <M_ADC_enu_init+0x94>
    2ba6:	3f c0       	rjmp	.+126    	; 0x2c26 <M_ADC_enu_init+0x112>
    2ba8:	46 c0       	rjmp	.+140    	; 0x2c36 <M_ADC_enu_init+0x122>
	case PRES_1:
		PtrADCSRA->ADPS_BITS = 0;
    2baa:	e0 91 b6 03 	lds	r30, 0x03B6
    2bae:	f0 91 b7 03 	lds	r31, 0x03B7
    2bb2:	80 81       	ld	r24, Z
    2bb4:	88 7f       	andi	r24, 0xF8	; 248
    2bb6:	80 83       	st	Z, r24
    2bb8:	40 c0       	rjmp	.+128    	; 0x2c3a <M_ADC_enu_init+0x126>
		break;
	case PRES_2:
		PtrADCSRA->ADPS_BITS =1;
    2bba:	e0 91 b6 03 	lds	r30, 0x03B6
    2bbe:	f0 91 b7 03 	lds	r31, 0x03B7
    2bc2:	80 81       	ld	r24, Z
    2bc4:	88 7f       	andi	r24, 0xF8	; 248
    2bc6:	81 60       	ori	r24, 0x01	; 1
    2bc8:	80 83       	st	Z, r24
    2bca:	37 c0       	rjmp	.+110    	; 0x2c3a <M_ADC_enu_init+0x126>
		break;
	case PRES_4 :
		PtrADCSRA->ADPS_BITS = 2;
    2bcc:	e0 91 b6 03 	lds	r30, 0x03B6
    2bd0:	f0 91 b7 03 	lds	r31, 0x03B7
    2bd4:	80 81       	ld	r24, Z
    2bd6:	88 7f       	andi	r24, 0xF8	; 248
    2bd8:	82 60       	ori	r24, 0x02	; 2
    2bda:	80 83       	st	Z, r24
    2bdc:	2e c0       	rjmp	.+92     	; 0x2c3a <M_ADC_enu_init+0x126>
		break;
	case PRES_8:
		PtrADCSRA->ADPS_BITS = 3;
    2bde:	e0 91 b6 03 	lds	r30, 0x03B6
    2be2:	f0 91 b7 03 	lds	r31, 0x03B7
    2be6:	80 81       	ld	r24, Z
    2be8:	88 7f       	andi	r24, 0xF8	; 248
    2bea:	83 60       	ori	r24, 0x03	; 3
    2bec:	80 83       	st	Z, r24
    2bee:	25 c0       	rjmp	.+74     	; 0x2c3a <M_ADC_enu_init+0x126>
		break;
	case PRES_16:
		PtrADCSRA->ADPS_BITS =4;
    2bf0:	e0 91 b6 03 	lds	r30, 0x03B6
    2bf4:	f0 91 b7 03 	lds	r31, 0x03B7
    2bf8:	80 81       	ld	r24, Z
    2bfa:	88 7f       	andi	r24, 0xF8	; 248
    2bfc:	84 60       	ori	r24, 0x04	; 4
    2bfe:	80 83       	st	Z, r24
    2c00:	1c c0       	rjmp	.+56     	; 0x2c3a <M_ADC_enu_init+0x126>
		break;
	case PRES_32:
		PtrADCSRA->ADPS_BITS = 5;
    2c02:	e0 91 b6 03 	lds	r30, 0x03B6
    2c06:	f0 91 b7 03 	lds	r31, 0x03B7
    2c0a:	80 81       	ld	r24, Z
    2c0c:	88 7f       	andi	r24, 0xF8	; 248
    2c0e:	85 60       	ori	r24, 0x05	; 5
    2c10:	80 83       	st	Z, r24
    2c12:	13 c0       	rjmp	.+38     	; 0x2c3a <M_ADC_enu_init+0x126>
		break;
	case PRES_64:
		PtrADCSRA->ADPS_BITS =6;
    2c14:	e0 91 b6 03 	lds	r30, 0x03B6
    2c18:	f0 91 b7 03 	lds	r31, 0x03B7
    2c1c:	80 81       	ld	r24, Z
    2c1e:	88 7f       	andi	r24, 0xF8	; 248
    2c20:	86 60       	ori	r24, 0x06	; 6
    2c22:	80 83       	st	Z, r24
    2c24:	0a c0       	rjmp	.+20     	; 0x2c3a <M_ADC_enu_init+0x126>
		break;
	case PRES_128:
		PtrADCSRA->ADPS_BITS = 7;
    2c26:	e0 91 b6 03 	lds	r30, 0x03B6
    2c2a:	f0 91 b7 03 	lds	r31, 0x03B7
    2c2e:	80 81       	ld	r24, Z
    2c30:	87 60       	ori	r24, 0x07	; 7
    2c32:	80 83       	st	Z, r24
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <M_ADC_enu_init+0x126>
		break;
	default:
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2c36:	82 e0       	ldi	r24, 0x02	; 2
    2c38:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	/*channel selection*/
	if(copy_ADCcfg.INIT_CHNL<=31 && copy_ADCcfg.INIT_CHNL>=0){
    2c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3c:	80 32       	cpi	r24, 0x20	; 32
    2c3e:	78 f4       	brcc	.+30     	; 0x2c5e <M_ADC_enu_init+0x14a>
		PtrADMUX->MUX_BITS = copy_ADCcfg.INIT_CHNL;
    2c40:	e0 91 b4 03 	lds	r30, 0x03B4
    2c44:	f0 91 b5 03 	lds	r31, 0x03B5
    2c48:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4a:	8f 71       	andi	r24, 0x1F	; 31
    2c4c:	98 2f       	mov	r25, r24
    2c4e:	9f 71       	andi	r25, 0x1F	; 31
    2c50:	80 81       	ld	r24, Z
    2c52:	80 7e       	andi	r24, 0xE0	; 224
    2c54:	89 2b       	or	r24, r25
    2c56:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	8b 83       	std	Y+3, r24	; 0x03
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <M_ADC_enu_init+0x14e>
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	8b 83       	std	Y+3, r24	; 0x03
	}
	/*auto trigger*/
	ADC_MODE_TYPE ADC_MODE= copy_ADCcfg.INIT_MODE;
    2c62:	8e 81       	ldd	r24, Y+6	; 0x06
    2c64:	89 83       	std	Y+1, r24	; 0x01
	switch (ADC_MODE) {
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	3c 87       	std	Y+12, r19	; 0x0c
    2c6e:	2b 87       	std	Y+11, r18	; 0x0b
    2c70:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c72:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	31 f0       	breq	.+12     	; 0x2c84 <M_ADC_enu_init+0x170>
    2c78:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c7a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c7c:	21 30       	cpi	r18, 0x01	; 1
    2c7e:	31 05       	cpc	r19, r1
    2c80:	49 f0       	breq	.+18     	; 0x2c94 <M_ADC_enu_init+0x180>
    2c82:	10 c0       	rjmp	.+32     	; 0x2ca4 <M_ADC_enu_init+0x190>
		case SINGLE_CONV:
			PtrADCSRA->ADATE_BITS=0;
    2c84:	e0 91 b6 03 	lds	r30, 0x03B6
    2c88:	f0 91 b7 03 	lds	r31, 0x03B7
    2c8c:	80 81       	ld	r24, Z
    2c8e:	8f 7d       	andi	r24, 0xDF	; 223
    2c90:	80 83       	st	Z, r24
    2c92:	0a c0       	rjmp	.+20     	; 0x2ca8 <M_ADC_enu_init+0x194>
			break;
		case AUTOTRIGGERED:
			PtrADCSRA->ADATE_BITS=1;
    2c94:	e0 91 b6 03 	lds	r30, 0x03B6
    2c98:	f0 91 b7 03 	lds	r31, 0x03B7
    2c9c:	80 81       	ld	r24, Z
    2c9e:	80 62       	ori	r24, 0x20	; 32
    2ca0:	80 83       	st	Z, r24
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <M_ADC_enu_init+0x194>
			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANGE;
    2ca4:	82 e0       	ldi	r24, 0x02	; 2
    2ca6:	8b 83       	std	Y+3, r24	; 0x03
			break;
	}

	/*auto trigger source*/
	if(copy_ADCcfg.INIT_TRIG_SRC == FREE_RUNINNG ||copy_ADCcfg.INIT_TRIG_SRC ==EXT0 || copy_ADCcfg.INIT_TRIG_SRC ==TIM0_OVF){
    2ca8:	88 85       	ldd	r24, Y+8	; 0x08
    2caa:	88 23       	and	r24, r24
    2cac:	31 f0       	breq	.+12     	; 0x2cba <M_ADC_enu_init+0x1a6>
    2cae:	88 85       	ldd	r24, Y+8	; 0x08
    2cb0:	82 30       	cpi	r24, 0x02	; 2
    2cb2:	19 f0       	breq	.+6      	; 0x2cba <M_ADC_enu_init+0x1a6>
    2cb4:	88 85       	ldd	r24, Y+8	; 0x08
    2cb6:	84 30       	cpi	r24, 0x04	; 4
    2cb8:	79 f4       	brne	.+30     	; 0x2cd8 <M_ADC_enu_init+0x1c4>
		PtrSFIOR->ADTS_BITS = copy_ADCcfg.INIT_TRIG_SRC;
    2cba:	e0 91 b8 03 	lds	r30, 0x03B8
    2cbe:	f0 91 b9 03 	lds	r31, 0x03B9
    2cc2:	88 85       	ldd	r24, Y+8	; 0x08
    2cc4:	87 70       	andi	r24, 0x07	; 7
    2cc6:	98 2f       	mov	r25, r24
    2cc8:	92 95       	swap	r25
    2cca:	99 0f       	add	r25, r25
    2ccc:	90 7e       	andi	r25, 0xE0	; 224
    2cce:	80 81       	ld	r24, Z
    2cd0:	8f 71       	andi	r24, 0x1F	; 31
    2cd2:	89 2b       	or	r24, r25
    2cd4:	80 83       	st	Z, r24
    2cd6:	02 c0       	rjmp	.+4      	; 0x2cdc <M_ADC_enu_init+0x1c8>
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	8b 83       	std	Y+3, r24	; 0x03
	}
	/*conversion complete interrupt*/
	if(copy_ADCcfg.INIT_INT_MODE==POLLING || copy_ADCcfg.INIT_INT_MODE== ENABLED){
    2cdc:	8f 81       	ldd	r24, Y+7	; 0x07
    2cde:	88 23       	and	r24, r24
    2ce0:	19 f0       	breq	.+6      	; 0x2ce8 <M_ADC_enu_init+0x1d4>
    2ce2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ce4:	81 30       	cpi	r24, 0x01	; 1
    2ce6:	81 f4       	brne	.+32     	; 0x2d08 <M_ADC_enu_init+0x1f4>

		PtrADCSRA->ADIE_BITS=copy_ADCcfg.INIT_INT_MODE;
    2ce8:	e0 91 b6 03 	lds	r30, 0x03B6
    2cec:	f0 91 b7 03 	lds	r31, 0x03B7
    2cf0:	8f 81       	ldd	r24, Y+7	; 0x07
    2cf2:	81 70       	andi	r24, 0x01	; 1
    2cf4:	81 70       	andi	r24, 0x01	; 1
    2cf6:	98 2f       	mov	r25, r24
    2cf8:	99 0f       	add	r25, r25
    2cfa:	99 0f       	add	r25, r25
    2cfc:	99 0f       	add	r25, r25
    2cfe:	80 81       	ld	r24, Z
    2d00:	87 7f       	andi	r24, 0xF7	; 247
    2d02:	89 2b       	or	r24, r25
    2d04:	80 83       	st	Z, r24
    2d06:	01 c0       	rjmp	.+2      	; 0x2d0a <M_ADC_enu_init+0x1f6>
	}
	else{
		Local_enuErrorState = ES_NOK;
    2d08:	1b 82       	std	Y+3, r1	; 0x03
	}
	/*Vref*/
	if(copy_ADCcfg.ADC_VREF==AREF_REF || copy_ADCcfg.ADC_VREF==AVCC_REF || copy_ADCcfg.ADC_VREF==INTERNAL_REF){
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	88 23       	and	r24, r24
    2d0e:	31 f0       	breq	.+12     	; 0x2d1c <M_ADC_enu_init+0x208>
    2d10:	89 85       	ldd	r24, Y+9	; 0x09
    2d12:	81 30       	cpi	r24, 0x01	; 1
    2d14:	19 f0       	breq	.+6      	; 0x2d1c <M_ADC_enu_init+0x208>
    2d16:	89 85       	ldd	r24, Y+9	; 0x09
    2d18:	83 30       	cpi	r24, 0x03	; 3
    2d1a:	81 f4       	brne	.+32     	; 0x2d3c <M_ADC_enu_init+0x228>
		PtrADMUX->REFS_BITS=copy_ADCcfg.ADC_VREF;
    2d1c:	e0 91 b4 03 	lds	r30, 0x03B4
    2d20:	f0 91 b5 03 	lds	r31, 0x03B5
    2d24:	89 85       	ldd	r24, Y+9	; 0x09
    2d26:	83 70       	andi	r24, 0x03	; 3
    2d28:	98 2f       	mov	r25, r24
    2d2a:	92 95       	swap	r25
    2d2c:	99 0f       	add	r25, r25
    2d2e:	99 0f       	add	r25, r25
    2d30:	90 7c       	andi	r25, 0xC0	; 192
    2d32:	80 81       	ld	r24, Z
    2d34:	8f 73       	andi	r24, 0x3F	; 63
    2d36:	89 2b       	or	r24, r25
    2d38:	80 83       	st	Z, r24
    2d3a:	01 c0       	rjmp	.+2      	; 0x2d3e <M_ADC_enu_init+0x22a>
	}
	else{
		Local_enuErrorState = ES_NOK;
    2d3c:	1b 82       	std	Y+3, r1	; 0x03
	}
	/*data adjustment*/
	if(copy_ADCcfg.ADC_ADJ == LEFT_ADJ || copy_ADCcfg.ADC_ADJ == RIGHT_ADJ){
    2d3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d40:	81 30       	cpi	r24, 0x01	; 1
    2d42:	19 f0       	breq	.+6      	; 0x2d4a <M_ADC_enu_init+0x236>
    2d44:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d46:	88 23       	and	r24, r24
    2d48:	81 f4       	brne	.+32     	; 0x2d6a <M_ADC_enu_init+0x256>
		PtrADMUX->ADLAR_BITS = copy_ADCcfg.ADC_ADJ;
    2d4a:	e0 91 b4 03 	lds	r30, 0x03B4
    2d4e:	f0 91 b5 03 	lds	r31, 0x03B5
    2d52:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d54:	81 70       	andi	r24, 0x01	; 1
    2d56:	81 70       	andi	r24, 0x01	; 1
    2d58:	98 2f       	mov	r25, r24
    2d5a:	92 95       	swap	r25
    2d5c:	99 0f       	add	r25, r25
    2d5e:	90 7e       	andi	r25, 0xE0	; 224
    2d60:	80 81       	ld	r24, Z
    2d62:	8f 7d       	andi	r24, 0xDF	; 223
    2d64:	89 2b       	or	r24, r25
    2d66:	80 83       	st	Z, r24
    2d68:	01 c0       	rjmp	.+2      	; 0x2d6c <M_ADC_enu_init+0x258>
	}
	else{
		Local_enuErrorState = ES_NOK;
    2d6a:	1b 82       	std	Y+3, r1	; 0x03
	}
	/*enable ADC*/
	PtrADCSRA->ADEN_BITS =1;
    2d6c:	e0 91 b6 03 	lds	r30, 0x03B6
    2d70:	f0 91 b7 03 	lds	r31, 0x03B7
    2d74:	80 81       	ld	r24, Z
    2d76:	80 68       	ori	r24, 0x80	; 128
    2d78:	80 83       	st	Z, r24

	return Local_enuErrorState;
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2d7c:	2e 96       	adiw	r28, 0x0e	; 14
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	cf 91       	pop	r28
    2d8a:	df 91       	pop	r29
    2d8c:	08 95       	ret

00002d8e <M_ADC_enu_getDigitalValueSynchNonBlocking>:

ES_t M_ADC_enu_getDigitalValueSynchNonBlocking(ADC_cfg_type* copy_ADCcfg, u16* voltage){
    2d8e:	df 93       	push	r29
    2d90:	cf 93       	push	r28
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	2c 97       	sbiw	r28, 0x0c	; 12
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	de bf       	out	0x3e, r29	; 62
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	cd bf       	out	0x3d, r28	; 61
    2da2:	99 87       	std	Y+9, r25	; 0x09
    2da4:	88 87       	std	Y+8, r24	; 0x08
    2da6:	7b 87       	std	Y+11, r23	; 0x0b
    2da8:	6a 87       	std	Y+10, r22	; 0x0a
	ES_t Local_enuErroState = ES_OK;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	8f 83       	std	Y+7, r24	; 0x07
	u16 digital_data=0;
    2dae:	1e 82       	std	Y+6, r1	; 0x06
    2db0:	1d 82       	std	Y+5, r1	; 0x05
	u32 timer =0;
    2db2:	19 82       	std	Y+1, r1	; 0x01
    2db4:	1a 82       	std	Y+2, r1	; 0x02
    2db6:	1b 82       	std	Y+3, r1	; 0x03
    2db8:	1c 82       	std	Y+4, r1	; 0x04
	/*start conversion*/
	M_ADC_enu_startConversion();
    2dba:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <M_ADC_enu_startConversion>
		/*poling on ADIF*/
	while(!PtrADCSRA->ADIF_BITS && timer++<Timeout){}
    2dbe:	e0 91 b6 03 	lds	r30, 0x03B6
    2dc2:	f0 91 b7 03 	lds	r31, 0x03B7
    2dc6:	80 81       	ld	r24, Z
    2dc8:	80 71       	andi	r24, 0x10	; 16
    2dca:	88 23       	and	r24, r24
    2dcc:	e9 f4       	brne	.+58     	; 0x2e08 <M_ADC_enu_getDigitalValueSynchNonBlocking+0x7a>
    2dce:	1c 86       	std	Y+12, r1	; 0x0c
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd4:	ab 81       	ldd	r26, Y+3	; 0x03
    2dd6:	bc 81       	ldd	r27, Y+4	; 0x04
    2dd8:	80 35       	cpi	r24, 0x50	; 80
    2dda:	23 ec       	ldi	r18, 0xC3	; 195
    2ddc:	92 07       	cpc	r25, r18
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	a2 07       	cpc	r26, r18
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	b2 07       	cpc	r27, r18
    2de6:	10 f4       	brcc	.+4      	; 0x2dec <M_ADC_enu_getDigitalValueSynchNonBlocking+0x5e>
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	8c 87       	std	Y+12, r24	; 0x0c
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	9a 81       	ldd	r25, Y+2	; 0x02
    2df0:	ab 81       	ldd	r26, Y+3	; 0x03
    2df2:	bc 81       	ldd	r27, Y+4	; 0x04
    2df4:	01 96       	adiw	r24, 0x01	; 1
    2df6:	a1 1d       	adc	r26, r1
    2df8:	b1 1d       	adc	r27, r1
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	9a 83       	std	Y+2, r25	; 0x02
    2dfe:	ab 83       	std	Y+3, r26	; 0x03
    2e00:	bc 83       	std	Y+4, r27	; 0x04
    2e02:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e04:	22 23       	and	r18, r18
    2e06:	d9 f6       	brne	.-74     	; 0x2dbe <M_ADC_enu_getDigitalValueSynchNonBlocking+0x30>
		/*read the result*/
		if(voltage != NULL){
    2e08:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e0c:	00 97       	sbiw	r24, 0x00	; 0
    2e0e:	09 f4       	brne	.+2      	; 0x2e12 <M_ADC_enu_getDigitalValueSynchNonBlocking+0x84>
    2e10:	3f c0       	rjmp	.+126    	; 0x2e90 <M_ADC_enu_getDigitalValueSynchNonBlocking+0x102>
			if(!copy_ADCcfg->ADC_ADJ){
    2e12:	e8 85       	ldd	r30, Y+8	; 0x08
    2e14:	f9 85       	ldd	r31, Y+9	; 0x09
    2e16:	86 81       	ldd	r24, Z+6	; 0x06
    2e18:	88 23       	and	r24, r24
    2e1a:	b1 f4       	brne	.+44     	; 0x2e48 <M_ADC_enu_getDigitalValueSynchNonBlocking+0xba>
				digital_data = ADCL_reg;
    2e1c:	e4 e2       	ldi	r30, 0x24	; 36
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	88 2f       	mov	r24, r24
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	9e 83       	std	Y+6, r25	; 0x06
    2e28:	8d 83       	std	Y+5, r24	; 0x05
				digital_data |= (ADCH_reg<<8);
    2e2a:	e5 e2       	ldi	r30, 0x25	; 37
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	88 2f       	mov	r24, r24
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	98 2f       	mov	r25, r24
    2e36:	88 27       	eor	r24, r24
    2e38:	9c 01       	movw	r18, r24
    2e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3e:	82 2b       	or	r24, r18
    2e40:	93 2b       	or	r25, r19
    2e42:	9e 83       	std	Y+6, r25	; 0x06
    2e44:	8d 83       	std	Y+5, r24	; 0x05
    2e46:	26 c0       	rjmp	.+76     	; 0x2e94 <M_ADC_enu_getDigitalValueSynchNonBlocking+0x106>
			}
			else if(copy_ADCcfg->ADC_ADJ){
    2e48:	e8 85       	ldd	r30, Y+8	; 0x08
    2e4a:	f9 85       	ldd	r31, Y+9	; 0x09
    2e4c:	86 81       	ldd	r24, Z+6	; 0x06
    2e4e:	88 23       	and	r24, r24
    2e50:	e1 f0       	breq	.+56     	; 0x2e8a <M_ADC_enu_getDigitalValueSynchNonBlocking+0xfc>
				digital_data = (ADCL_reg>>6);
    2e52:	e4 e2       	ldi	r30, 0x24	; 36
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	82 95       	swap	r24
    2e5a:	86 95       	lsr	r24
    2e5c:	86 95       	lsr	r24
    2e5e:	83 70       	andi	r24, 0x03	; 3
    2e60:	88 2f       	mov	r24, r24
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	9e 83       	std	Y+6, r25	; 0x06
    2e66:	8d 83       	std	Y+5, r24	; 0x05
				digital_data |= (ADCH_reg<<2);
    2e68:	e5 e2       	ldi	r30, 0x25	; 37
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	80 81       	ld	r24, Z
    2e6e:	88 2f       	mov	r24, r24
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	88 0f       	add	r24, r24
    2e74:	99 1f       	adc	r25, r25
    2e76:	88 0f       	add	r24, r24
    2e78:	99 1f       	adc	r25, r25
    2e7a:	9c 01       	movw	r18, r24
    2e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e80:	82 2b       	or	r24, r18
    2e82:	93 2b       	or	r25, r19
    2e84:	9e 83       	std	Y+6, r25	; 0x06
    2e86:	8d 83       	std	Y+5, r24	; 0x05
    2e88:	05 c0       	rjmp	.+10     	; 0x2e94 <M_ADC_enu_getDigitalValueSynchNonBlocking+0x106>
			}
			else{
				Local_enuErroState = ES_OUT_OF_RANGE;
    2e8a:	82 e0       	ldi	r24, 0x02	; 2
    2e8c:	8f 83       	std	Y+7, r24	; 0x07
    2e8e:	02 c0       	rjmp	.+4      	; 0x2e94 <M_ADC_enu_getDigitalValueSynchNonBlocking+0x106>
			}
		}
		else {
			Local_enuErroState = ES_NULL_POINTER;
    2e90:	83 e0       	ldi	r24, 0x03	; 3
    2e92:	8f 83       	std	Y+7, r24	; 0x07
		}
		/*convert digital value to voltage*/
		*voltage = digital_data;/*5.00/1024.00;*/
    2e94:	ea 85       	ldd	r30, Y+10	; 0x0a
    2e96:	fb 85       	ldd	r31, Y+11	; 0x0b
    2e98:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	80 83       	st	Z, r24
		/*clear ADIF*/
		PtrADCSRA-> ADIF_BITS = 1;
    2ea0:	e0 91 b6 03 	lds	r30, 0x03B6
    2ea4:	f0 91 b7 03 	lds	r31, 0x03B7
    2ea8:	80 81       	ld	r24, Z
    2eaa:	80 61       	ori	r24, 0x10	; 16
    2eac:	80 83       	st	Z, r24

	return Local_enuErroState;
    2eae:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2eb0:	2c 96       	adiw	r28, 0x0c	; 12
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	de bf       	out	0x3e, r29	; 62
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	08 95       	ret

00002ec2 <M_ADC_enu_startConversion>:

ES_t M_ADC_enu_startConversion(){
    2ec2:	df 93       	push	r29
    2ec4:	cf 93       	push	r28
    2ec6:	0f 92       	push	r0
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	89 83       	std	Y+1, r24	; 0x01
	PtrADCSRA->ADSC_BITS =1;
    2ed0:	e0 91 b6 03 	lds	r30, 0x03B6
    2ed4:	f0 91 b7 03 	lds	r31, 0x03B7
    2ed8:	80 81       	ld	r24, Z
    2eda:	80 64       	ori	r24, 0x40	; 64
    2edc:	80 83       	st	Z, r24
	return Local_enuErrorState;
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee0:	0f 90       	pop	r0
    2ee2:	cf 91       	pop	r28
    2ee4:	df 91       	pop	r29
    2ee6:	08 95       	ret

00002ee8 <M_ADC_enu_getDigitalValueAsynchCallBack>:


ES_t M_ADC_enu_getDigitalValueAsynchCallBack( float* voltage){
    2ee8:	df 93       	push	r29
    2eea:	cf 93       	push	r28
    2eec:	00 d0       	rcall	.+0      	; 0x2eee <M_ADC_enu_getDigitalValueAsynchCallBack+0x6>
    2eee:	00 d0       	rcall	.+0      	; 0x2ef0 <M_ADC_enu_getDigitalValueAsynchCallBack+0x8>
    2ef0:	0f 92       	push	r0
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
    2ef6:	9d 83       	std	Y+5, r25	; 0x05
    2ef8:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErroState = ES_OK;
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	8b 83       	std	Y+3, r24	; 0x03
	u16 digital_data=0;
    2efe:	1a 82       	std	Y+2, r1	; 0x02
    2f00:	19 82       	std	Y+1, r1	; 0x01
	/*start conversion
	M_ADC_enu_startConversion();*/
	/*read the result*/
	if(voltage != NULL){
    2f02:	8c 81       	ldd	r24, Y+4	; 0x04
    2f04:	9d 81       	ldd	r25, Y+5	; 0x05
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	09 f4       	brne	.+2      	; 0x2f0c <M_ADC_enu_getDigitalValueAsynchCallBack+0x24>
    2f0a:	88 c0       	rjmp	.+272    	; 0x301c <M_ADC_enu_getDigitalValueAsynchCallBack+0x134>
		if(!PtrADMUX->ADLAR_BITS){
    2f0c:	e0 91 b4 03 	lds	r30, 0x03B4
    2f10:	f0 91 b5 03 	lds	r31, 0x03B5
    2f14:	80 81       	ld	r24, Z
    2f16:	80 72       	andi	r24, 0x20	; 32
    2f18:	88 23       	and	r24, r24
    2f1a:	b1 f4       	brne	.+44     	; 0x2f48 <M_ADC_enu_getDigitalValueAsynchCallBack+0x60>
			digital_data = ADCL_reg;
    2f1c:	e4 e2       	ldi	r30, 0x24	; 36
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	88 2f       	mov	r24, r24
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	9a 83       	std	Y+2, r25	; 0x02
    2f28:	89 83       	std	Y+1, r24	; 0x01
			digital_data |= (ADCH_reg<<8);
    2f2a:	e5 e2       	ldi	r30, 0x25	; 37
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	88 2f       	mov	r24, r24
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	98 2f       	mov	r25, r24
    2f36:	88 27       	eor	r24, r24
    2f38:	9c 01       	movw	r18, r24
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3e:	82 2b       	or	r24, r18
    2f40:	93 2b       	or	r25, r19
    2f42:	9a 83       	std	Y+2, r25	; 0x02
    2f44:	89 83       	std	Y+1, r24	; 0x01
    2f46:	26 c0       	rjmp	.+76     	; 0x2f94 <M_ADC_enu_getDigitalValueAsynchCallBack+0xac>
		}
		else if(PtrADMUX->ADLAR_BITS){
    2f48:	e0 91 b4 03 	lds	r30, 0x03B4
    2f4c:	f0 91 b5 03 	lds	r31, 0x03B5
    2f50:	80 81       	ld	r24, Z
    2f52:	80 72       	andi	r24, 0x20	; 32
    2f54:	88 23       	and	r24, r24
    2f56:	e1 f0       	breq	.+56     	; 0x2f90 <M_ADC_enu_getDigitalValueAsynchCallBack+0xa8>
			digital_data = (ADCL_reg>>6);
    2f58:	e4 e2       	ldi	r30, 0x24	; 36
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	82 95       	swap	r24
    2f60:	86 95       	lsr	r24
    2f62:	86 95       	lsr	r24
    2f64:	83 70       	andi	r24, 0x03	; 3
    2f66:	88 2f       	mov	r24, r24
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	9a 83       	std	Y+2, r25	; 0x02
    2f6c:	89 83       	std	Y+1, r24	; 0x01
			digital_data |= (ADCH_reg<<2);
    2f6e:	e5 e2       	ldi	r30, 0x25	; 37
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	88 2f       	mov	r24, r24
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	88 0f       	add	r24, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	88 0f       	add	r24, r24
    2f7e:	99 1f       	adc	r25, r25
    2f80:	9c 01       	movw	r18, r24
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	9a 81       	ldd	r25, Y+2	; 0x02
    2f86:	82 2b       	or	r24, r18
    2f88:	93 2b       	or	r25, r19
    2f8a:	9a 83       	std	Y+2, r25	; 0x02
    2f8c:	89 83       	std	Y+1, r24	; 0x01
    2f8e:	02 c0       	rjmp	.+4      	; 0x2f94 <M_ADC_enu_getDigitalValueAsynchCallBack+0xac>
		}
		else{
			Local_enuErroState = ES_OUT_OF_RANGE;
    2f90:	82 e0       	ldi	r24, 0x02	; 2
    2f92:	8b 83       	std	Y+3, r24	; 0x03
		}
		/*convert digital value to voltage*/
				*voltage = 100*digital_data*5.00/1024.00;
    2f94:	29 81       	ldd	r18, Y+1	; 0x01
    2f96:	3a 81       	ldd	r19, Y+2	; 0x02
    2f98:	84 e6       	ldi	r24, 0x64	; 100
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	ac 01       	movw	r20, r24
    2f9e:	24 9f       	mul	r18, r20
    2fa0:	c0 01       	movw	r24, r0
    2fa2:	25 9f       	mul	r18, r21
    2fa4:	90 0d       	add	r25, r0
    2fa6:	34 9f       	mul	r19, r20
    2fa8:	90 0d       	add	r25, r0
    2faa:	11 24       	eor	r1, r1
    2fac:	cc 01       	movw	r24, r24
    2fae:	a0 e0       	ldi	r26, 0x00	; 0
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	cd 01       	movw	r24, r26
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	40 ea       	ldi	r20, 0xA0	; 160
    2fc8:	50 e4       	ldi	r21, 0x40	; 64
    2fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	bc 01       	movw	r22, r24
    2fd4:	cd 01       	movw	r24, r26
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e8       	ldi	r20, 0x80	; 128
    2fdc:	54 e4       	ldi	r21, 0x44	; 68
    2fde:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	ec 81       	ldd	r30, Y+4	; 0x04
    2fe8:	fd 81       	ldd	r31, Y+5	; 0x05
    2fea:	80 83       	st	Z, r24
    2fec:	91 83       	std	Z+1, r25	; 0x01
    2fee:	a2 83       	std	Z+2, r26	; 0x02
    2ff0:	b3 83       	std	Z+3, r27	; 0x03
				H_LCD_void_gotoXY(1, 1);
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	61 e0       	ldi	r22, 0x01	; 1
    2ff6:	0e 94 af 2a 	call	0x555e	; 0x555e <H_LCD_void_gotoXY>
				H_LCD_void_sendIntNum((s32)*voltage);
    2ffa:	ec 81       	ldd	r30, Y+4	; 0x04
    2ffc:	fd 81       	ldd	r31, Y+5	; 0x05
    2ffe:	80 81       	ld	r24, Z
    3000:	91 81       	ldd	r25, Z+1	; 0x01
    3002:	a2 81       	ldd	r26, Z+2	; 0x02
    3004:	b3 81       	ldd	r27, Z+3	; 0x03
    3006:	bc 01       	movw	r22, r24
    3008:	cd 01       	movw	r24, r26
    300a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	bc 01       	movw	r22, r24
    3014:	cd 01       	movw	r24, r26
    3016:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <H_LCD_void_sendIntNum>
    301a:	02 c0       	rjmp	.+4      	; 0x3020 <M_ADC_enu_getDigitalValueAsynchCallBack+0x138>
	}
	else{
		Local_enuErroState = ES_NULL_POINTER;
    301c:	83 e0       	ldi	r24, 0x03	; 3
    301e:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_enuErroState;
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	08 95       	ret

00003032 <M_ADC_enu_setCallBack>:

ES_t M_ADC_enu_setCallBack(ES_t (*Copy_ADCpfunAppFun)(void*), void * Copy_ADCpvidAppParameter){
    3032:	df 93       	push	r29
    3034:	cf 93       	push	r28
    3036:	00 d0       	rcall	.+0      	; 0x3038 <M_ADC_enu_setCallBack+0x6>
    3038:	00 d0       	rcall	.+0      	; 0x303a <M_ADC_enu_setCallBack+0x8>
    303a:	0f 92       	push	r0
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    3040:	9b 83       	std	Y+3, r25	; 0x03
    3042:	8a 83       	std	Y+2, r24	; 0x02
    3044:	7d 83       	std	Y+5, r23	; 0x05
    3046:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3048:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_ADCpfunAppFun != NULL){
    304a:	8a 81       	ldd	r24, Y+2	; 0x02
    304c:	9b 81       	ldd	r25, Y+3	; 0x03
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	79 f0       	breq	.+30     	; 0x3070 <M_ADC_enu_setCallBack+0x3e>
		ADCpfunAppFun = Copy_ADCpfunAppFun;
    3052:	8a 81       	ldd	r24, Y+2	; 0x02
    3054:	9b 81       	ldd	r25, Y+3	; 0x03
    3056:	90 93 c4 04 	sts	0x04C4, r25
    305a:	80 93 c3 04 	sts	0x04C3, r24
		ADCpvidAppParameter = Copy_ADCpvidAppParameter;
    305e:	8c 81       	ldd	r24, Y+4	; 0x04
    3060:	9d 81       	ldd	r25, Y+5	; 0x05
    3062:	90 93 c6 04 	sts	0x04C6, r25
    3066:	80 93 c5 04 	sts	0x04C5, r24
		Local_enuErrorState = ES_OK;
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	89 83       	std	Y+1, r24	; 0x01
    306e:	02 c0       	rjmp	.+4      	; 0x3074 <M_ADC_enu_setCallBack+0x42>
	}
	else{
		Local_enuErrorState =ES_NULL_POINTER;
    3070:	83 e0       	ldi	r24, 0x03	; 3
    3072:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    3074:	89 81       	ldd	r24, Y+1	; 0x01
}
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	08 95       	ret

00003086 <M_ADC_enu_selectChannel>:

ES_t M_ADC_enu_selectChannel(ADC_CHNL_TYPE copy_ADC_chnl){
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	00 d0       	rcall	.+0      	; 0x308c <M_ADC_enu_selectChannel+0x6>
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3092:	19 82       	std	Y+1, r1	; 0x01
	/*channel selection*/
	if(copy_ADC_chnl<=31 && copy_ADC_chnl>=0){
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	80 32       	cpi	r24, 0x20	; 32
    3098:	78 f4       	brcc	.+30     	; 0x30b8 <M_ADC_enu_selectChannel+0x32>
		PtrADMUX->MUX_BITS = copy_ADC_chnl;
    309a:	e0 91 b4 03 	lds	r30, 0x03B4
    309e:	f0 91 b5 03 	lds	r31, 0x03B5
    30a2:	8a 81       	ldd	r24, Y+2	; 0x02
    30a4:	8f 71       	andi	r24, 0x1F	; 31
    30a6:	98 2f       	mov	r25, r24
    30a8:	9f 71       	andi	r25, 0x1F	; 31
    30aa:	80 81       	ld	r24, Z
    30ac:	80 7e       	andi	r24, 0xE0	; 224
    30ae:	89 2b       	or	r24, r25
    30b0:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	89 83       	std	Y+1, r24	; 0x01
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <M_ADC_enu_selectChannel+0x36>
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    30b8:	82 e0       	ldi	r24, 0x02	; 2
    30ba:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    30be:	0f 90       	pop	r0
    30c0:	0f 90       	pop	r0
    30c2:	cf 91       	pop	r28
    30c4:	df 91       	pop	r29
    30c6:	08 95       	ret

000030c8 <__vector_16>:


ISR(ADC_vect){
    30c8:	1f 92       	push	r1
    30ca:	0f 92       	push	r0
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	0f 92       	push	r0
    30d0:	11 24       	eor	r1, r1
    30d2:	2f 93       	push	r18
    30d4:	3f 93       	push	r19
    30d6:	4f 93       	push	r20
    30d8:	5f 93       	push	r21
    30da:	6f 93       	push	r22
    30dc:	7f 93       	push	r23
    30de:	8f 93       	push	r24
    30e0:	9f 93       	push	r25
    30e2:	af 93       	push	r26
    30e4:	bf 93       	push	r27
    30e6:	ef 93       	push	r30
    30e8:	ff 93       	push	r31
    30ea:	df 93       	push	r29
    30ec:	cf 93       	push	r28
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
	if(ADCpfunAppFun != NULL){
    30f2:	80 91 c3 04 	lds	r24, 0x04C3
    30f6:	90 91 c4 04 	lds	r25, 0x04C4
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	49 f0       	breq	.+18     	; 0x3110 <__vector_16+0x48>
		ADCpfunAppFun(ADCpvidAppParameter);
    30fe:	e0 91 c3 04 	lds	r30, 0x04C3
    3102:	f0 91 c4 04 	lds	r31, 0x04C4
    3106:	80 91 c5 04 	lds	r24, 0x04C5
    310a:	90 91 c6 04 	lds	r25, 0x04C6
    310e:	09 95       	icall
	}
	PtrADCSRA->ADIF_BITS=1;
    3110:	e0 91 b6 03 	lds	r30, 0x03B6
    3114:	f0 91 b7 03 	lds	r31, 0x03B7
    3118:	80 81       	ld	r24, Z
    311a:	80 61       	ori	r24, 0x10	; 16
    311c:	80 83       	st	Z, r24
}
    311e:	cf 91       	pop	r28
    3120:	df 91       	pop	r29
    3122:	ff 91       	pop	r31
    3124:	ef 91       	pop	r30
    3126:	bf 91       	pop	r27
    3128:	af 91       	pop	r26
    312a:	9f 91       	pop	r25
    312c:	8f 91       	pop	r24
    312e:	7f 91       	pop	r23
    3130:	6f 91       	pop	r22
    3132:	5f 91       	pop	r21
    3134:	4f 91       	pop	r20
    3136:	3f 91       	pop	r19
    3138:	2f 91       	pop	r18
    313a:	0f 90       	pop	r0
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	0f 90       	pop	r0
    3140:	1f 90       	pop	r1
    3142:	18 95       	reti

00003144 <wifi_connect>:
#include <util/delay.h>
/***********************************************************************/
/* Wifi initialization function to connect to wifi and TCP server */
/***********************************************************************/
void wifi_connect()
{
    3144:	0f 93       	push	r16
    3146:	1f 93       	push	r17
    3148:	df 93       	push	r29
    314a:	cf 93       	push	r28
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    3150:	ce 5e       	subi	r28, 0xEE	; 238
    3152:	d0 40       	sbci	r29, 0x00	; 0
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	f8 94       	cli
    3158:	de bf       	out	0x3e, r29	; 62
    315a:	0f be       	out	0x3f, r0	; 63
    315c:	cd bf       	out	0x3d, r28	; 61
	/* Set callback function to recive wifi responses */
	UART_Set_CallBack(Wifi_Response_Reciver_UART_CallBack);
    315e:	85 e3       	ldi	r24, 0x35	; 53
    3160:	96 e2       	ldi	r25, 0x26	; 38
    3162:	0e 94 90 08 	call	0x1120	; 0x1120 <UART_Set_CallBack>
	
	/* Stop echo and check for OK */
	UART_sendString("ATE0\r\n");
    3166:	80 e6       	ldi	r24, 0x60	; 96
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	0e 94 66 07 	call	0xecc	; 0xecc <UART_sendString>
    316e:	fe 01       	movw	r30, r28
    3170:	e5 51       	subi	r30, 0x15	; 21
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	aa e7       	ldi	r26, 0x7A	; 122
    317a:	b4 e4       	ldi	r27, 0x44	; 68
    317c:	80 83       	st	Z, r24
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	a2 83       	std	Z+2, r26	; 0x02
    3182:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3184:	8e 01       	movw	r16, r28
    3186:	09 51       	subi	r16, 0x19	; 25
    3188:	1f 4f       	sbci	r17, 0xFF	; 255
    318a:	fe 01       	movw	r30, r28
    318c:	e5 51       	subi	r30, 0x15	; 21
    318e:	ff 4f       	sbci	r31, 0xFF	; 255
    3190:	60 81       	ld	r22, Z
    3192:	71 81       	ldd	r23, Z+1	; 0x01
    3194:	82 81       	ldd	r24, Z+2	; 0x02
    3196:	93 81       	ldd	r25, Z+3	; 0x03
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	4a e7       	ldi	r20, 0x7A	; 122
    319e:	55 e4       	ldi	r21, 0x45	; 69
    31a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	f8 01       	movw	r30, r16
    31aa:	80 83       	st	Z, r24
    31ac:	91 83       	std	Z+1, r25	; 0x01
    31ae:	a2 83       	std	Z+2, r26	; 0x02
    31b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31b2:	fe 01       	movw	r30, r28
    31b4:	e9 51       	subi	r30, 0x19	; 25
    31b6:	ff 4f       	sbci	r31, 0xFF	; 255
    31b8:	60 81       	ld	r22, Z
    31ba:	71 81       	ldd	r23, Z+1	; 0x01
    31bc:	82 81       	ldd	r24, Z+2	; 0x02
    31be:	93 81       	ldd	r25, Z+3	; 0x03
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 e8       	ldi	r20, 0x80	; 128
    31c6:	5f e3       	ldi	r21, 0x3F	; 63
    31c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31cc:	88 23       	and	r24, r24
    31ce:	44 f4       	brge	.+16     	; 0x31e0 <wifi_connect+0x9c>
		__ticks = 1;
    31d0:	fe 01       	movw	r30, r28
    31d2:	eb 51       	subi	r30, 0x1B	; 27
    31d4:	ff 4f       	sbci	r31, 0xFF	; 255
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	91 83       	std	Z+1, r25	; 0x01
    31dc:	80 83       	st	Z, r24
    31de:	64 c0       	rjmp	.+200    	; 0x32a8 <wifi_connect+0x164>
	else if (__tmp > 65535)
    31e0:	fe 01       	movw	r30, r28
    31e2:	e9 51       	subi	r30, 0x19	; 25
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	60 81       	ld	r22, Z
    31e8:	71 81       	ldd	r23, Z+1	; 0x01
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	93 81       	ldd	r25, Z+3	; 0x03
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	3f ef       	ldi	r19, 0xFF	; 255
    31f2:	4f e7       	ldi	r20, 0x7F	; 127
    31f4:	57 e4       	ldi	r21, 0x47	; 71
    31f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31fa:	18 16       	cp	r1, r24
    31fc:	0c f0       	brlt	.+2      	; 0x3200 <wifi_connect+0xbc>
    31fe:	43 c0       	rjmp	.+134    	; 0x3286 <wifi_connect+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3200:	fe 01       	movw	r30, r28
    3202:	e5 51       	subi	r30, 0x15	; 21
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	60 81       	ld	r22, Z
    3208:	71 81       	ldd	r23, Z+1	; 0x01
    320a:	82 81       	ldd	r24, Z+2	; 0x02
    320c:	93 81       	ldd	r25, Z+3	; 0x03
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e2       	ldi	r20, 0x20	; 32
    3214:	51 e4       	ldi	r21, 0x41	; 65
    3216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	8e 01       	movw	r16, r28
    3220:	0b 51       	subi	r16, 0x1B	; 27
    3222:	1f 4f       	sbci	r17, 0xFF	; 255
    3224:	bc 01       	movw	r22, r24
    3226:	cd 01       	movw	r24, r26
    3228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	f8 01       	movw	r30, r16
    3232:	91 83       	std	Z+1, r25	; 0x01
    3234:	80 83       	st	Z, r24
    3236:	1f c0       	rjmp	.+62     	; 0x3276 <wifi_connect+0x132>
    3238:	fe 01       	movw	r30, r28
    323a:	ed 51       	subi	r30, 0x1D	; 29
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	80 e9       	ldi	r24, 0x90	; 144
    3240:	91 e0       	ldi	r25, 0x01	; 1
    3242:	91 83       	std	Z+1, r25	; 0x01
    3244:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3246:	fe 01       	movw	r30, r28
    3248:	ed 51       	subi	r30, 0x1D	; 29
    324a:	ff 4f       	sbci	r31, 0xFF	; 255
    324c:	80 81       	ld	r24, Z
    324e:	91 81       	ldd	r25, Z+1	; 0x01
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	f1 f7       	brne	.-4      	; 0x3250 <wifi_connect+0x10c>
    3254:	fe 01       	movw	r30, r28
    3256:	ed 51       	subi	r30, 0x1D	; 29
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	91 83       	std	Z+1, r25	; 0x01
    325c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325e:	de 01       	movw	r26, r28
    3260:	ab 51       	subi	r26, 0x1B	; 27
    3262:	bf 4f       	sbci	r27, 0xFF	; 255
    3264:	fe 01       	movw	r30, r28
    3266:	eb 51       	subi	r30, 0x1B	; 27
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	80 81       	ld	r24, Z
    326c:	91 81       	ldd	r25, Z+1	; 0x01
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	11 96       	adiw	r26, 0x01	; 1
    3272:	9c 93       	st	X, r25
    3274:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3276:	fe 01       	movw	r30, r28
    3278:	eb 51       	subi	r30, 0x1B	; 27
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	80 81       	ld	r24, Z
    327e:	91 81       	ldd	r25, Z+1	; 0x01
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	d1 f6       	brne	.-76     	; 0x3238 <wifi_connect+0xf4>
    3284:	27 c0       	rjmp	.+78     	; 0x32d4 <wifi_connect+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3286:	8e 01       	movw	r16, r28
    3288:	0b 51       	subi	r16, 0x1B	; 27
    328a:	1f 4f       	sbci	r17, 0xFF	; 255
    328c:	fe 01       	movw	r30, r28
    328e:	e9 51       	subi	r30, 0x19	; 25
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	60 81       	ld	r22, Z
    3294:	71 81       	ldd	r23, Z+1	; 0x01
    3296:	82 81       	ldd	r24, Z+2	; 0x02
    3298:	93 81       	ldd	r25, Z+3	; 0x03
    329a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	f8 01       	movw	r30, r16
    32a4:	91 83       	std	Z+1, r25	; 0x01
    32a6:	80 83       	st	Z, r24
    32a8:	de 01       	movw	r26, r28
    32aa:	af 51       	subi	r26, 0x1F	; 31
    32ac:	bf 4f       	sbci	r27, 0xFF	; 255
    32ae:	fe 01       	movw	r30, r28
    32b0:	eb 51       	subi	r30, 0x1B	; 27
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	80 81       	ld	r24, Z
    32b6:	91 81       	ldd	r25, Z+1	; 0x01
    32b8:	8d 93       	st	X+, r24
    32ba:	9c 93       	st	X, r25
    32bc:	fe 01       	movw	r30, r28
    32be:	ef 51       	subi	r30, 0x1F	; 31
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	80 81       	ld	r24, Z
    32c4:	91 81       	ldd	r25, Z+1	; 0x01
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	f1 f7       	brne	.-4      	; 0x32c6 <wifi_connect+0x182>
    32ca:	fe 01       	movw	r30, r28
    32cc:	ef 51       	subi	r30, 0x1F	; 31
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	91 83       	std	Z+1, r25	; 0x01
    32d2:	80 83       	st	Z, r24
	_delay_ms(1000);
	Check_Wifi_Respones("OK", "AT_ERROR");
    32d4:	87 e6       	ldi	r24, 0x67	; 103
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	2a e6       	ldi	r18, 0x6A	; 106
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	b9 01       	movw	r22, r18
    32de:	0e 94 bc 23 	call	0x4778	; 0x4778 <Check_Wifi_Respones>
    32e2:	fe 01       	movw	r30, r28
    32e4:	e3 52       	subi	r30, 0x23	; 35
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	aa e7       	ldi	r26, 0x7A	; 122
    32ee:	b4 e4       	ldi	r27, 0x44	; 68
    32f0:	80 83       	st	Z, r24
    32f2:	91 83       	std	Z+1, r25	; 0x01
    32f4:	a2 83       	std	Z+2, r26	; 0x02
    32f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f8:	8e 01       	movw	r16, r28
    32fa:	07 52       	subi	r16, 0x27	; 39
    32fc:	1f 4f       	sbci	r17, 0xFF	; 255
    32fe:	fe 01       	movw	r30, r28
    3300:	e3 52       	subi	r30, 0x23	; 35
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	60 81       	ld	r22, Z
    3306:	71 81       	ldd	r23, Z+1	; 0x01
    3308:	82 81       	ldd	r24, Z+2	; 0x02
    330a:	93 81       	ldd	r25, Z+3	; 0x03
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	4a e7       	ldi	r20, 0x7A	; 122
    3312:	55 e4       	ldi	r21, 0x45	; 69
    3314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	f8 01       	movw	r30, r16
    331e:	80 83       	st	Z, r24
    3320:	91 83       	std	Z+1, r25	; 0x01
    3322:	a2 83       	std	Z+2, r26	; 0x02
    3324:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3326:	fe 01       	movw	r30, r28
    3328:	e7 52       	subi	r30, 0x27	; 39
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	60 81       	ld	r22, Z
    332e:	71 81       	ldd	r23, Z+1	; 0x01
    3330:	82 81       	ldd	r24, Z+2	; 0x02
    3332:	93 81       	ldd	r25, Z+3	; 0x03
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	40 e8       	ldi	r20, 0x80	; 128
    333a:	5f e3       	ldi	r21, 0x3F	; 63
    333c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3340:	88 23       	and	r24, r24
    3342:	44 f4       	brge	.+16     	; 0x3354 <wifi_connect+0x210>
		__ticks = 1;
    3344:	fe 01       	movw	r30, r28
    3346:	e9 52       	subi	r30, 0x29	; 41
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	91 83       	std	Z+1, r25	; 0x01
    3350:	80 83       	st	Z, r24
    3352:	64 c0       	rjmp	.+200    	; 0x341c <wifi_connect+0x2d8>
	else if (__tmp > 65535)
    3354:	fe 01       	movw	r30, r28
    3356:	e7 52       	subi	r30, 0x27	; 39
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	60 81       	ld	r22, Z
    335c:	71 81       	ldd	r23, Z+1	; 0x01
    335e:	82 81       	ldd	r24, Z+2	; 0x02
    3360:	93 81       	ldd	r25, Z+3	; 0x03
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	3f ef       	ldi	r19, 0xFF	; 255
    3366:	4f e7       	ldi	r20, 0x7F	; 127
    3368:	57 e4       	ldi	r21, 0x47	; 71
    336a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    336e:	18 16       	cp	r1, r24
    3370:	0c f0       	brlt	.+2      	; 0x3374 <wifi_connect+0x230>
    3372:	43 c0       	rjmp	.+134    	; 0x33fa <wifi_connect+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3374:	fe 01       	movw	r30, r28
    3376:	e3 52       	subi	r30, 0x23	; 35
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	60 81       	ld	r22, Z
    337c:	71 81       	ldd	r23, Z+1	; 0x01
    337e:	82 81       	ldd	r24, Z+2	; 0x02
    3380:	93 81       	ldd	r25, Z+3	; 0x03
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	40 e2       	ldi	r20, 0x20	; 32
    3388:	51 e4       	ldi	r21, 0x41	; 65
    338a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	8e 01       	movw	r16, r28
    3394:	09 52       	subi	r16, 0x29	; 41
    3396:	1f 4f       	sbci	r17, 0xFF	; 255
    3398:	bc 01       	movw	r22, r24
    339a:	cd 01       	movw	r24, r26
    339c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	f8 01       	movw	r30, r16
    33a6:	91 83       	std	Z+1, r25	; 0x01
    33a8:	80 83       	st	Z, r24
    33aa:	1f c0       	rjmp	.+62     	; 0x33ea <wifi_connect+0x2a6>
    33ac:	fe 01       	movw	r30, r28
    33ae:	eb 52       	subi	r30, 0x2B	; 43
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	80 e9       	ldi	r24, 0x90	; 144
    33b4:	91 e0       	ldi	r25, 0x01	; 1
    33b6:	91 83       	std	Z+1, r25	; 0x01
    33b8:	80 83       	st	Z, r24
    33ba:	fe 01       	movw	r30, r28
    33bc:	eb 52       	subi	r30, 0x2B	; 43
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	80 81       	ld	r24, Z
    33c2:	91 81       	ldd	r25, Z+1	; 0x01
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	f1 f7       	brne	.-4      	; 0x33c4 <wifi_connect+0x280>
    33c8:	fe 01       	movw	r30, r28
    33ca:	eb 52       	subi	r30, 0x2B	; 43
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	91 83       	std	Z+1, r25	; 0x01
    33d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d2:	de 01       	movw	r26, r28
    33d4:	a9 52       	subi	r26, 0x29	; 41
    33d6:	bf 4f       	sbci	r27, 0xFF	; 255
    33d8:	fe 01       	movw	r30, r28
    33da:	e9 52       	subi	r30, 0x29	; 41
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	80 81       	ld	r24, Z
    33e0:	91 81       	ldd	r25, Z+1	; 0x01
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	11 96       	adiw	r26, 0x01	; 1
    33e6:	9c 93       	st	X, r25
    33e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ea:	fe 01       	movw	r30, r28
    33ec:	e9 52       	subi	r30, 0x29	; 41
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	80 81       	ld	r24, Z
    33f2:	91 81       	ldd	r25, Z+1	; 0x01
    33f4:	00 97       	sbiw	r24, 0x00	; 0
    33f6:	d1 f6       	brne	.-76     	; 0x33ac <wifi_connect+0x268>
    33f8:	27 c0       	rjmp	.+78     	; 0x3448 <wifi_connect+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33fa:	8e 01       	movw	r16, r28
    33fc:	09 52       	subi	r16, 0x29	; 41
    33fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3400:	fe 01       	movw	r30, r28
    3402:	e7 52       	subi	r30, 0x27	; 39
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	60 81       	ld	r22, Z
    3408:	71 81       	ldd	r23, Z+1	; 0x01
    340a:	82 81       	ldd	r24, Z+2	; 0x02
    340c:	93 81       	ldd	r25, Z+3	; 0x03
    340e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	f8 01       	movw	r30, r16
    3418:	91 83       	std	Z+1, r25	; 0x01
    341a:	80 83       	st	Z, r24
    341c:	de 01       	movw	r26, r28
    341e:	ad 52       	subi	r26, 0x2D	; 45
    3420:	bf 4f       	sbci	r27, 0xFF	; 255
    3422:	fe 01       	movw	r30, r28
    3424:	e9 52       	subi	r30, 0x29	; 41
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	80 81       	ld	r24, Z
    342a:	91 81       	ldd	r25, Z+1	; 0x01
    342c:	8d 93       	st	X+, r24
    342e:	9c 93       	st	X, r25
    3430:	fe 01       	movw	r30, r28
    3432:	ed 52       	subi	r30, 0x2D	; 45
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	80 81       	ld	r24, Z
    3438:	91 81       	ldd	r25, Z+1	; 0x01
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	f1 f7       	brne	.-4      	; 0x343a <wifi_connect+0x2f6>
    343e:	fe 01       	movw	r30, r28
    3440:	ed 52       	subi	r30, 0x2D	; 45
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	91 83       	std	Z+1, r25	; 0x01
    3446:	80 83       	st	Z, r24
	_delay_ms(1000);
	H_LCD_void_Clear_Display();
    3448:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <H_LCD_void_Clear_Display>
    344c:	fe 01       	movw	r30, r28
    344e:	e1 53       	subi	r30, 0x31	; 49
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	a8 e4       	ldi	r26, 0x48	; 72
    3458:	b3 e4       	ldi	r27, 0x43	; 67
    345a:	80 83       	st	Z, r24
    345c:	91 83       	std	Z+1, r25	; 0x01
    345e:	a2 83       	std	Z+2, r26	; 0x02
    3460:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3462:	8e 01       	movw	r16, r28
    3464:	05 53       	subi	r16, 0x35	; 53
    3466:	1f 4f       	sbci	r17, 0xFF	; 255
    3468:	fe 01       	movw	r30, r28
    346a:	e1 53       	subi	r30, 0x31	; 49
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	60 81       	ld	r22, Z
    3470:	71 81       	ldd	r23, Z+1	; 0x01
    3472:	82 81       	ldd	r24, Z+2	; 0x02
    3474:	93 81       	ldd	r25, Z+3	; 0x03
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	4a e7       	ldi	r20, 0x7A	; 122
    347c:	55 e4       	ldi	r21, 0x45	; 69
    347e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	f8 01       	movw	r30, r16
    3488:	80 83       	st	Z, r24
    348a:	91 83       	std	Z+1, r25	; 0x01
    348c:	a2 83       	std	Z+2, r26	; 0x02
    348e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3490:	fe 01       	movw	r30, r28
    3492:	e5 53       	subi	r30, 0x35	; 53
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	60 81       	ld	r22, Z
    3498:	71 81       	ldd	r23, Z+1	; 0x01
    349a:	82 81       	ldd	r24, Z+2	; 0x02
    349c:	93 81       	ldd	r25, Z+3	; 0x03
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	40 e8       	ldi	r20, 0x80	; 128
    34a4:	5f e3       	ldi	r21, 0x3F	; 63
    34a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34aa:	88 23       	and	r24, r24
    34ac:	44 f4       	brge	.+16     	; 0x34be <wifi_connect+0x37a>
		__ticks = 1;
    34ae:	fe 01       	movw	r30, r28
    34b0:	e7 53       	subi	r30, 0x37	; 55
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	91 83       	std	Z+1, r25	; 0x01
    34ba:	80 83       	st	Z, r24
    34bc:	64 c0       	rjmp	.+200    	; 0x3586 <wifi_connect+0x442>
	else if (__tmp > 65535)
    34be:	fe 01       	movw	r30, r28
    34c0:	e5 53       	subi	r30, 0x35	; 53
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	60 81       	ld	r22, Z
    34c6:	71 81       	ldd	r23, Z+1	; 0x01
    34c8:	82 81       	ldd	r24, Z+2	; 0x02
    34ca:	93 81       	ldd	r25, Z+3	; 0x03
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	3f ef       	ldi	r19, 0xFF	; 255
    34d0:	4f e7       	ldi	r20, 0x7F	; 127
    34d2:	57 e4       	ldi	r21, 0x47	; 71
    34d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34d8:	18 16       	cp	r1, r24
    34da:	0c f0       	brlt	.+2      	; 0x34de <wifi_connect+0x39a>
    34dc:	43 c0       	rjmp	.+134    	; 0x3564 <wifi_connect+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34de:	fe 01       	movw	r30, r28
    34e0:	e1 53       	subi	r30, 0x31	; 49
    34e2:	ff 4f       	sbci	r31, 0xFF	; 255
    34e4:	60 81       	ld	r22, Z
    34e6:	71 81       	ldd	r23, Z+1	; 0x01
    34e8:	82 81       	ldd	r24, Z+2	; 0x02
    34ea:	93 81       	ldd	r25, Z+3	; 0x03
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	40 e2       	ldi	r20, 0x20	; 32
    34f2:	51 e4       	ldi	r21, 0x41	; 65
    34f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	8e 01       	movw	r16, r28
    34fe:	07 53       	subi	r16, 0x37	; 55
    3500:	1f 4f       	sbci	r17, 0xFF	; 255
    3502:	bc 01       	movw	r22, r24
    3504:	cd 01       	movw	r24, r26
    3506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350a:	dc 01       	movw	r26, r24
    350c:	cb 01       	movw	r24, r22
    350e:	f8 01       	movw	r30, r16
    3510:	91 83       	std	Z+1, r25	; 0x01
    3512:	80 83       	st	Z, r24
    3514:	1f c0       	rjmp	.+62     	; 0x3554 <wifi_connect+0x410>
    3516:	fe 01       	movw	r30, r28
    3518:	e9 53       	subi	r30, 0x39	; 57
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	80 e9       	ldi	r24, 0x90	; 144
    351e:	91 e0       	ldi	r25, 0x01	; 1
    3520:	91 83       	std	Z+1, r25	; 0x01
    3522:	80 83       	st	Z, r24
    3524:	fe 01       	movw	r30, r28
    3526:	e9 53       	subi	r30, 0x39	; 57
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	80 81       	ld	r24, Z
    352c:	91 81       	ldd	r25, Z+1	; 0x01
    352e:	01 97       	sbiw	r24, 0x01	; 1
    3530:	f1 f7       	brne	.-4      	; 0x352e <wifi_connect+0x3ea>
    3532:	fe 01       	movw	r30, r28
    3534:	e9 53       	subi	r30, 0x39	; 57
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	91 83       	std	Z+1, r25	; 0x01
    353a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    353c:	de 01       	movw	r26, r28
    353e:	a7 53       	subi	r26, 0x37	; 55
    3540:	bf 4f       	sbci	r27, 0xFF	; 255
    3542:	fe 01       	movw	r30, r28
    3544:	e7 53       	subi	r30, 0x37	; 55
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	80 81       	ld	r24, Z
    354a:	91 81       	ldd	r25, Z+1	; 0x01
    354c:	01 97       	sbiw	r24, 0x01	; 1
    354e:	11 96       	adiw	r26, 0x01	; 1
    3550:	9c 93       	st	X, r25
    3552:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3554:	fe 01       	movw	r30, r28
    3556:	e7 53       	subi	r30, 0x37	; 55
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	80 81       	ld	r24, Z
    355c:	91 81       	ldd	r25, Z+1	; 0x01
    355e:	00 97       	sbiw	r24, 0x00	; 0
    3560:	d1 f6       	brne	.-76     	; 0x3516 <wifi_connect+0x3d2>
    3562:	27 c0       	rjmp	.+78     	; 0x35b2 <wifi_connect+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3564:	8e 01       	movw	r16, r28
    3566:	07 53       	subi	r16, 0x37	; 55
    3568:	1f 4f       	sbci	r17, 0xFF	; 255
    356a:	fe 01       	movw	r30, r28
    356c:	e5 53       	subi	r30, 0x35	; 53
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	60 81       	ld	r22, Z
    3572:	71 81       	ldd	r23, Z+1	; 0x01
    3574:	82 81       	ldd	r24, Z+2	; 0x02
    3576:	93 81       	ldd	r25, Z+3	; 0x03
    3578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	f8 01       	movw	r30, r16
    3582:	91 83       	std	Z+1, r25	; 0x01
    3584:	80 83       	st	Z, r24
    3586:	de 01       	movw	r26, r28
    3588:	ab 53       	subi	r26, 0x3B	; 59
    358a:	bf 4f       	sbci	r27, 0xFF	; 255
    358c:	fe 01       	movw	r30, r28
    358e:	e7 53       	subi	r30, 0x37	; 55
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	80 81       	ld	r24, Z
    3594:	91 81       	ldd	r25, Z+1	; 0x01
    3596:	8d 93       	st	X+, r24
    3598:	9c 93       	st	X, r25
    359a:	fe 01       	movw	r30, r28
    359c:	eb 53       	subi	r30, 0x3B	; 59
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	80 81       	ld	r24, Z
    35a2:	91 81       	ldd	r25, Z+1	; 0x01
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	f1 f7       	brne	.-4      	; 0x35a4 <wifi_connect+0x460>
    35a8:	fe 01       	movw	r30, r28
    35aa:	eb 53       	subi	r30, 0x3B	; 59
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	91 83       	std	Z+1, r25	; 0x01
    35b0:	80 83       	st	Z, r24
	_delay_ms(200);
	Wifi_Buffer_Reset();
    35b2:	0e 94 11 26 	call	0x4c22	; 0x4c22 <Wifi_Buffer_Reset>
	H_LCD_void_sendData('2');
    35b6:	82 e3       	ldi	r24, 0x32	; 50
    35b8:	0e 94 1e 2a 	call	0x543c	; 0x543c <H_LCD_void_sendData>
    35bc:	fe 01       	movw	r30, r28
    35be:	ef 53       	subi	r30, 0x3F	; 63
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	aa e7       	ldi	r26, 0x7A	; 122
    35c8:	b4 e4       	ldi	r27, 0x44	; 68
    35ca:	80 83       	st	Z, r24
    35cc:	91 83       	std	Z+1, r25	; 0x01
    35ce:	a2 83       	std	Z+2, r26	; 0x02
    35d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d2:	8e 01       	movw	r16, r28
    35d4:	03 54       	subi	r16, 0x43	; 67
    35d6:	1f 4f       	sbci	r17, 0xFF	; 255
    35d8:	fe 01       	movw	r30, r28
    35da:	ef 53       	subi	r30, 0x3F	; 63
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	60 81       	ld	r22, Z
    35e0:	71 81       	ldd	r23, Z+1	; 0x01
    35e2:	82 81       	ldd	r24, Z+2	; 0x02
    35e4:	93 81       	ldd	r25, Z+3	; 0x03
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	4a e7       	ldi	r20, 0x7A	; 122
    35ec:	55 e4       	ldi	r21, 0x45	; 69
    35ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	f8 01       	movw	r30, r16
    35f8:	80 83       	st	Z, r24
    35fa:	91 83       	std	Z+1, r25	; 0x01
    35fc:	a2 83       	std	Z+2, r26	; 0x02
    35fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3600:	fe 01       	movw	r30, r28
    3602:	e3 54       	subi	r30, 0x43	; 67
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	60 81       	ld	r22, Z
    3608:	71 81       	ldd	r23, Z+1	; 0x01
    360a:	82 81       	ldd	r24, Z+2	; 0x02
    360c:	93 81       	ldd	r25, Z+3	; 0x03
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	40 e8       	ldi	r20, 0x80	; 128
    3614:	5f e3       	ldi	r21, 0x3F	; 63
    3616:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    361a:	88 23       	and	r24, r24
    361c:	44 f4       	brge	.+16     	; 0x362e <wifi_connect+0x4ea>
		__ticks = 1;
    361e:	fe 01       	movw	r30, r28
    3620:	e5 54       	subi	r30, 0x45	; 69
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	91 83       	std	Z+1, r25	; 0x01
    362a:	80 83       	st	Z, r24
    362c:	64 c0       	rjmp	.+200    	; 0x36f6 <wifi_connect+0x5b2>
	else if (__tmp > 65535)
    362e:	fe 01       	movw	r30, r28
    3630:	e3 54       	subi	r30, 0x43	; 67
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	60 81       	ld	r22, Z
    3636:	71 81       	ldd	r23, Z+1	; 0x01
    3638:	82 81       	ldd	r24, Z+2	; 0x02
    363a:	93 81       	ldd	r25, Z+3	; 0x03
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	3f ef       	ldi	r19, 0xFF	; 255
    3640:	4f e7       	ldi	r20, 0x7F	; 127
    3642:	57 e4       	ldi	r21, 0x47	; 71
    3644:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3648:	18 16       	cp	r1, r24
    364a:	0c f0       	brlt	.+2      	; 0x364e <wifi_connect+0x50a>
    364c:	43 c0       	rjmp	.+134    	; 0x36d4 <wifi_connect+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364e:	fe 01       	movw	r30, r28
    3650:	ef 53       	subi	r30, 0x3F	; 63
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	60 81       	ld	r22, Z
    3656:	71 81       	ldd	r23, Z+1	; 0x01
    3658:	82 81       	ldd	r24, Z+2	; 0x02
    365a:	93 81       	ldd	r25, Z+3	; 0x03
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	40 e2       	ldi	r20, 0x20	; 32
    3662:	51 e4       	ldi	r21, 0x41	; 65
    3664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	8e 01       	movw	r16, r28
    366e:	05 54       	subi	r16, 0x45	; 69
    3670:	1f 4f       	sbci	r17, 0xFF	; 255
    3672:	bc 01       	movw	r22, r24
    3674:	cd 01       	movw	r24, r26
    3676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	f8 01       	movw	r30, r16
    3680:	91 83       	std	Z+1, r25	; 0x01
    3682:	80 83       	st	Z, r24
    3684:	1f c0       	rjmp	.+62     	; 0x36c4 <wifi_connect+0x580>
    3686:	fe 01       	movw	r30, r28
    3688:	e7 54       	subi	r30, 0x47	; 71
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	80 e9       	ldi	r24, 0x90	; 144
    368e:	91 e0       	ldi	r25, 0x01	; 1
    3690:	91 83       	std	Z+1, r25	; 0x01
    3692:	80 83       	st	Z, r24
    3694:	fe 01       	movw	r30, r28
    3696:	e7 54       	subi	r30, 0x47	; 71
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	80 81       	ld	r24, Z
    369c:	91 81       	ldd	r25, Z+1	; 0x01
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	f1 f7       	brne	.-4      	; 0x369e <wifi_connect+0x55a>
    36a2:	fe 01       	movw	r30, r28
    36a4:	e7 54       	subi	r30, 0x47	; 71
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	91 83       	std	Z+1, r25	; 0x01
    36aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ac:	de 01       	movw	r26, r28
    36ae:	a5 54       	subi	r26, 0x45	; 69
    36b0:	bf 4f       	sbci	r27, 0xFF	; 255
    36b2:	fe 01       	movw	r30, r28
    36b4:	e5 54       	subi	r30, 0x45	; 69
    36b6:	ff 4f       	sbci	r31, 0xFF	; 255
    36b8:	80 81       	ld	r24, Z
    36ba:	91 81       	ldd	r25, Z+1	; 0x01
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	11 96       	adiw	r26, 0x01	; 1
    36c0:	9c 93       	st	X, r25
    36c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c4:	fe 01       	movw	r30, r28
    36c6:	e5 54       	subi	r30, 0x45	; 69
    36c8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ca:	80 81       	ld	r24, Z
    36cc:	91 81       	ldd	r25, Z+1	; 0x01
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	d1 f6       	brne	.-76     	; 0x3686 <wifi_connect+0x542>
    36d2:	27 c0       	rjmp	.+78     	; 0x3722 <wifi_connect+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d4:	8e 01       	movw	r16, r28
    36d6:	05 54       	subi	r16, 0x45	; 69
    36d8:	1f 4f       	sbci	r17, 0xFF	; 255
    36da:	fe 01       	movw	r30, r28
    36dc:	e3 54       	subi	r30, 0x43	; 67
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	60 81       	ld	r22, Z
    36e2:	71 81       	ldd	r23, Z+1	; 0x01
    36e4:	82 81       	ldd	r24, Z+2	; 0x02
    36e6:	93 81       	ldd	r25, Z+3	; 0x03
    36e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	f8 01       	movw	r30, r16
    36f2:	91 83       	std	Z+1, r25	; 0x01
    36f4:	80 83       	st	Z, r24
    36f6:	de 01       	movw	r26, r28
    36f8:	a9 54       	subi	r26, 0x49	; 73
    36fa:	bf 4f       	sbci	r27, 0xFF	; 255
    36fc:	fe 01       	movw	r30, r28
    36fe:	e5 54       	subi	r30, 0x45	; 69
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	80 81       	ld	r24, Z
    3704:	91 81       	ldd	r25, Z+1	; 0x01
    3706:	8d 93       	st	X+, r24
    3708:	9c 93       	st	X, r25
    370a:	fe 01       	movw	r30, r28
    370c:	e9 54       	subi	r30, 0x49	; 73
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	80 81       	ld	r24, Z
    3712:	91 81       	ldd	r25, Z+1	; 0x01
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	f1 f7       	brne	.-4      	; 0x3714 <wifi_connect+0x5d0>
    3718:	fe 01       	movw	r30, r28
    371a:	e9 54       	subi	r30, 0x49	; 73
    371c:	ff 4f       	sbci	r31, 0xFF	; 255
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
	_delay_ms(1000);
	
	/* Set wifi mode to station and server */
	UART_sendString("AT+CWMODE=3\r\n");
    3722:	83 e7       	ldi	r24, 0x73	; 115
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	0e 94 66 07 	call	0xecc	; 0xecc <UART_sendString>
    372a:	fe 01       	movw	r30, r28
    372c:	ed 54       	subi	r30, 0x4D	; 77
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	80 e0       	ldi	r24, 0x00	; 0
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	aa e7       	ldi	r26, 0x7A	; 122
    3736:	b4 e4       	ldi	r27, 0x44	; 68
    3738:	80 83       	st	Z, r24
    373a:	91 83       	std	Z+1, r25	; 0x01
    373c:	a2 83       	std	Z+2, r26	; 0x02
    373e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3740:	8e 01       	movw	r16, r28
    3742:	01 55       	subi	r16, 0x51	; 81
    3744:	1f 4f       	sbci	r17, 0xFF	; 255
    3746:	fe 01       	movw	r30, r28
    3748:	ed 54       	subi	r30, 0x4D	; 77
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	60 81       	ld	r22, Z
    374e:	71 81       	ldd	r23, Z+1	; 0x01
    3750:	82 81       	ldd	r24, Z+2	; 0x02
    3752:	93 81       	ldd	r25, Z+3	; 0x03
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	4a e7       	ldi	r20, 0x7A	; 122
    375a:	55 e4       	ldi	r21, 0x45	; 69
    375c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3760:	dc 01       	movw	r26, r24
    3762:	cb 01       	movw	r24, r22
    3764:	f8 01       	movw	r30, r16
    3766:	80 83       	st	Z, r24
    3768:	91 83       	std	Z+1, r25	; 0x01
    376a:	a2 83       	std	Z+2, r26	; 0x02
    376c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    376e:	fe 01       	movw	r30, r28
    3770:	e1 55       	subi	r30, 0x51	; 81
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	60 81       	ld	r22, Z
    3776:	71 81       	ldd	r23, Z+1	; 0x01
    3778:	82 81       	ldd	r24, Z+2	; 0x02
    377a:	93 81       	ldd	r25, Z+3	; 0x03
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	40 e8       	ldi	r20, 0x80	; 128
    3782:	5f e3       	ldi	r21, 0x3F	; 63
    3784:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3788:	88 23       	and	r24, r24
    378a:	44 f4       	brge	.+16     	; 0x379c <wifi_connect+0x658>
		__ticks = 1;
    378c:	fe 01       	movw	r30, r28
    378e:	e3 55       	subi	r30, 0x53	; 83
    3790:	ff 4f       	sbci	r31, 0xFF	; 255
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	91 83       	std	Z+1, r25	; 0x01
    3798:	80 83       	st	Z, r24
    379a:	64 c0       	rjmp	.+200    	; 0x3864 <wifi_connect+0x720>
	else if (__tmp > 65535)
    379c:	fe 01       	movw	r30, r28
    379e:	e1 55       	subi	r30, 0x51	; 81
    37a0:	ff 4f       	sbci	r31, 0xFF	; 255
    37a2:	60 81       	ld	r22, Z
    37a4:	71 81       	ldd	r23, Z+1	; 0x01
    37a6:	82 81       	ldd	r24, Z+2	; 0x02
    37a8:	93 81       	ldd	r25, Z+3	; 0x03
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	3f ef       	ldi	r19, 0xFF	; 255
    37ae:	4f e7       	ldi	r20, 0x7F	; 127
    37b0:	57 e4       	ldi	r21, 0x47	; 71
    37b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37b6:	18 16       	cp	r1, r24
    37b8:	0c f0       	brlt	.+2      	; 0x37bc <wifi_connect+0x678>
    37ba:	43 c0       	rjmp	.+134    	; 0x3842 <wifi_connect+0x6fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37bc:	fe 01       	movw	r30, r28
    37be:	ed 54       	subi	r30, 0x4D	; 77
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	60 81       	ld	r22, Z
    37c4:	71 81       	ldd	r23, Z+1	; 0x01
    37c6:	82 81       	ldd	r24, Z+2	; 0x02
    37c8:	93 81       	ldd	r25, Z+3	; 0x03
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	40 e2       	ldi	r20, 0x20	; 32
    37d0:	51 e4       	ldi	r21, 0x41	; 65
    37d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	8e 01       	movw	r16, r28
    37dc:	03 55       	subi	r16, 0x53	; 83
    37de:	1f 4f       	sbci	r17, 0xFF	; 255
    37e0:	bc 01       	movw	r22, r24
    37e2:	cd 01       	movw	r24, r26
    37e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	f8 01       	movw	r30, r16
    37ee:	91 83       	std	Z+1, r25	; 0x01
    37f0:	80 83       	st	Z, r24
    37f2:	1f c0       	rjmp	.+62     	; 0x3832 <wifi_connect+0x6ee>
    37f4:	fe 01       	movw	r30, r28
    37f6:	e5 55       	subi	r30, 0x55	; 85
    37f8:	ff 4f       	sbci	r31, 0xFF	; 255
    37fa:	80 e9       	ldi	r24, 0x90	; 144
    37fc:	91 e0       	ldi	r25, 0x01	; 1
    37fe:	91 83       	std	Z+1, r25	; 0x01
    3800:	80 83       	st	Z, r24
    3802:	fe 01       	movw	r30, r28
    3804:	e5 55       	subi	r30, 0x55	; 85
    3806:	ff 4f       	sbci	r31, 0xFF	; 255
    3808:	80 81       	ld	r24, Z
    380a:	91 81       	ldd	r25, Z+1	; 0x01
    380c:	01 97       	sbiw	r24, 0x01	; 1
    380e:	f1 f7       	brne	.-4      	; 0x380c <wifi_connect+0x6c8>
    3810:	fe 01       	movw	r30, r28
    3812:	e5 55       	subi	r30, 0x55	; 85
    3814:	ff 4f       	sbci	r31, 0xFF	; 255
    3816:	91 83       	std	Z+1, r25	; 0x01
    3818:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    381a:	de 01       	movw	r26, r28
    381c:	a3 55       	subi	r26, 0x53	; 83
    381e:	bf 4f       	sbci	r27, 0xFF	; 255
    3820:	fe 01       	movw	r30, r28
    3822:	e3 55       	subi	r30, 0x53	; 83
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	80 81       	ld	r24, Z
    3828:	91 81       	ldd	r25, Z+1	; 0x01
    382a:	01 97       	sbiw	r24, 0x01	; 1
    382c:	11 96       	adiw	r26, 0x01	; 1
    382e:	9c 93       	st	X, r25
    3830:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3832:	fe 01       	movw	r30, r28
    3834:	e3 55       	subi	r30, 0x53	; 83
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	80 81       	ld	r24, Z
    383a:	91 81       	ldd	r25, Z+1	; 0x01
    383c:	00 97       	sbiw	r24, 0x00	; 0
    383e:	d1 f6       	brne	.-76     	; 0x37f4 <wifi_connect+0x6b0>
    3840:	27 c0       	rjmp	.+78     	; 0x3890 <wifi_connect+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3842:	8e 01       	movw	r16, r28
    3844:	03 55       	subi	r16, 0x53	; 83
    3846:	1f 4f       	sbci	r17, 0xFF	; 255
    3848:	fe 01       	movw	r30, r28
    384a:	e1 55       	subi	r30, 0x51	; 81
    384c:	ff 4f       	sbci	r31, 0xFF	; 255
    384e:	60 81       	ld	r22, Z
    3850:	71 81       	ldd	r23, Z+1	; 0x01
    3852:	82 81       	ldd	r24, Z+2	; 0x02
    3854:	93 81       	ldd	r25, Z+3	; 0x03
    3856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385a:	dc 01       	movw	r26, r24
    385c:	cb 01       	movw	r24, r22
    385e:	f8 01       	movw	r30, r16
    3860:	91 83       	std	Z+1, r25	; 0x01
    3862:	80 83       	st	Z, r24
    3864:	de 01       	movw	r26, r28
    3866:	a7 55       	subi	r26, 0x57	; 87
    3868:	bf 4f       	sbci	r27, 0xFF	; 255
    386a:	fe 01       	movw	r30, r28
    386c:	e3 55       	subi	r30, 0x53	; 83
    386e:	ff 4f       	sbci	r31, 0xFF	; 255
    3870:	80 81       	ld	r24, Z
    3872:	91 81       	ldd	r25, Z+1	; 0x01
    3874:	8d 93       	st	X+, r24
    3876:	9c 93       	st	X, r25
    3878:	fe 01       	movw	r30, r28
    387a:	e7 55       	subi	r30, 0x57	; 87
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	80 81       	ld	r24, Z
    3880:	91 81       	ldd	r25, Z+1	; 0x01
    3882:	01 97       	sbiw	r24, 0x01	; 1
    3884:	f1 f7       	brne	.-4      	; 0x3882 <wifi_connect+0x73e>
    3886:	fe 01       	movw	r30, r28
    3888:	e7 55       	subi	r30, 0x57	; 87
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	91 83       	std	Z+1, r25	; 0x01
    388e:	80 83       	st	Z, r24
	_delay_ms(1000);
	Check_Wifi_Respones("OK", "AT+CWMODE_ERROR");
    3890:	87 e6       	ldi	r24, 0x67	; 103
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	21 e8       	ldi	r18, 0x81	; 129
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	b9 01       	movw	r22, r18
    389a:	0e 94 bc 23 	call	0x4778	; 0x4778 <Check_Wifi_Respones>
    389e:	fe 01       	movw	r30, r28
    38a0:	eb 55       	subi	r30, 0x5B	; 91
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	aa e7       	ldi	r26, 0x7A	; 122
    38aa:	b4 e4       	ldi	r27, 0x44	; 68
    38ac:	80 83       	st	Z, r24
    38ae:	91 83       	std	Z+1, r25	; 0x01
    38b0:	a2 83       	std	Z+2, r26	; 0x02
    38b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b4:	8e 01       	movw	r16, r28
    38b6:	0f 55       	subi	r16, 0x5F	; 95
    38b8:	1f 4f       	sbci	r17, 0xFF	; 255
    38ba:	fe 01       	movw	r30, r28
    38bc:	eb 55       	subi	r30, 0x5B	; 91
    38be:	ff 4f       	sbci	r31, 0xFF	; 255
    38c0:	60 81       	ld	r22, Z
    38c2:	71 81       	ldd	r23, Z+1	; 0x01
    38c4:	82 81       	ldd	r24, Z+2	; 0x02
    38c6:	93 81       	ldd	r25, Z+3	; 0x03
    38c8:	20 e0       	ldi	r18, 0x00	; 0
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	4a e7       	ldi	r20, 0x7A	; 122
    38ce:	55 e4       	ldi	r21, 0x45	; 69
    38d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	f8 01       	movw	r30, r16
    38da:	80 83       	st	Z, r24
    38dc:	91 83       	std	Z+1, r25	; 0x01
    38de:	a2 83       	std	Z+2, r26	; 0x02
    38e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38e2:	fe 01       	movw	r30, r28
    38e4:	ef 55       	subi	r30, 0x5F	; 95
    38e6:	ff 4f       	sbci	r31, 0xFF	; 255
    38e8:	60 81       	ld	r22, Z
    38ea:	71 81       	ldd	r23, Z+1	; 0x01
    38ec:	82 81       	ldd	r24, Z+2	; 0x02
    38ee:	93 81       	ldd	r25, Z+3	; 0x03
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	40 e8       	ldi	r20, 0x80	; 128
    38f6:	5f e3       	ldi	r21, 0x3F	; 63
    38f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38fc:	88 23       	and	r24, r24
    38fe:	44 f4       	brge	.+16     	; 0x3910 <wifi_connect+0x7cc>
		__ticks = 1;
    3900:	fe 01       	movw	r30, r28
    3902:	e1 56       	subi	r30, 0x61	; 97
    3904:	ff 4f       	sbci	r31, 0xFF	; 255
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	91 83       	std	Z+1, r25	; 0x01
    390c:	80 83       	st	Z, r24
    390e:	64 c0       	rjmp	.+200    	; 0x39d8 <wifi_connect+0x894>
	else if (__tmp > 65535)
    3910:	fe 01       	movw	r30, r28
    3912:	ef 55       	subi	r30, 0x5F	; 95
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	60 81       	ld	r22, Z
    3918:	71 81       	ldd	r23, Z+1	; 0x01
    391a:	82 81       	ldd	r24, Z+2	; 0x02
    391c:	93 81       	ldd	r25, Z+3	; 0x03
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	3f ef       	ldi	r19, 0xFF	; 255
    3922:	4f e7       	ldi	r20, 0x7F	; 127
    3924:	57 e4       	ldi	r21, 0x47	; 71
    3926:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    392a:	18 16       	cp	r1, r24
    392c:	0c f0       	brlt	.+2      	; 0x3930 <wifi_connect+0x7ec>
    392e:	43 c0       	rjmp	.+134    	; 0x39b6 <wifi_connect+0x872>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3930:	fe 01       	movw	r30, r28
    3932:	eb 55       	subi	r30, 0x5B	; 91
    3934:	ff 4f       	sbci	r31, 0xFF	; 255
    3936:	60 81       	ld	r22, Z
    3938:	71 81       	ldd	r23, Z+1	; 0x01
    393a:	82 81       	ldd	r24, Z+2	; 0x02
    393c:	93 81       	ldd	r25, Z+3	; 0x03
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	40 e2       	ldi	r20, 0x20	; 32
    3944:	51 e4       	ldi	r21, 0x41	; 65
    3946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	8e 01       	movw	r16, r28
    3950:	01 56       	subi	r16, 0x61	; 97
    3952:	1f 4f       	sbci	r17, 0xFF	; 255
    3954:	bc 01       	movw	r22, r24
    3956:	cd 01       	movw	r24, r26
    3958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	f8 01       	movw	r30, r16
    3962:	91 83       	std	Z+1, r25	; 0x01
    3964:	80 83       	st	Z, r24
    3966:	1f c0       	rjmp	.+62     	; 0x39a6 <wifi_connect+0x862>
    3968:	fe 01       	movw	r30, r28
    396a:	e3 56       	subi	r30, 0x63	; 99
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	80 e9       	ldi	r24, 0x90	; 144
    3970:	91 e0       	ldi	r25, 0x01	; 1
    3972:	91 83       	std	Z+1, r25	; 0x01
    3974:	80 83       	st	Z, r24
    3976:	fe 01       	movw	r30, r28
    3978:	e3 56       	subi	r30, 0x63	; 99
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	80 81       	ld	r24, Z
    397e:	91 81       	ldd	r25, Z+1	; 0x01
    3980:	01 97       	sbiw	r24, 0x01	; 1
    3982:	f1 f7       	brne	.-4      	; 0x3980 <wifi_connect+0x83c>
    3984:	fe 01       	movw	r30, r28
    3986:	e3 56       	subi	r30, 0x63	; 99
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	91 83       	std	Z+1, r25	; 0x01
    398c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    398e:	de 01       	movw	r26, r28
    3990:	a1 56       	subi	r26, 0x61	; 97
    3992:	bf 4f       	sbci	r27, 0xFF	; 255
    3994:	fe 01       	movw	r30, r28
    3996:	e1 56       	subi	r30, 0x61	; 97
    3998:	ff 4f       	sbci	r31, 0xFF	; 255
    399a:	80 81       	ld	r24, Z
    399c:	91 81       	ldd	r25, Z+1	; 0x01
    399e:	01 97       	sbiw	r24, 0x01	; 1
    39a0:	11 96       	adiw	r26, 0x01	; 1
    39a2:	9c 93       	st	X, r25
    39a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39a6:	fe 01       	movw	r30, r28
    39a8:	e1 56       	subi	r30, 0x61	; 97
    39aa:	ff 4f       	sbci	r31, 0xFF	; 255
    39ac:	80 81       	ld	r24, Z
    39ae:	91 81       	ldd	r25, Z+1	; 0x01
    39b0:	00 97       	sbiw	r24, 0x00	; 0
    39b2:	d1 f6       	brne	.-76     	; 0x3968 <wifi_connect+0x824>
    39b4:	27 c0       	rjmp	.+78     	; 0x3a04 <wifi_connect+0x8c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b6:	8e 01       	movw	r16, r28
    39b8:	01 56       	subi	r16, 0x61	; 97
    39ba:	1f 4f       	sbci	r17, 0xFF	; 255
    39bc:	fe 01       	movw	r30, r28
    39be:	ef 55       	subi	r30, 0x5F	; 95
    39c0:	ff 4f       	sbci	r31, 0xFF	; 255
    39c2:	60 81       	ld	r22, Z
    39c4:	71 81       	ldd	r23, Z+1	; 0x01
    39c6:	82 81       	ldd	r24, Z+2	; 0x02
    39c8:	93 81       	ldd	r25, Z+3	; 0x03
    39ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	f8 01       	movw	r30, r16
    39d4:	91 83       	std	Z+1, r25	; 0x01
    39d6:	80 83       	st	Z, r24
    39d8:	de 01       	movw	r26, r28
    39da:	a5 56       	subi	r26, 0x65	; 101
    39dc:	bf 4f       	sbci	r27, 0xFF	; 255
    39de:	fe 01       	movw	r30, r28
    39e0:	e1 56       	subi	r30, 0x61	; 97
    39e2:	ff 4f       	sbci	r31, 0xFF	; 255
    39e4:	80 81       	ld	r24, Z
    39e6:	91 81       	ldd	r25, Z+1	; 0x01
    39e8:	8d 93       	st	X+, r24
    39ea:	9c 93       	st	X, r25
    39ec:	fe 01       	movw	r30, r28
    39ee:	e5 56       	subi	r30, 0x65	; 101
    39f0:	ff 4f       	sbci	r31, 0xFF	; 255
    39f2:	80 81       	ld	r24, Z
    39f4:	91 81       	ldd	r25, Z+1	; 0x01
    39f6:	01 97       	sbiw	r24, 0x01	; 1
    39f8:	f1 f7       	brne	.-4      	; 0x39f6 <wifi_connect+0x8b2>
    39fa:	fe 01       	movw	r30, r28
    39fc:	e5 56       	subi	r30, 0x65	; 101
    39fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3a00:	91 83       	std	Z+1, r25	; 0x01
    3a02:	80 83       	st	Z, r24
	_delay_ms(1000);
	H_LCD_void_Clear_Display();
    3a04:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <H_LCD_void_Clear_Display>
    3a08:	fe 01       	movw	r30, r28
    3a0a:	e9 56       	subi	r30, 0x69	; 105
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	a8 e4       	ldi	r26, 0x48	; 72
    3a14:	b3 e4       	ldi	r27, 0x43	; 67
    3a16:	80 83       	st	Z, r24
    3a18:	91 83       	std	Z+1, r25	; 0x01
    3a1a:	a2 83       	std	Z+2, r26	; 0x02
    3a1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a1e:	8e 01       	movw	r16, r28
    3a20:	0d 56       	subi	r16, 0x6D	; 109
    3a22:	1f 4f       	sbci	r17, 0xFF	; 255
    3a24:	fe 01       	movw	r30, r28
    3a26:	e9 56       	subi	r30, 0x69	; 105
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	60 81       	ld	r22, Z
    3a2c:	71 81       	ldd	r23, Z+1	; 0x01
    3a2e:	82 81       	ldd	r24, Z+2	; 0x02
    3a30:	93 81       	ldd	r25, Z+3	; 0x03
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	4a e7       	ldi	r20, 0x7A	; 122
    3a38:	55 e4       	ldi	r21, 0x45	; 69
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	f8 01       	movw	r30, r16
    3a44:	80 83       	st	Z, r24
    3a46:	91 83       	std	Z+1, r25	; 0x01
    3a48:	a2 83       	std	Z+2, r26	; 0x02
    3a4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a4c:	fe 01       	movw	r30, r28
    3a4e:	ed 56       	subi	r30, 0x6D	; 109
    3a50:	ff 4f       	sbci	r31, 0xFF	; 255
    3a52:	60 81       	ld	r22, Z
    3a54:	71 81       	ldd	r23, Z+1	; 0x01
    3a56:	82 81       	ldd	r24, Z+2	; 0x02
    3a58:	93 81       	ldd	r25, Z+3	; 0x03
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	40 e8       	ldi	r20, 0x80	; 128
    3a60:	5f e3       	ldi	r21, 0x3F	; 63
    3a62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a66:	88 23       	and	r24, r24
    3a68:	44 f4       	brge	.+16     	; 0x3a7a <wifi_connect+0x936>
		__ticks = 1;
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	ef 56       	subi	r30, 0x6F	; 111
    3a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	91 83       	std	Z+1, r25	; 0x01
    3a76:	80 83       	st	Z, r24
    3a78:	64 c0       	rjmp	.+200    	; 0x3b42 <wifi_connect+0x9fe>
	else if (__tmp > 65535)
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	ed 56       	subi	r30, 0x6D	; 109
    3a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a80:	60 81       	ld	r22, Z
    3a82:	71 81       	ldd	r23, Z+1	; 0x01
    3a84:	82 81       	ldd	r24, Z+2	; 0x02
    3a86:	93 81       	ldd	r25, Z+3	; 0x03
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	3f ef       	ldi	r19, 0xFF	; 255
    3a8c:	4f e7       	ldi	r20, 0x7F	; 127
    3a8e:	57 e4       	ldi	r21, 0x47	; 71
    3a90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a94:	18 16       	cp	r1, r24
    3a96:	0c f0       	brlt	.+2      	; 0x3a9a <wifi_connect+0x956>
    3a98:	43 c0       	rjmp	.+134    	; 0x3b20 <wifi_connect+0x9dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e9 56       	subi	r30, 0x69	; 105
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	60 81       	ld	r22, Z
    3aa2:	71 81       	ldd	r23, Z+1	; 0x01
    3aa4:	82 81       	ldd	r24, Z+2	; 0x02
    3aa6:	93 81       	ldd	r25, Z+3	; 0x03
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	40 e2       	ldi	r20, 0x20	; 32
    3aae:	51 e4       	ldi	r21, 0x41	; 65
    3ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	8e 01       	movw	r16, r28
    3aba:	0f 56       	subi	r16, 0x6F	; 111
    3abc:	1f 4f       	sbci	r17, 0xFF	; 255
    3abe:	bc 01       	movw	r22, r24
    3ac0:	cd 01       	movw	r24, r26
    3ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	f8 01       	movw	r30, r16
    3acc:	91 83       	std	Z+1, r25	; 0x01
    3ace:	80 83       	st	Z, r24
    3ad0:	1f c0       	rjmp	.+62     	; 0x3b10 <wifi_connect+0x9cc>
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	e1 57       	subi	r30, 0x71	; 113
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	80 e9       	ldi	r24, 0x90	; 144
    3ada:	91 e0       	ldi	r25, 0x01	; 1
    3adc:	91 83       	std	Z+1, r25	; 0x01
    3ade:	80 83       	st	Z, r24
    3ae0:	fe 01       	movw	r30, r28
    3ae2:	e1 57       	subi	r30, 0x71	; 113
    3ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae6:	80 81       	ld	r24, Z
    3ae8:	91 81       	ldd	r25, Z+1	; 0x01
    3aea:	01 97       	sbiw	r24, 0x01	; 1
    3aec:	f1 f7       	brne	.-4      	; 0x3aea <wifi_connect+0x9a6>
    3aee:	fe 01       	movw	r30, r28
    3af0:	e1 57       	subi	r30, 0x71	; 113
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	91 83       	std	Z+1, r25	; 0x01
    3af6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af8:	de 01       	movw	r26, r28
    3afa:	af 56       	subi	r26, 0x6F	; 111
    3afc:	bf 4f       	sbci	r27, 0xFF	; 255
    3afe:	fe 01       	movw	r30, r28
    3b00:	ef 56       	subi	r30, 0x6F	; 111
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	80 81       	ld	r24, Z
    3b06:	91 81       	ldd	r25, Z+1	; 0x01
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	11 96       	adiw	r26, 0x01	; 1
    3b0c:	9c 93       	st	X, r25
    3b0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b10:	fe 01       	movw	r30, r28
    3b12:	ef 56       	subi	r30, 0x6F	; 111
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	80 81       	ld	r24, Z
    3b18:	91 81       	ldd	r25, Z+1	; 0x01
    3b1a:	00 97       	sbiw	r24, 0x00	; 0
    3b1c:	d1 f6       	brne	.-76     	; 0x3ad2 <wifi_connect+0x98e>
    3b1e:	27 c0       	rjmp	.+78     	; 0x3b6e <wifi_connect+0xa2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b20:	8e 01       	movw	r16, r28
    3b22:	0f 56       	subi	r16, 0x6F	; 111
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    3b26:	fe 01       	movw	r30, r28
    3b28:	ed 56       	subi	r30, 0x6D	; 109
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	60 81       	ld	r22, Z
    3b2e:	71 81       	ldd	r23, Z+1	; 0x01
    3b30:	82 81       	ldd	r24, Z+2	; 0x02
    3b32:	93 81       	ldd	r25, Z+3	; 0x03
    3b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	f8 01       	movw	r30, r16
    3b3e:	91 83       	std	Z+1, r25	; 0x01
    3b40:	80 83       	st	Z, r24
    3b42:	de 01       	movw	r26, r28
    3b44:	a3 57       	subi	r26, 0x73	; 115
    3b46:	bf 4f       	sbci	r27, 0xFF	; 255
    3b48:	fe 01       	movw	r30, r28
    3b4a:	ef 56       	subi	r30, 0x6F	; 111
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	80 81       	ld	r24, Z
    3b50:	91 81       	ldd	r25, Z+1	; 0x01
    3b52:	8d 93       	st	X+, r24
    3b54:	9c 93       	st	X, r25
    3b56:	fe 01       	movw	r30, r28
    3b58:	e3 57       	subi	r30, 0x73	; 115
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	80 81       	ld	r24, Z
    3b5e:	91 81       	ldd	r25, Z+1	; 0x01
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	f1 f7       	brne	.-4      	; 0x3b60 <wifi_connect+0xa1c>
    3b64:	fe 01       	movw	r30, r28
    3b66:	e3 57       	subi	r30, 0x73	; 115
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	80 83       	st	Z, r24
	_delay_ms(200);
	Wifi_Buffer_Reset();
    3b6e:	0e 94 11 26 	call	0x4c22	; 0x4c22 <Wifi_Buffer_Reset>
	H_LCD_void_sendData('3');
    3b72:	83 e3       	ldi	r24, 0x33	; 51
    3b74:	0e 94 1e 2a 	call	0x543c	; 0x543c <H_LCD_void_sendData>
    3b78:	fe 01       	movw	r30, r28
    3b7a:	e7 57       	subi	r30, 0x77	; 119
    3b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	aa e7       	ldi	r26, 0x7A	; 122
    3b84:	b4 e4       	ldi	r27, 0x44	; 68
    3b86:	80 83       	st	Z, r24
    3b88:	91 83       	std	Z+1, r25	; 0x01
    3b8a:	a2 83       	std	Z+2, r26	; 0x02
    3b8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b8e:	8e 01       	movw	r16, r28
    3b90:	0b 57       	subi	r16, 0x7B	; 123
    3b92:	1f 4f       	sbci	r17, 0xFF	; 255
    3b94:	fe 01       	movw	r30, r28
    3b96:	e7 57       	subi	r30, 0x77	; 119
    3b98:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9a:	60 81       	ld	r22, Z
    3b9c:	71 81       	ldd	r23, Z+1	; 0x01
    3b9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ba0:	93 81       	ldd	r25, Z+3	; 0x03
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	4a e7       	ldi	r20, 0x7A	; 122
    3ba8:	55 e4       	ldi	r21, 0x45	; 69
    3baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	f8 01       	movw	r30, r16
    3bb4:	80 83       	st	Z, r24
    3bb6:	91 83       	std	Z+1, r25	; 0x01
    3bb8:	a2 83       	std	Z+2, r26	; 0x02
    3bba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	eb 57       	subi	r30, 0x7B	; 123
    3bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc2:	60 81       	ld	r22, Z
    3bc4:	71 81       	ldd	r23, Z+1	; 0x01
    3bc6:	82 81       	ldd	r24, Z+2	; 0x02
    3bc8:	93 81       	ldd	r25, Z+3	; 0x03
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e8       	ldi	r20, 0x80	; 128
    3bd0:	5f e3       	ldi	r21, 0x3F	; 63
    3bd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bd6:	88 23       	and	r24, r24
    3bd8:	44 f4       	brge	.+16     	; 0x3bea <wifi_connect+0xaa6>
		__ticks = 1;
    3bda:	fe 01       	movw	r30, r28
    3bdc:	ed 57       	subi	r30, 0x7D	; 125
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	91 83       	std	Z+1, r25	; 0x01
    3be6:	80 83       	st	Z, r24
    3be8:	64 c0       	rjmp	.+200    	; 0x3cb2 <wifi_connect+0xb6e>
	else if (__tmp > 65535)
    3bea:	fe 01       	movw	r30, r28
    3bec:	eb 57       	subi	r30, 0x7B	; 123
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	60 81       	ld	r22, Z
    3bf2:	71 81       	ldd	r23, Z+1	; 0x01
    3bf4:	82 81       	ldd	r24, Z+2	; 0x02
    3bf6:	93 81       	ldd	r25, Z+3	; 0x03
    3bf8:	20 e0       	ldi	r18, 0x00	; 0
    3bfa:	3f ef       	ldi	r19, 0xFF	; 255
    3bfc:	4f e7       	ldi	r20, 0x7F	; 127
    3bfe:	57 e4       	ldi	r21, 0x47	; 71
    3c00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c04:	18 16       	cp	r1, r24
    3c06:	0c f0       	brlt	.+2      	; 0x3c0a <wifi_connect+0xac6>
    3c08:	43 c0       	rjmp	.+134    	; 0x3c90 <wifi_connect+0xb4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	e7 57       	subi	r30, 0x77	; 119
    3c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c10:	60 81       	ld	r22, Z
    3c12:	71 81       	ldd	r23, Z+1	; 0x01
    3c14:	82 81       	ldd	r24, Z+2	; 0x02
    3c16:	93 81       	ldd	r25, Z+3	; 0x03
    3c18:	20 e0       	ldi	r18, 0x00	; 0
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	40 e2       	ldi	r20, 0x20	; 32
    3c1e:	51 e4       	ldi	r21, 0x41	; 65
    3c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	8e 01       	movw	r16, r28
    3c2a:	0d 57       	subi	r16, 0x7D	; 125
    3c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c2e:	bc 01       	movw	r22, r24
    3c30:	cd 01       	movw	r24, r26
    3c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c36:	dc 01       	movw	r26, r24
    3c38:	cb 01       	movw	r24, r22
    3c3a:	f8 01       	movw	r30, r16
    3c3c:	91 83       	std	Z+1, r25	; 0x01
    3c3e:	80 83       	st	Z, r24
    3c40:	1f c0       	rjmp	.+62     	; 0x3c80 <wifi_connect+0xb3c>
    3c42:	fe 01       	movw	r30, r28
    3c44:	ef 57       	subi	r30, 0x7F	; 127
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	80 e9       	ldi	r24, 0x90	; 144
    3c4a:	91 e0       	ldi	r25, 0x01	; 1
    3c4c:	91 83       	std	Z+1, r25	; 0x01
    3c4e:	80 83       	st	Z, r24
    3c50:	fe 01       	movw	r30, r28
    3c52:	ef 57       	subi	r30, 0x7F	; 127
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	80 81       	ld	r24, Z
    3c58:	91 81       	ldd	r25, Z+1	; 0x01
    3c5a:	01 97       	sbiw	r24, 0x01	; 1
    3c5c:	f1 f7       	brne	.-4      	; 0x3c5a <wifi_connect+0xb16>
    3c5e:	fe 01       	movw	r30, r28
    3c60:	ef 57       	subi	r30, 0x7F	; 127
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	91 83       	std	Z+1, r25	; 0x01
    3c66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c68:	de 01       	movw	r26, r28
    3c6a:	ad 57       	subi	r26, 0x7D	; 125
    3c6c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c6e:	fe 01       	movw	r30, r28
    3c70:	ed 57       	subi	r30, 0x7D	; 125
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	80 81       	ld	r24, Z
    3c76:	91 81       	ldd	r25, Z+1	; 0x01
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	11 96       	adiw	r26, 0x01	; 1
    3c7c:	9c 93       	st	X, r25
    3c7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c80:	fe 01       	movw	r30, r28
    3c82:	ed 57       	subi	r30, 0x7D	; 125
    3c84:	ff 4f       	sbci	r31, 0xFF	; 255
    3c86:	80 81       	ld	r24, Z
    3c88:	91 81       	ldd	r25, Z+1	; 0x01
    3c8a:	00 97       	sbiw	r24, 0x00	; 0
    3c8c:	d1 f6       	brne	.-76     	; 0x3c42 <wifi_connect+0xafe>
    3c8e:	27 c0       	rjmp	.+78     	; 0x3cde <wifi_connect+0xb9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c90:	8e 01       	movw	r16, r28
    3c92:	0d 57       	subi	r16, 0x7D	; 125
    3c94:	1f 4f       	sbci	r17, 0xFF	; 255
    3c96:	fe 01       	movw	r30, r28
    3c98:	eb 57       	subi	r30, 0x7B	; 123
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	60 81       	ld	r22, Z
    3c9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ca0:	82 81       	ldd	r24, Z+2	; 0x02
    3ca2:	93 81       	ldd	r25, Z+3	; 0x03
    3ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	f8 01       	movw	r30, r16
    3cae:	91 83       	std	Z+1, r25	; 0x01
    3cb0:	80 83       	st	Z, r24
    3cb2:	de 01       	movw	r26, r28
    3cb4:	a1 58       	subi	r26, 0x81	; 129
    3cb6:	bf 4f       	sbci	r27, 0xFF	; 255
    3cb8:	fe 01       	movw	r30, r28
    3cba:	ed 57       	subi	r30, 0x7D	; 125
    3cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbe:	80 81       	ld	r24, Z
    3cc0:	91 81       	ldd	r25, Z+1	; 0x01
    3cc2:	8d 93       	st	X+, r24
    3cc4:	9c 93       	st	X, r25
    3cc6:	fe 01       	movw	r30, r28
    3cc8:	e1 58       	subi	r30, 0x81	; 129
    3cca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ccc:	80 81       	ld	r24, Z
    3cce:	91 81       	ldd	r25, Z+1	; 0x01
    3cd0:	01 97       	sbiw	r24, 0x01	; 1
    3cd2:	f1 f7       	brne	.-4      	; 0x3cd0 <wifi_connect+0xb8c>
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	e1 58       	subi	r30, 0x81	; 129
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	91 83       	std	Z+1, r25	; 0x01
    3cdc:	80 83       	st	Z, r24
	_delay_ms(1000);
	
	//"Fiber\",\"P@ssw0rd@MCIT\
	// "ahmed57\",\"asd52479955\
	/* Connect to wifi */
	UART_sendString("AT+CWJAP=\"WEF0DBF1\",\"kb143360\"\r\n");
    3cde:	81 e9       	ldi	r24, 0x91	; 145
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	0e 94 66 07 	call	0xecc	; 0xecc <UART_sendString>
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	e5 58       	subi	r30, 0x85	; 133
    3cea:	ff 4f       	sbci	r31, 0xFF	; 255
    3cec:	80 e0       	ldi	r24, 0x00	; 0
    3cee:	90 e8       	ldi	r25, 0x80	; 128
    3cf0:	ab e3       	ldi	r26, 0x3B	; 59
    3cf2:	b5 e4       	ldi	r27, 0x45	; 69
    3cf4:	80 83       	st	Z, r24
    3cf6:	91 83       	std	Z+1, r25	; 0x01
    3cf8:	a2 83       	std	Z+2, r26	; 0x02
    3cfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cfc:	8e 01       	movw	r16, r28
    3cfe:	09 58       	subi	r16, 0x89	; 137
    3d00:	1f 4f       	sbci	r17, 0xFF	; 255
    3d02:	fe 01       	movw	r30, r28
    3d04:	e5 58       	subi	r30, 0x85	; 133
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	60 81       	ld	r22, Z
    3d0a:	71 81       	ldd	r23, Z+1	; 0x01
    3d0c:	82 81       	ldd	r24, Z+2	; 0x02
    3d0e:	93 81       	ldd	r25, Z+3	; 0x03
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	4a e7       	ldi	r20, 0x7A	; 122
    3d16:	55 e4       	ldi	r21, 0x45	; 69
    3d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d1c:	dc 01       	movw	r26, r24
    3d1e:	cb 01       	movw	r24, r22
    3d20:	f8 01       	movw	r30, r16
    3d22:	80 83       	st	Z, r24
    3d24:	91 83       	std	Z+1, r25	; 0x01
    3d26:	a2 83       	std	Z+2, r26	; 0x02
    3d28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	e9 58       	subi	r30, 0x89	; 137
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	60 81       	ld	r22, Z
    3d32:	71 81       	ldd	r23, Z+1	; 0x01
    3d34:	82 81       	ldd	r24, Z+2	; 0x02
    3d36:	93 81       	ldd	r25, Z+3	; 0x03
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	40 e8       	ldi	r20, 0x80	; 128
    3d3e:	5f e3       	ldi	r21, 0x3F	; 63
    3d40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d44:	88 23       	and	r24, r24
    3d46:	44 f4       	brge	.+16     	; 0x3d58 <wifi_connect+0xc14>
		__ticks = 1;
    3d48:	fe 01       	movw	r30, r28
    3d4a:	eb 58       	subi	r30, 0x8B	; 139
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	91 83       	std	Z+1, r25	; 0x01
    3d54:	80 83       	st	Z, r24
    3d56:	64 c0       	rjmp	.+200    	; 0x3e20 <wifi_connect+0xcdc>
	else if (__tmp > 65535)
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e9 58       	subi	r30, 0x89	; 137
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	60 81       	ld	r22, Z
    3d60:	71 81       	ldd	r23, Z+1	; 0x01
    3d62:	82 81       	ldd	r24, Z+2	; 0x02
    3d64:	93 81       	ldd	r25, Z+3	; 0x03
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	3f ef       	ldi	r19, 0xFF	; 255
    3d6a:	4f e7       	ldi	r20, 0x7F	; 127
    3d6c:	57 e4       	ldi	r21, 0x47	; 71
    3d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d72:	18 16       	cp	r1, r24
    3d74:	0c f0       	brlt	.+2      	; 0x3d78 <wifi_connect+0xc34>
    3d76:	43 c0       	rjmp	.+134    	; 0x3dfe <wifi_connect+0xcba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d78:	fe 01       	movw	r30, r28
    3d7a:	e5 58       	subi	r30, 0x85	; 133
    3d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7e:	60 81       	ld	r22, Z
    3d80:	71 81       	ldd	r23, Z+1	; 0x01
    3d82:	82 81       	ldd	r24, Z+2	; 0x02
    3d84:	93 81       	ldd	r25, Z+3	; 0x03
    3d86:	20 e0       	ldi	r18, 0x00	; 0
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	40 e2       	ldi	r20, 0x20	; 32
    3d8c:	51 e4       	ldi	r21, 0x41	; 65
    3d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d92:	dc 01       	movw	r26, r24
    3d94:	cb 01       	movw	r24, r22
    3d96:	8e 01       	movw	r16, r28
    3d98:	0b 58       	subi	r16, 0x8B	; 139
    3d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d9c:	bc 01       	movw	r22, r24
    3d9e:	cd 01       	movw	r24, r26
    3da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	f8 01       	movw	r30, r16
    3daa:	91 83       	std	Z+1, r25	; 0x01
    3dac:	80 83       	st	Z, r24
    3dae:	1f c0       	rjmp	.+62     	; 0x3dee <wifi_connect+0xcaa>
    3db0:	fe 01       	movw	r30, r28
    3db2:	ed 58       	subi	r30, 0x8D	; 141
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	80 e9       	ldi	r24, 0x90	; 144
    3db8:	91 e0       	ldi	r25, 0x01	; 1
    3dba:	91 83       	std	Z+1, r25	; 0x01
    3dbc:	80 83       	st	Z, r24
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	ed 58       	subi	r30, 0x8D	; 141
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	80 81       	ld	r24, Z
    3dc6:	91 81       	ldd	r25, Z+1	; 0x01
    3dc8:	01 97       	sbiw	r24, 0x01	; 1
    3dca:	f1 f7       	brne	.-4      	; 0x3dc8 <wifi_connect+0xc84>
    3dcc:	fe 01       	movw	r30, r28
    3dce:	ed 58       	subi	r30, 0x8D	; 141
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	91 83       	std	Z+1, r25	; 0x01
    3dd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dd6:	de 01       	movw	r26, r28
    3dd8:	ab 58       	subi	r26, 0x8B	; 139
    3dda:	bf 4f       	sbci	r27, 0xFF	; 255
    3ddc:	fe 01       	movw	r30, r28
    3dde:	eb 58       	subi	r30, 0x8B	; 139
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	80 81       	ld	r24, Z
    3de4:	91 81       	ldd	r25, Z+1	; 0x01
    3de6:	01 97       	sbiw	r24, 0x01	; 1
    3de8:	11 96       	adiw	r26, 0x01	; 1
    3dea:	9c 93       	st	X, r25
    3dec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dee:	fe 01       	movw	r30, r28
    3df0:	eb 58       	subi	r30, 0x8B	; 139
    3df2:	ff 4f       	sbci	r31, 0xFF	; 255
    3df4:	80 81       	ld	r24, Z
    3df6:	91 81       	ldd	r25, Z+1	; 0x01
    3df8:	00 97       	sbiw	r24, 0x00	; 0
    3dfa:	d1 f6       	brne	.-76     	; 0x3db0 <wifi_connect+0xc6c>
    3dfc:	27 c0       	rjmp	.+78     	; 0x3e4c <wifi_connect+0xd08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dfe:	8e 01       	movw	r16, r28
    3e00:	0b 58       	subi	r16, 0x8B	; 139
    3e02:	1f 4f       	sbci	r17, 0xFF	; 255
    3e04:	fe 01       	movw	r30, r28
    3e06:	e9 58       	subi	r30, 0x89	; 137
    3e08:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0a:	60 81       	ld	r22, Z
    3e0c:	71 81       	ldd	r23, Z+1	; 0x01
    3e0e:	82 81       	ldd	r24, Z+2	; 0x02
    3e10:	93 81       	ldd	r25, Z+3	; 0x03
    3e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e16:	dc 01       	movw	r26, r24
    3e18:	cb 01       	movw	r24, r22
    3e1a:	f8 01       	movw	r30, r16
    3e1c:	91 83       	std	Z+1, r25	; 0x01
    3e1e:	80 83       	st	Z, r24
    3e20:	de 01       	movw	r26, r28
    3e22:	af 58       	subi	r26, 0x8F	; 143
    3e24:	bf 4f       	sbci	r27, 0xFF	; 255
    3e26:	fe 01       	movw	r30, r28
    3e28:	eb 58       	subi	r30, 0x8B	; 139
    3e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2c:	80 81       	ld	r24, Z
    3e2e:	91 81       	ldd	r25, Z+1	; 0x01
    3e30:	8d 93       	st	X+, r24
    3e32:	9c 93       	st	X, r25
    3e34:	fe 01       	movw	r30, r28
    3e36:	ef 58       	subi	r30, 0x8F	; 143
    3e38:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3a:	80 81       	ld	r24, Z
    3e3c:	91 81       	ldd	r25, Z+1	; 0x01
    3e3e:	01 97       	sbiw	r24, 0x01	; 1
    3e40:	f1 f7       	brne	.-4      	; 0x3e3e <wifi_connect+0xcfa>
    3e42:	fe 01       	movw	r30, r28
    3e44:	ef 58       	subi	r30, 0x8F	; 143
    3e46:	ff 4f       	sbci	r31, 0xFF	; 255
    3e48:	91 83       	std	Z+1, r25	; 0x01
    3e4a:	80 83       	st	Z, r24
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	e3 59       	subi	r30, 0x93	; 147
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	90 e8       	ldi	r25, 0x80	; 128
    3e56:	ab e3       	ldi	r26, 0x3B	; 59
    3e58:	b5 e4       	ldi	r27, 0x45	; 69
    3e5a:	80 83       	st	Z, r24
    3e5c:	91 83       	std	Z+1, r25	; 0x01
    3e5e:	a2 83       	std	Z+2, r26	; 0x02
    3e60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e62:	8e 01       	movw	r16, r28
    3e64:	07 59       	subi	r16, 0x97	; 151
    3e66:	1f 4f       	sbci	r17, 0xFF	; 255
    3e68:	fe 01       	movw	r30, r28
    3e6a:	e3 59       	subi	r30, 0x93	; 147
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	60 81       	ld	r22, Z
    3e70:	71 81       	ldd	r23, Z+1	; 0x01
    3e72:	82 81       	ldd	r24, Z+2	; 0x02
    3e74:	93 81       	ldd	r25, Z+3	; 0x03
    3e76:	20 e0       	ldi	r18, 0x00	; 0
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	4a e7       	ldi	r20, 0x7A	; 122
    3e7c:	55 e4       	ldi	r21, 0x45	; 69
    3e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e82:	dc 01       	movw	r26, r24
    3e84:	cb 01       	movw	r24, r22
    3e86:	f8 01       	movw	r30, r16
    3e88:	80 83       	st	Z, r24
    3e8a:	91 83       	std	Z+1, r25	; 0x01
    3e8c:	a2 83       	std	Z+2, r26	; 0x02
    3e8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e90:	fe 01       	movw	r30, r28
    3e92:	e7 59       	subi	r30, 0x97	; 151
    3e94:	ff 4f       	sbci	r31, 0xFF	; 255
    3e96:	60 81       	ld	r22, Z
    3e98:	71 81       	ldd	r23, Z+1	; 0x01
    3e9a:	82 81       	ldd	r24, Z+2	; 0x02
    3e9c:	93 81       	ldd	r25, Z+3	; 0x03
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	40 e8       	ldi	r20, 0x80	; 128
    3ea4:	5f e3       	ldi	r21, 0x3F	; 63
    3ea6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3eaa:	88 23       	and	r24, r24
    3eac:	44 f4       	brge	.+16     	; 0x3ebe <wifi_connect+0xd7a>
		__ticks = 1;
    3eae:	fe 01       	movw	r30, r28
    3eb0:	e9 59       	subi	r30, 0x99	; 153
    3eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	91 83       	std	Z+1, r25	; 0x01
    3eba:	80 83       	st	Z, r24
    3ebc:	64 c0       	rjmp	.+200    	; 0x3f86 <wifi_connect+0xe42>
	else if (__tmp > 65535)
    3ebe:	fe 01       	movw	r30, r28
    3ec0:	e7 59       	subi	r30, 0x97	; 151
    3ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec4:	60 81       	ld	r22, Z
    3ec6:	71 81       	ldd	r23, Z+1	; 0x01
    3ec8:	82 81       	ldd	r24, Z+2	; 0x02
    3eca:	93 81       	ldd	r25, Z+3	; 0x03
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	3f ef       	ldi	r19, 0xFF	; 255
    3ed0:	4f e7       	ldi	r20, 0x7F	; 127
    3ed2:	57 e4       	ldi	r21, 0x47	; 71
    3ed4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ed8:	18 16       	cp	r1, r24
    3eda:	0c f0       	brlt	.+2      	; 0x3ede <wifi_connect+0xd9a>
    3edc:	43 c0       	rjmp	.+134    	; 0x3f64 <wifi_connect+0xe20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ede:	fe 01       	movw	r30, r28
    3ee0:	e3 59       	subi	r30, 0x93	; 147
    3ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee4:	60 81       	ld	r22, Z
    3ee6:	71 81       	ldd	r23, Z+1	; 0x01
    3ee8:	82 81       	ldd	r24, Z+2	; 0x02
    3eea:	93 81       	ldd	r25, Z+3	; 0x03
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	40 e2       	ldi	r20, 0x20	; 32
    3ef2:	51 e4       	ldi	r21, 0x41	; 65
    3ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	8e 01       	movw	r16, r28
    3efe:	09 59       	subi	r16, 0x99	; 153
    3f00:	1f 4f       	sbci	r17, 0xFF	; 255
    3f02:	bc 01       	movw	r22, r24
    3f04:	cd 01       	movw	r24, r26
    3f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	cb 01       	movw	r24, r22
    3f0e:	f8 01       	movw	r30, r16
    3f10:	91 83       	std	Z+1, r25	; 0x01
    3f12:	80 83       	st	Z, r24
    3f14:	1f c0       	rjmp	.+62     	; 0x3f54 <wifi_connect+0xe10>
    3f16:	fe 01       	movw	r30, r28
    3f18:	eb 59       	subi	r30, 0x9B	; 155
    3f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1c:	80 e9       	ldi	r24, 0x90	; 144
    3f1e:	91 e0       	ldi	r25, 0x01	; 1
    3f20:	91 83       	std	Z+1, r25	; 0x01
    3f22:	80 83       	st	Z, r24
    3f24:	fe 01       	movw	r30, r28
    3f26:	eb 59       	subi	r30, 0x9B	; 155
    3f28:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2a:	80 81       	ld	r24, Z
    3f2c:	91 81       	ldd	r25, Z+1	; 0x01
    3f2e:	01 97       	sbiw	r24, 0x01	; 1
    3f30:	f1 f7       	brne	.-4      	; 0x3f2e <wifi_connect+0xdea>
    3f32:	fe 01       	movw	r30, r28
    3f34:	eb 59       	subi	r30, 0x9B	; 155
    3f36:	ff 4f       	sbci	r31, 0xFF	; 255
    3f38:	91 83       	std	Z+1, r25	; 0x01
    3f3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f3c:	de 01       	movw	r26, r28
    3f3e:	a9 59       	subi	r26, 0x99	; 153
    3f40:	bf 4f       	sbci	r27, 0xFF	; 255
    3f42:	fe 01       	movw	r30, r28
    3f44:	e9 59       	subi	r30, 0x99	; 153
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	80 81       	ld	r24, Z
    3f4a:	91 81       	ldd	r25, Z+1	; 0x01
    3f4c:	01 97       	sbiw	r24, 0x01	; 1
    3f4e:	11 96       	adiw	r26, 0x01	; 1
    3f50:	9c 93       	st	X, r25
    3f52:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f54:	fe 01       	movw	r30, r28
    3f56:	e9 59       	subi	r30, 0x99	; 153
    3f58:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5a:	80 81       	ld	r24, Z
    3f5c:	91 81       	ldd	r25, Z+1	; 0x01
    3f5e:	00 97       	sbiw	r24, 0x00	; 0
    3f60:	d1 f6       	brne	.-76     	; 0x3f16 <wifi_connect+0xdd2>
    3f62:	27 c0       	rjmp	.+78     	; 0x3fb2 <wifi_connect+0xe6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f64:	8e 01       	movw	r16, r28
    3f66:	09 59       	subi	r16, 0x99	; 153
    3f68:	1f 4f       	sbci	r17, 0xFF	; 255
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	e7 59       	subi	r30, 0x97	; 151
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	60 81       	ld	r22, Z
    3f72:	71 81       	ldd	r23, Z+1	; 0x01
    3f74:	82 81       	ldd	r24, Z+2	; 0x02
    3f76:	93 81       	ldd	r25, Z+3	; 0x03
    3f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	f8 01       	movw	r30, r16
    3f82:	91 83       	std	Z+1, r25	; 0x01
    3f84:	80 83       	st	Z, r24
    3f86:	de 01       	movw	r26, r28
    3f88:	ad 59       	subi	r26, 0x9D	; 157
    3f8a:	bf 4f       	sbci	r27, 0xFF	; 255
    3f8c:	fe 01       	movw	r30, r28
    3f8e:	e9 59       	subi	r30, 0x99	; 153
    3f90:	ff 4f       	sbci	r31, 0xFF	; 255
    3f92:	80 81       	ld	r24, Z
    3f94:	91 81       	ldd	r25, Z+1	; 0x01
    3f96:	8d 93       	st	X+, r24
    3f98:	9c 93       	st	X, r25
    3f9a:	fe 01       	movw	r30, r28
    3f9c:	ed 59       	subi	r30, 0x9D	; 157
    3f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa0:	80 81       	ld	r24, Z
    3fa2:	91 81       	ldd	r25, Z+1	; 0x01
    3fa4:	01 97       	sbiw	r24, 0x01	; 1
    3fa6:	f1 f7       	brne	.-4      	; 0x3fa4 <wifi_connect+0xe60>
    3fa8:	fe 01       	movw	r30, r28
    3faa:	ed 59       	subi	r30, 0x9D	; 157
    3fac:	ff 4f       	sbci	r31, 0xFF	; 255
    3fae:	91 83       	std	Z+1, r25	; 0x01
    3fb0:	80 83       	st	Z, r24
	_delay_ms(3000);
	//Check_Wifi_Respones("WIFI DISCONNECT", "Connect_ERROR");
	//_delay_ms(3000);
	//Check_Wifi_Respones("WIFI CONNECTED", "Connect_ERROR");
	_delay_ms(3000);
	Check_Wifi_Respones("OK", "AT+CWMODE_ERROR");
    3fb2:	87 e6       	ldi	r24, 0x67	; 103
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	21 e8       	ldi	r18, 0x81	; 129
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	b9 01       	movw	r22, r18
    3fbc:	0e 94 bc 23 	call	0x4778	; 0x4778 <Check_Wifi_Respones>
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	e1 5a       	subi	r30, 0xA1	; 161
    3fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	aa ef       	ldi	r26, 0xFA	; 250
    3fcc:	b4 e4       	ldi	r27, 0x44	; 68
    3fce:	80 83       	st	Z, r24
    3fd0:	91 83       	std	Z+1, r25	; 0x01
    3fd2:	a2 83       	std	Z+2, r26	; 0x02
    3fd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fd6:	8e 01       	movw	r16, r28
    3fd8:	05 5a       	subi	r16, 0xA5	; 165
    3fda:	1f 4f       	sbci	r17, 0xFF	; 255
    3fdc:	fe 01       	movw	r30, r28
    3fde:	e1 5a       	subi	r30, 0xA1	; 161
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	60 81       	ld	r22, Z
    3fe4:	71 81       	ldd	r23, Z+1	; 0x01
    3fe6:	82 81       	ldd	r24, Z+2	; 0x02
    3fe8:	93 81       	ldd	r25, Z+3	; 0x03
    3fea:	20 e0       	ldi	r18, 0x00	; 0
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	4a e7       	ldi	r20, 0x7A	; 122
    3ff0:	55 e4       	ldi	r21, 0x45	; 69
    3ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	f8 01       	movw	r30, r16
    3ffc:	80 83       	st	Z, r24
    3ffe:	91 83       	std	Z+1, r25	; 0x01
    4000:	a2 83       	std	Z+2, r26	; 0x02
    4002:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4004:	fe 01       	movw	r30, r28
    4006:	e5 5a       	subi	r30, 0xA5	; 165
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	60 81       	ld	r22, Z
    400c:	71 81       	ldd	r23, Z+1	; 0x01
    400e:	82 81       	ldd	r24, Z+2	; 0x02
    4010:	93 81       	ldd	r25, Z+3	; 0x03
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	40 e8       	ldi	r20, 0x80	; 128
    4018:	5f e3       	ldi	r21, 0x3F	; 63
    401a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    401e:	88 23       	and	r24, r24
    4020:	44 f4       	brge	.+16     	; 0x4032 <wifi_connect+0xeee>
		__ticks = 1;
    4022:	fe 01       	movw	r30, r28
    4024:	e7 5a       	subi	r30, 0xA7	; 167
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	91 83       	std	Z+1, r25	; 0x01
    402e:	80 83       	st	Z, r24
    4030:	64 c0       	rjmp	.+200    	; 0x40fa <wifi_connect+0xfb6>
	else if (__tmp > 65535)
    4032:	fe 01       	movw	r30, r28
    4034:	e5 5a       	subi	r30, 0xA5	; 165
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	60 81       	ld	r22, Z
    403a:	71 81       	ldd	r23, Z+1	; 0x01
    403c:	82 81       	ldd	r24, Z+2	; 0x02
    403e:	93 81       	ldd	r25, Z+3	; 0x03
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	3f ef       	ldi	r19, 0xFF	; 255
    4044:	4f e7       	ldi	r20, 0x7F	; 127
    4046:	57 e4       	ldi	r21, 0x47	; 71
    4048:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    404c:	18 16       	cp	r1, r24
    404e:	0c f0       	brlt	.+2      	; 0x4052 <wifi_connect+0xf0e>
    4050:	43 c0       	rjmp	.+134    	; 0x40d8 <wifi_connect+0xf94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4052:	fe 01       	movw	r30, r28
    4054:	e1 5a       	subi	r30, 0xA1	; 161
    4056:	ff 4f       	sbci	r31, 0xFF	; 255
    4058:	60 81       	ld	r22, Z
    405a:	71 81       	ldd	r23, Z+1	; 0x01
    405c:	82 81       	ldd	r24, Z+2	; 0x02
    405e:	93 81       	ldd	r25, Z+3	; 0x03
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	40 e2       	ldi	r20, 0x20	; 32
    4066:	51 e4       	ldi	r21, 0x41	; 65
    4068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	8e 01       	movw	r16, r28
    4072:	07 5a       	subi	r16, 0xA7	; 167
    4074:	1f 4f       	sbci	r17, 0xFF	; 255
    4076:	bc 01       	movw	r22, r24
    4078:	cd 01       	movw	r24, r26
    407a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    407e:	dc 01       	movw	r26, r24
    4080:	cb 01       	movw	r24, r22
    4082:	f8 01       	movw	r30, r16
    4084:	91 83       	std	Z+1, r25	; 0x01
    4086:	80 83       	st	Z, r24
    4088:	1f c0       	rjmp	.+62     	; 0x40c8 <wifi_connect+0xf84>
    408a:	fe 01       	movw	r30, r28
    408c:	e9 5a       	subi	r30, 0xA9	; 169
    408e:	ff 4f       	sbci	r31, 0xFF	; 255
    4090:	80 e9       	ldi	r24, 0x90	; 144
    4092:	91 e0       	ldi	r25, 0x01	; 1
    4094:	91 83       	std	Z+1, r25	; 0x01
    4096:	80 83       	st	Z, r24
    4098:	fe 01       	movw	r30, r28
    409a:	e9 5a       	subi	r30, 0xA9	; 169
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	80 81       	ld	r24, Z
    40a0:	91 81       	ldd	r25, Z+1	; 0x01
    40a2:	01 97       	sbiw	r24, 0x01	; 1
    40a4:	f1 f7       	brne	.-4      	; 0x40a2 <wifi_connect+0xf5e>
    40a6:	fe 01       	movw	r30, r28
    40a8:	e9 5a       	subi	r30, 0xA9	; 169
    40aa:	ff 4f       	sbci	r31, 0xFF	; 255
    40ac:	91 83       	std	Z+1, r25	; 0x01
    40ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40b0:	de 01       	movw	r26, r28
    40b2:	a7 5a       	subi	r26, 0xA7	; 167
    40b4:	bf 4f       	sbci	r27, 0xFF	; 255
    40b6:	fe 01       	movw	r30, r28
    40b8:	e7 5a       	subi	r30, 0xA7	; 167
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	80 81       	ld	r24, Z
    40be:	91 81       	ldd	r25, Z+1	; 0x01
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	11 96       	adiw	r26, 0x01	; 1
    40c4:	9c 93       	st	X, r25
    40c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40c8:	fe 01       	movw	r30, r28
    40ca:	e7 5a       	subi	r30, 0xA7	; 167
    40cc:	ff 4f       	sbci	r31, 0xFF	; 255
    40ce:	80 81       	ld	r24, Z
    40d0:	91 81       	ldd	r25, Z+1	; 0x01
    40d2:	00 97       	sbiw	r24, 0x00	; 0
    40d4:	d1 f6       	brne	.-76     	; 0x408a <wifi_connect+0xf46>
    40d6:	27 c0       	rjmp	.+78     	; 0x4126 <wifi_connect+0xfe2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40d8:	8e 01       	movw	r16, r28
    40da:	07 5a       	subi	r16, 0xA7	; 167
    40dc:	1f 4f       	sbci	r17, 0xFF	; 255
    40de:	fe 01       	movw	r30, r28
    40e0:	e5 5a       	subi	r30, 0xA5	; 165
    40e2:	ff 4f       	sbci	r31, 0xFF	; 255
    40e4:	60 81       	ld	r22, Z
    40e6:	71 81       	ldd	r23, Z+1	; 0x01
    40e8:	82 81       	ldd	r24, Z+2	; 0x02
    40ea:	93 81       	ldd	r25, Z+3	; 0x03
    40ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	f8 01       	movw	r30, r16
    40f6:	91 83       	std	Z+1, r25	; 0x01
    40f8:	80 83       	st	Z, r24
    40fa:	de 01       	movw	r26, r28
    40fc:	ab 5a       	subi	r26, 0xAB	; 171
    40fe:	bf 4f       	sbci	r27, 0xFF	; 255
    4100:	fe 01       	movw	r30, r28
    4102:	e7 5a       	subi	r30, 0xA7	; 167
    4104:	ff 4f       	sbci	r31, 0xFF	; 255
    4106:	80 81       	ld	r24, Z
    4108:	91 81       	ldd	r25, Z+1	; 0x01
    410a:	8d 93       	st	X+, r24
    410c:	9c 93       	st	X, r25
    410e:	fe 01       	movw	r30, r28
    4110:	eb 5a       	subi	r30, 0xAB	; 171
    4112:	ff 4f       	sbci	r31, 0xFF	; 255
    4114:	80 81       	ld	r24, Z
    4116:	91 81       	ldd	r25, Z+1	; 0x01
    4118:	01 97       	sbiw	r24, 0x01	; 1
    411a:	f1 f7       	brne	.-4      	; 0x4118 <wifi_connect+0xfd4>
    411c:	fe 01       	movw	r30, r28
    411e:	eb 5a       	subi	r30, 0xAB	; 171
    4120:	ff 4f       	sbci	r31, 0xFF	; 255
    4122:	91 83       	std	Z+1, r25	; 0x01
    4124:	80 83       	st	Z, r24
	_delay_ms(2000);
	H_LCD_void_Clear_Display();
    4126:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <H_LCD_void_Clear_Display>
    412a:	fe 01       	movw	r30, r28
    412c:	ef 5a       	subi	r30, 0xAF	; 175
    412e:	ff 4f       	sbci	r31, 0xFF	; 255
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	a8 e4       	ldi	r26, 0x48	; 72
    4136:	b3 e4       	ldi	r27, 0x43	; 67
    4138:	80 83       	st	Z, r24
    413a:	91 83       	std	Z+1, r25	; 0x01
    413c:	a2 83       	std	Z+2, r26	; 0x02
    413e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4140:	8e 01       	movw	r16, r28
    4142:	03 5b       	subi	r16, 0xB3	; 179
    4144:	1f 4f       	sbci	r17, 0xFF	; 255
    4146:	fe 01       	movw	r30, r28
    4148:	ef 5a       	subi	r30, 0xAF	; 175
    414a:	ff 4f       	sbci	r31, 0xFF	; 255
    414c:	60 81       	ld	r22, Z
    414e:	71 81       	ldd	r23, Z+1	; 0x01
    4150:	82 81       	ldd	r24, Z+2	; 0x02
    4152:	93 81       	ldd	r25, Z+3	; 0x03
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	4a e7       	ldi	r20, 0x7A	; 122
    415a:	55 e4       	ldi	r21, 0x45	; 69
    415c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	f8 01       	movw	r30, r16
    4166:	80 83       	st	Z, r24
    4168:	91 83       	std	Z+1, r25	; 0x01
    416a:	a2 83       	std	Z+2, r26	; 0x02
    416c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    416e:	fe 01       	movw	r30, r28
    4170:	e3 5b       	subi	r30, 0xB3	; 179
    4172:	ff 4f       	sbci	r31, 0xFF	; 255
    4174:	60 81       	ld	r22, Z
    4176:	71 81       	ldd	r23, Z+1	; 0x01
    4178:	82 81       	ldd	r24, Z+2	; 0x02
    417a:	93 81       	ldd	r25, Z+3	; 0x03
    417c:	20 e0       	ldi	r18, 0x00	; 0
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	40 e8       	ldi	r20, 0x80	; 128
    4182:	5f e3       	ldi	r21, 0x3F	; 63
    4184:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4188:	88 23       	and	r24, r24
    418a:	44 f4       	brge	.+16     	; 0x419c <wifi_connect+0x1058>
		__ticks = 1;
    418c:	fe 01       	movw	r30, r28
    418e:	e5 5b       	subi	r30, 0xB5	; 181
    4190:	ff 4f       	sbci	r31, 0xFF	; 255
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	91 83       	std	Z+1, r25	; 0x01
    4198:	80 83       	st	Z, r24
    419a:	64 c0       	rjmp	.+200    	; 0x4264 <wifi_connect+0x1120>
	else if (__tmp > 65535)
    419c:	fe 01       	movw	r30, r28
    419e:	e3 5b       	subi	r30, 0xB3	; 179
    41a0:	ff 4f       	sbci	r31, 0xFF	; 255
    41a2:	60 81       	ld	r22, Z
    41a4:	71 81       	ldd	r23, Z+1	; 0x01
    41a6:	82 81       	ldd	r24, Z+2	; 0x02
    41a8:	93 81       	ldd	r25, Z+3	; 0x03
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	3f ef       	ldi	r19, 0xFF	; 255
    41ae:	4f e7       	ldi	r20, 0x7F	; 127
    41b0:	57 e4       	ldi	r21, 0x47	; 71
    41b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41b6:	18 16       	cp	r1, r24
    41b8:	0c f0       	brlt	.+2      	; 0x41bc <wifi_connect+0x1078>
    41ba:	43 c0       	rjmp	.+134    	; 0x4242 <wifi_connect+0x10fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41bc:	fe 01       	movw	r30, r28
    41be:	ef 5a       	subi	r30, 0xAF	; 175
    41c0:	ff 4f       	sbci	r31, 0xFF	; 255
    41c2:	60 81       	ld	r22, Z
    41c4:	71 81       	ldd	r23, Z+1	; 0x01
    41c6:	82 81       	ldd	r24, Z+2	; 0x02
    41c8:	93 81       	ldd	r25, Z+3	; 0x03
    41ca:	20 e0       	ldi	r18, 0x00	; 0
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	40 e2       	ldi	r20, 0x20	; 32
    41d0:	51 e4       	ldi	r21, 0x41	; 65
    41d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d6:	dc 01       	movw	r26, r24
    41d8:	cb 01       	movw	r24, r22
    41da:	8e 01       	movw	r16, r28
    41dc:	05 5b       	subi	r16, 0xB5	; 181
    41de:	1f 4f       	sbci	r17, 0xFF	; 255
    41e0:	bc 01       	movw	r22, r24
    41e2:	cd 01       	movw	r24, r26
    41e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e8:	dc 01       	movw	r26, r24
    41ea:	cb 01       	movw	r24, r22
    41ec:	f8 01       	movw	r30, r16
    41ee:	91 83       	std	Z+1, r25	; 0x01
    41f0:	80 83       	st	Z, r24
    41f2:	1f c0       	rjmp	.+62     	; 0x4232 <wifi_connect+0x10ee>
    41f4:	fe 01       	movw	r30, r28
    41f6:	e7 5b       	subi	r30, 0xB7	; 183
    41f8:	ff 4f       	sbci	r31, 0xFF	; 255
    41fa:	80 e9       	ldi	r24, 0x90	; 144
    41fc:	91 e0       	ldi	r25, 0x01	; 1
    41fe:	91 83       	std	Z+1, r25	; 0x01
    4200:	80 83       	st	Z, r24
    4202:	fe 01       	movw	r30, r28
    4204:	e7 5b       	subi	r30, 0xB7	; 183
    4206:	ff 4f       	sbci	r31, 0xFF	; 255
    4208:	80 81       	ld	r24, Z
    420a:	91 81       	ldd	r25, Z+1	; 0x01
    420c:	01 97       	sbiw	r24, 0x01	; 1
    420e:	f1 f7       	brne	.-4      	; 0x420c <wifi_connect+0x10c8>
    4210:	fe 01       	movw	r30, r28
    4212:	e7 5b       	subi	r30, 0xB7	; 183
    4214:	ff 4f       	sbci	r31, 0xFF	; 255
    4216:	91 83       	std	Z+1, r25	; 0x01
    4218:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    421a:	de 01       	movw	r26, r28
    421c:	a5 5b       	subi	r26, 0xB5	; 181
    421e:	bf 4f       	sbci	r27, 0xFF	; 255
    4220:	fe 01       	movw	r30, r28
    4222:	e5 5b       	subi	r30, 0xB5	; 181
    4224:	ff 4f       	sbci	r31, 0xFF	; 255
    4226:	80 81       	ld	r24, Z
    4228:	91 81       	ldd	r25, Z+1	; 0x01
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	11 96       	adiw	r26, 0x01	; 1
    422e:	9c 93       	st	X, r25
    4230:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4232:	fe 01       	movw	r30, r28
    4234:	e5 5b       	subi	r30, 0xB5	; 181
    4236:	ff 4f       	sbci	r31, 0xFF	; 255
    4238:	80 81       	ld	r24, Z
    423a:	91 81       	ldd	r25, Z+1	; 0x01
    423c:	00 97       	sbiw	r24, 0x00	; 0
    423e:	d1 f6       	brne	.-76     	; 0x41f4 <wifi_connect+0x10b0>
    4240:	27 c0       	rjmp	.+78     	; 0x4290 <wifi_connect+0x114c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4242:	8e 01       	movw	r16, r28
    4244:	05 5b       	subi	r16, 0xB5	; 181
    4246:	1f 4f       	sbci	r17, 0xFF	; 255
    4248:	fe 01       	movw	r30, r28
    424a:	e3 5b       	subi	r30, 0xB3	; 179
    424c:	ff 4f       	sbci	r31, 0xFF	; 255
    424e:	60 81       	ld	r22, Z
    4250:	71 81       	ldd	r23, Z+1	; 0x01
    4252:	82 81       	ldd	r24, Z+2	; 0x02
    4254:	93 81       	ldd	r25, Z+3	; 0x03
    4256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    425a:	dc 01       	movw	r26, r24
    425c:	cb 01       	movw	r24, r22
    425e:	f8 01       	movw	r30, r16
    4260:	91 83       	std	Z+1, r25	; 0x01
    4262:	80 83       	st	Z, r24
    4264:	de 01       	movw	r26, r28
    4266:	a9 5b       	subi	r26, 0xB9	; 185
    4268:	bf 4f       	sbci	r27, 0xFF	; 255
    426a:	fe 01       	movw	r30, r28
    426c:	e5 5b       	subi	r30, 0xB5	; 181
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	80 81       	ld	r24, Z
    4272:	91 81       	ldd	r25, Z+1	; 0x01
    4274:	8d 93       	st	X+, r24
    4276:	9c 93       	st	X, r25
    4278:	fe 01       	movw	r30, r28
    427a:	e9 5b       	subi	r30, 0xB9	; 185
    427c:	ff 4f       	sbci	r31, 0xFF	; 255
    427e:	80 81       	ld	r24, Z
    4280:	91 81       	ldd	r25, Z+1	; 0x01
    4282:	01 97       	sbiw	r24, 0x01	; 1
    4284:	f1 f7       	brne	.-4      	; 0x4282 <wifi_connect+0x113e>
    4286:	fe 01       	movw	r30, r28
    4288:	e9 5b       	subi	r30, 0xB9	; 185
    428a:	ff 4f       	sbci	r31, 0xFF	; 255
    428c:	91 83       	std	Z+1, r25	; 0x01
    428e:	80 83       	st	Z, r24
	_delay_ms(200);
	Wifi_Buffer_Reset();
    4290:	0e 94 11 26 	call	0x4c22	; 0x4c22 <Wifi_Buffer_Reset>
	H_LCD_void_sendData('4');
    4294:	84 e3       	ldi	r24, 0x34	; 52
    4296:	0e 94 1e 2a 	call	0x543c	; 0x543c <H_LCD_void_sendData>
    429a:	fe 01       	movw	r30, r28
    429c:	ed 5b       	subi	r30, 0xBD	; 189
    429e:	ff 4f       	sbci	r31, 0xFF	; 255
    42a0:	80 e0       	ldi	r24, 0x00	; 0
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	aa e7       	ldi	r26, 0x7A	; 122
    42a6:	b4 e4       	ldi	r27, 0x44	; 68
    42a8:	80 83       	st	Z, r24
    42aa:	91 83       	std	Z+1, r25	; 0x01
    42ac:	a2 83       	std	Z+2, r26	; 0x02
    42ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42b0:	8e 01       	movw	r16, r28
    42b2:	01 5c       	subi	r16, 0xC1	; 193
    42b4:	1f 4f       	sbci	r17, 0xFF	; 255
    42b6:	fe 01       	movw	r30, r28
    42b8:	ed 5b       	subi	r30, 0xBD	; 189
    42ba:	ff 4f       	sbci	r31, 0xFF	; 255
    42bc:	60 81       	ld	r22, Z
    42be:	71 81       	ldd	r23, Z+1	; 0x01
    42c0:	82 81       	ldd	r24, Z+2	; 0x02
    42c2:	93 81       	ldd	r25, Z+3	; 0x03
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	4a e7       	ldi	r20, 0x7A	; 122
    42ca:	55 e4       	ldi	r21, 0x45	; 69
    42cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d0:	dc 01       	movw	r26, r24
    42d2:	cb 01       	movw	r24, r22
    42d4:	f8 01       	movw	r30, r16
    42d6:	80 83       	st	Z, r24
    42d8:	91 83       	std	Z+1, r25	; 0x01
    42da:	a2 83       	std	Z+2, r26	; 0x02
    42dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42de:	fe 01       	movw	r30, r28
    42e0:	ff 96       	adiw	r30, 0x3f	; 63
    42e2:	60 81       	ld	r22, Z
    42e4:	71 81       	ldd	r23, Z+1	; 0x01
    42e6:	82 81       	ldd	r24, Z+2	; 0x02
    42e8:	93 81       	ldd	r25, Z+3	; 0x03
    42ea:	20 e0       	ldi	r18, 0x00	; 0
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	40 e8       	ldi	r20, 0x80	; 128
    42f0:	5f e3       	ldi	r21, 0x3F	; 63
    42f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42f6:	88 23       	and	r24, r24
    42f8:	2c f4       	brge	.+10     	; 0x4304 <wifi_connect+0x11c0>
		__ticks = 1;
    42fa:	81 e0       	ldi	r24, 0x01	; 1
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	9e af       	std	Y+62, r25	; 0x3e
    4300:	8d af       	std	Y+61, r24	; 0x3d
    4302:	46 c0       	rjmp	.+140    	; 0x4390 <wifi_connect+0x124c>
	else if (__tmp > 65535)
    4304:	fe 01       	movw	r30, r28
    4306:	ff 96       	adiw	r30, 0x3f	; 63
    4308:	60 81       	ld	r22, Z
    430a:	71 81       	ldd	r23, Z+1	; 0x01
    430c:	82 81       	ldd	r24, Z+2	; 0x02
    430e:	93 81       	ldd	r25, Z+3	; 0x03
    4310:	20 e0       	ldi	r18, 0x00	; 0
    4312:	3f ef       	ldi	r19, 0xFF	; 255
    4314:	4f e7       	ldi	r20, 0x7F	; 127
    4316:	57 e4       	ldi	r21, 0x47	; 71
    4318:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    431c:	18 16       	cp	r1, r24
    431e:	64 f5       	brge	.+88     	; 0x4378 <wifi_connect+0x1234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4320:	fe 01       	movw	r30, r28
    4322:	ed 5b       	subi	r30, 0xBD	; 189
    4324:	ff 4f       	sbci	r31, 0xFF	; 255
    4326:	60 81       	ld	r22, Z
    4328:	71 81       	ldd	r23, Z+1	; 0x01
    432a:	82 81       	ldd	r24, Z+2	; 0x02
    432c:	93 81       	ldd	r25, Z+3	; 0x03
    432e:	20 e0       	ldi	r18, 0x00	; 0
    4330:	30 e0       	ldi	r19, 0x00	; 0
    4332:	40 e2       	ldi	r20, 0x20	; 32
    4334:	51 e4       	ldi	r21, 0x41	; 65
    4336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    433a:	dc 01       	movw	r26, r24
    433c:	cb 01       	movw	r24, r22
    433e:	bc 01       	movw	r22, r24
    4340:	cd 01       	movw	r24, r26
    4342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4346:	dc 01       	movw	r26, r24
    4348:	cb 01       	movw	r24, r22
    434a:	9e af       	std	Y+62, r25	; 0x3e
    434c:	8d af       	std	Y+61, r24	; 0x3d
    434e:	0f c0       	rjmp	.+30     	; 0x436e <wifi_connect+0x122a>
    4350:	80 e9       	ldi	r24, 0x90	; 144
    4352:	91 e0       	ldi	r25, 0x01	; 1
    4354:	9c af       	std	Y+60, r25	; 0x3c
    4356:	8b af       	std	Y+59, r24	; 0x3b
    4358:	8b ad       	ldd	r24, Y+59	; 0x3b
    435a:	9c ad       	ldd	r25, Y+60	; 0x3c
    435c:	01 97       	sbiw	r24, 0x01	; 1
    435e:	f1 f7       	brne	.-4      	; 0x435c <wifi_connect+0x1218>
    4360:	9c af       	std	Y+60, r25	; 0x3c
    4362:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4364:	8d ad       	ldd	r24, Y+61	; 0x3d
    4366:	9e ad       	ldd	r25, Y+62	; 0x3e
    4368:	01 97       	sbiw	r24, 0x01	; 1
    436a:	9e af       	std	Y+62, r25	; 0x3e
    436c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    436e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4370:	9e ad       	ldd	r25, Y+62	; 0x3e
    4372:	00 97       	sbiw	r24, 0x00	; 0
    4374:	69 f7       	brne	.-38     	; 0x4350 <wifi_connect+0x120c>
    4376:	16 c0       	rjmp	.+44     	; 0x43a4 <wifi_connect+0x1260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4378:	fe 01       	movw	r30, r28
    437a:	ff 96       	adiw	r30, 0x3f	; 63
    437c:	60 81       	ld	r22, Z
    437e:	71 81       	ldd	r23, Z+1	; 0x01
    4380:	82 81       	ldd	r24, Z+2	; 0x02
    4382:	93 81       	ldd	r25, Z+3	; 0x03
    4384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4388:	dc 01       	movw	r26, r24
    438a:	cb 01       	movw	r24, r22
    438c:	9e af       	std	Y+62, r25	; 0x3e
    438e:	8d af       	std	Y+61, r24	; 0x3d
    4390:	8d ad       	ldd	r24, Y+61	; 0x3d
    4392:	9e ad       	ldd	r25, Y+62	; 0x3e
    4394:	9a af       	std	Y+58, r25	; 0x3a
    4396:	89 af       	std	Y+57, r24	; 0x39
    4398:	89 ad       	ldd	r24, Y+57	; 0x39
    439a:	9a ad       	ldd	r25, Y+58	; 0x3a
    439c:	01 97       	sbiw	r24, 0x01	; 1
    439e:	f1 f7       	brne	.-4      	; 0x439c <wifi_connect+0x1258>
    43a0:	9a af       	std	Y+58, r25	; 0x3a
    43a2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	
	/* connect to TCP Server  */
	UART_sendString("AT+CIPSTART=\"TCP\",\"192.168.1.13\",9999\r\n");
    43a4:	82 eb       	ldi	r24, 0xB2	; 178
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	0e 94 66 07 	call	0xecc	; 0xecc <UART_sendString>
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	90 e8       	ldi	r25, 0x80	; 128
    43b0:	ab e3       	ldi	r26, 0x3B	; 59
    43b2:	b5 e4       	ldi	r27, 0x45	; 69
    43b4:	8d ab       	std	Y+53, r24	; 0x35
    43b6:	9e ab       	std	Y+54, r25	; 0x36
    43b8:	af ab       	std	Y+55, r26	; 0x37
    43ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43bc:	6d a9       	ldd	r22, Y+53	; 0x35
    43be:	7e a9       	ldd	r23, Y+54	; 0x36
    43c0:	8f a9       	ldd	r24, Y+55	; 0x37
    43c2:	98 ad       	ldd	r25, Y+56	; 0x38
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	4a e7       	ldi	r20, 0x7A	; 122
    43ca:	55 e4       	ldi	r21, 0x45	; 69
    43cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d0:	dc 01       	movw	r26, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	89 ab       	std	Y+49, r24	; 0x31
    43d6:	9a ab       	std	Y+50, r25	; 0x32
    43d8:	ab ab       	std	Y+51, r26	; 0x33
    43da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    43dc:	69 a9       	ldd	r22, Y+49	; 0x31
    43de:	7a a9       	ldd	r23, Y+50	; 0x32
    43e0:	8b a9       	ldd	r24, Y+51	; 0x33
    43e2:	9c a9       	ldd	r25, Y+52	; 0x34
    43e4:	20 e0       	ldi	r18, 0x00	; 0
    43e6:	30 e0       	ldi	r19, 0x00	; 0
    43e8:	40 e8       	ldi	r20, 0x80	; 128
    43ea:	5f e3       	ldi	r21, 0x3F	; 63
    43ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43f0:	88 23       	and	r24, r24
    43f2:	2c f4       	brge	.+10     	; 0x43fe <wifi_connect+0x12ba>
		__ticks = 1;
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	98 ab       	std	Y+48, r25	; 0x30
    43fa:	8f a7       	std	Y+47, r24	; 0x2f
    43fc:	3f c0       	rjmp	.+126    	; 0x447c <wifi_connect+0x1338>
	else if (__tmp > 65535)
    43fe:	69 a9       	ldd	r22, Y+49	; 0x31
    4400:	7a a9       	ldd	r23, Y+50	; 0x32
    4402:	8b a9       	ldd	r24, Y+51	; 0x33
    4404:	9c a9       	ldd	r25, Y+52	; 0x34
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	3f ef       	ldi	r19, 0xFF	; 255
    440a:	4f e7       	ldi	r20, 0x7F	; 127
    440c:	57 e4       	ldi	r21, 0x47	; 71
    440e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4412:	18 16       	cp	r1, r24
    4414:	4c f5       	brge	.+82     	; 0x4468 <wifi_connect+0x1324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4416:	6d a9       	ldd	r22, Y+53	; 0x35
    4418:	7e a9       	ldd	r23, Y+54	; 0x36
    441a:	8f a9       	ldd	r24, Y+55	; 0x37
    441c:	98 ad       	ldd	r25, Y+56	; 0x38
    441e:	20 e0       	ldi	r18, 0x00	; 0
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	40 e2       	ldi	r20, 0x20	; 32
    4424:	51 e4       	ldi	r21, 0x41	; 65
    4426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	bc 01       	movw	r22, r24
    4430:	cd 01       	movw	r24, r26
    4432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	98 ab       	std	Y+48, r25	; 0x30
    443c:	8f a7       	std	Y+47, r24	; 0x2f
    443e:	0f c0       	rjmp	.+30     	; 0x445e <wifi_connect+0x131a>
    4440:	80 e9       	ldi	r24, 0x90	; 144
    4442:	91 e0       	ldi	r25, 0x01	; 1
    4444:	9e a7       	std	Y+46, r25	; 0x2e
    4446:	8d a7       	std	Y+45, r24	; 0x2d
    4448:	8d a5       	ldd	r24, Y+45	; 0x2d
    444a:	9e a5       	ldd	r25, Y+46	; 0x2e
    444c:	01 97       	sbiw	r24, 0x01	; 1
    444e:	f1 f7       	brne	.-4      	; 0x444c <wifi_connect+0x1308>
    4450:	9e a7       	std	Y+46, r25	; 0x2e
    4452:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4454:	8f a5       	ldd	r24, Y+47	; 0x2f
    4456:	98 a9       	ldd	r25, Y+48	; 0x30
    4458:	01 97       	sbiw	r24, 0x01	; 1
    445a:	98 ab       	std	Y+48, r25	; 0x30
    445c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    445e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4460:	98 a9       	ldd	r25, Y+48	; 0x30
    4462:	00 97       	sbiw	r24, 0x00	; 0
    4464:	69 f7       	brne	.-38     	; 0x4440 <wifi_connect+0x12fc>
    4466:	14 c0       	rjmp	.+40     	; 0x4490 <wifi_connect+0x134c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4468:	69 a9       	ldd	r22, Y+49	; 0x31
    446a:	7a a9       	ldd	r23, Y+50	; 0x32
    446c:	8b a9       	ldd	r24, Y+51	; 0x33
    446e:	9c a9       	ldd	r25, Y+52	; 0x34
    4470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4474:	dc 01       	movw	r26, r24
    4476:	cb 01       	movw	r24, r22
    4478:	98 ab       	std	Y+48, r25	; 0x30
    447a:	8f a7       	std	Y+47, r24	; 0x2f
    447c:	8f a5       	ldd	r24, Y+47	; 0x2f
    447e:	98 a9       	ldd	r25, Y+48	; 0x30
    4480:	9c a7       	std	Y+44, r25	; 0x2c
    4482:	8b a7       	std	Y+43, r24	; 0x2b
    4484:	8b a5       	ldd	r24, Y+43	; 0x2b
    4486:	9c a5       	ldd	r25, Y+44	; 0x2c
    4488:	01 97       	sbiw	r24, 0x01	; 1
    448a:	f1 f7       	brne	.-4      	; 0x4488 <wifi_connect+0x1344>
    448c:	9c a7       	std	Y+44, r25	; 0x2c
    448e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(3000);
	Check_Wifi_Respones("OK", "AT+CIPSERVER_ERROR");
    4490:	87 e6       	ldi	r24, 0x67	; 103
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	2a ed       	ldi	r18, 0xDA	; 218
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	b9 01       	movw	r22, r18
    449a:	0e 94 bc 23 	call	0x4778	; 0x4778 <Check_Wifi_Respones>
    449e:	80 e0       	ldi	r24, 0x00	; 0
    44a0:	90 e8       	ldi	r25, 0x80	; 128
    44a2:	ab e3       	ldi	r26, 0x3B	; 59
    44a4:	b5 e4       	ldi	r27, 0x45	; 69
    44a6:	8f a3       	std	Y+39, r24	; 0x27
    44a8:	98 a7       	std	Y+40, r25	; 0x28
    44aa:	a9 a7       	std	Y+41, r26	; 0x29
    44ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ae:	6f a1       	ldd	r22, Y+39	; 0x27
    44b0:	78 a5       	ldd	r23, Y+40	; 0x28
    44b2:	89 a5       	ldd	r24, Y+41	; 0x29
    44b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    44b6:	20 e0       	ldi	r18, 0x00	; 0
    44b8:	30 e0       	ldi	r19, 0x00	; 0
    44ba:	4a e7       	ldi	r20, 0x7A	; 122
    44bc:	55 e4       	ldi	r21, 0x45	; 69
    44be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c2:	dc 01       	movw	r26, r24
    44c4:	cb 01       	movw	r24, r22
    44c6:	8b a3       	std	Y+35, r24	; 0x23
    44c8:	9c a3       	std	Y+36, r25	; 0x24
    44ca:	ad a3       	std	Y+37, r26	; 0x25
    44cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44ce:	6b a1       	ldd	r22, Y+35	; 0x23
    44d0:	7c a1       	ldd	r23, Y+36	; 0x24
    44d2:	8d a1       	ldd	r24, Y+37	; 0x25
    44d4:	9e a1       	ldd	r25, Y+38	; 0x26
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	30 e0       	ldi	r19, 0x00	; 0
    44da:	40 e8       	ldi	r20, 0x80	; 128
    44dc:	5f e3       	ldi	r21, 0x3F	; 63
    44de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44e2:	88 23       	and	r24, r24
    44e4:	2c f4       	brge	.+10     	; 0x44f0 <wifi_connect+0x13ac>
		__ticks = 1;
    44e6:	81 e0       	ldi	r24, 0x01	; 1
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	9a a3       	std	Y+34, r25	; 0x22
    44ec:	89 a3       	std	Y+33, r24	; 0x21
    44ee:	3f c0       	rjmp	.+126    	; 0x456e <wifi_connect+0x142a>
	else if (__tmp > 65535)
    44f0:	6b a1       	ldd	r22, Y+35	; 0x23
    44f2:	7c a1       	ldd	r23, Y+36	; 0x24
    44f4:	8d a1       	ldd	r24, Y+37	; 0x25
    44f6:	9e a1       	ldd	r25, Y+38	; 0x26
    44f8:	20 e0       	ldi	r18, 0x00	; 0
    44fa:	3f ef       	ldi	r19, 0xFF	; 255
    44fc:	4f e7       	ldi	r20, 0x7F	; 127
    44fe:	57 e4       	ldi	r21, 0x47	; 71
    4500:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4504:	18 16       	cp	r1, r24
    4506:	4c f5       	brge	.+82     	; 0x455a <wifi_connect+0x1416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4508:	6f a1       	ldd	r22, Y+39	; 0x27
    450a:	78 a5       	ldd	r23, Y+40	; 0x28
    450c:	89 a5       	ldd	r24, Y+41	; 0x29
    450e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	40 e2       	ldi	r20, 0x20	; 32
    4516:	51 e4       	ldi	r21, 0x41	; 65
    4518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    451c:	dc 01       	movw	r26, r24
    451e:	cb 01       	movw	r24, r22
    4520:	bc 01       	movw	r22, r24
    4522:	cd 01       	movw	r24, r26
    4524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4528:	dc 01       	movw	r26, r24
    452a:	cb 01       	movw	r24, r22
    452c:	9a a3       	std	Y+34, r25	; 0x22
    452e:	89 a3       	std	Y+33, r24	; 0x21
    4530:	0f c0       	rjmp	.+30     	; 0x4550 <wifi_connect+0x140c>
    4532:	80 e9       	ldi	r24, 0x90	; 144
    4534:	91 e0       	ldi	r25, 0x01	; 1
    4536:	98 a3       	std	Y+32, r25	; 0x20
    4538:	8f 8f       	std	Y+31, r24	; 0x1f
    453a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    453c:	98 a1       	ldd	r25, Y+32	; 0x20
    453e:	01 97       	sbiw	r24, 0x01	; 1
    4540:	f1 f7       	brne	.-4      	; 0x453e <wifi_connect+0x13fa>
    4542:	98 a3       	std	Y+32, r25	; 0x20
    4544:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4546:	89 a1       	ldd	r24, Y+33	; 0x21
    4548:	9a a1       	ldd	r25, Y+34	; 0x22
    454a:	01 97       	sbiw	r24, 0x01	; 1
    454c:	9a a3       	std	Y+34, r25	; 0x22
    454e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4550:	89 a1       	ldd	r24, Y+33	; 0x21
    4552:	9a a1       	ldd	r25, Y+34	; 0x22
    4554:	00 97       	sbiw	r24, 0x00	; 0
    4556:	69 f7       	brne	.-38     	; 0x4532 <wifi_connect+0x13ee>
    4558:	14 c0       	rjmp	.+40     	; 0x4582 <wifi_connect+0x143e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    455a:	6b a1       	ldd	r22, Y+35	; 0x23
    455c:	7c a1       	ldd	r23, Y+36	; 0x24
    455e:	8d a1       	ldd	r24, Y+37	; 0x25
    4560:	9e a1       	ldd	r25, Y+38	; 0x26
    4562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4566:	dc 01       	movw	r26, r24
    4568:	cb 01       	movw	r24, r22
    456a:	9a a3       	std	Y+34, r25	; 0x22
    456c:	89 a3       	std	Y+33, r24	; 0x21
    456e:	89 a1       	ldd	r24, Y+33	; 0x21
    4570:	9a a1       	ldd	r25, Y+34	; 0x22
    4572:	9e 8f       	std	Y+30, r25	; 0x1e
    4574:	8d 8f       	std	Y+29, r24	; 0x1d
    4576:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4578:	9e 8d       	ldd	r25, Y+30	; 0x1e
    457a:	01 97       	sbiw	r24, 0x01	; 1
    457c:	f1 f7       	brne	.-4      	; 0x457a <wifi_connect+0x1436>
    457e:	9e 8f       	std	Y+30, r25	; 0x1e
    4580:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3000);
	H_LCD_void_Clear_Display();
    4582:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <H_LCD_void_Clear_Display>
    4586:	80 e0       	ldi	r24, 0x00	; 0
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	a8 e4       	ldi	r26, 0x48	; 72
    458c:	b3 e4       	ldi	r27, 0x43	; 67
    458e:	89 8f       	std	Y+25, r24	; 0x19
    4590:	9a 8f       	std	Y+26, r25	; 0x1a
    4592:	ab 8f       	std	Y+27, r26	; 0x1b
    4594:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4596:	69 8d       	ldd	r22, Y+25	; 0x19
    4598:	7a 8d       	ldd	r23, Y+26	; 0x1a
    459a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    459c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    459e:	20 e0       	ldi	r18, 0x00	; 0
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	4a e7       	ldi	r20, 0x7A	; 122
    45a4:	55 e4       	ldi	r21, 0x45	; 69
    45a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45aa:	dc 01       	movw	r26, r24
    45ac:	cb 01       	movw	r24, r22
    45ae:	8d 8b       	std	Y+21, r24	; 0x15
    45b0:	9e 8b       	std	Y+22, r25	; 0x16
    45b2:	af 8b       	std	Y+23, r26	; 0x17
    45b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45b6:	6d 89       	ldd	r22, Y+21	; 0x15
    45b8:	7e 89       	ldd	r23, Y+22	; 0x16
    45ba:	8f 89       	ldd	r24, Y+23	; 0x17
    45bc:	98 8d       	ldd	r25, Y+24	; 0x18
    45be:	20 e0       	ldi	r18, 0x00	; 0
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	40 e8       	ldi	r20, 0x80	; 128
    45c4:	5f e3       	ldi	r21, 0x3F	; 63
    45c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45ca:	88 23       	and	r24, r24
    45cc:	2c f4       	brge	.+10     	; 0x45d8 <wifi_connect+0x1494>
		__ticks = 1;
    45ce:	81 e0       	ldi	r24, 0x01	; 1
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	9c 8b       	std	Y+20, r25	; 0x14
    45d4:	8b 8b       	std	Y+19, r24	; 0x13
    45d6:	3f c0       	rjmp	.+126    	; 0x4656 <wifi_connect+0x1512>
	else if (__tmp > 65535)
    45d8:	6d 89       	ldd	r22, Y+21	; 0x15
    45da:	7e 89       	ldd	r23, Y+22	; 0x16
    45dc:	8f 89       	ldd	r24, Y+23	; 0x17
    45de:	98 8d       	ldd	r25, Y+24	; 0x18
    45e0:	20 e0       	ldi	r18, 0x00	; 0
    45e2:	3f ef       	ldi	r19, 0xFF	; 255
    45e4:	4f e7       	ldi	r20, 0x7F	; 127
    45e6:	57 e4       	ldi	r21, 0x47	; 71
    45e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45ec:	18 16       	cp	r1, r24
    45ee:	4c f5       	brge	.+82     	; 0x4642 <wifi_connect+0x14fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45f0:	69 8d       	ldd	r22, Y+25	; 0x19
    45f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45f8:	20 e0       	ldi	r18, 0x00	; 0
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	40 e2       	ldi	r20, 0x20	; 32
    45fe:	51 e4       	ldi	r21, 0x41	; 65
    4600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4604:	dc 01       	movw	r26, r24
    4606:	cb 01       	movw	r24, r22
    4608:	bc 01       	movw	r22, r24
    460a:	cd 01       	movw	r24, r26
    460c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4610:	dc 01       	movw	r26, r24
    4612:	cb 01       	movw	r24, r22
    4614:	9c 8b       	std	Y+20, r25	; 0x14
    4616:	8b 8b       	std	Y+19, r24	; 0x13
    4618:	0f c0       	rjmp	.+30     	; 0x4638 <wifi_connect+0x14f4>
    461a:	80 e9       	ldi	r24, 0x90	; 144
    461c:	91 e0       	ldi	r25, 0x01	; 1
    461e:	9a 8b       	std	Y+18, r25	; 0x12
    4620:	89 8b       	std	Y+17, r24	; 0x11
    4622:	89 89       	ldd	r24, Y+17	; 0x11
    4624:	9a 89       	ldd	r25, Y+18	; 0x12
    4626:	01 97       	sbiw	r24, 0x01	; 1
    4628:	f1 f7       	brne	.-4      	; 0x4626 <wifi_connect+0x14e2>
    462a:	9a 8b       	std	Y+18, r25	; 0x12
    462c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    462e:	8b 89       	ldd	r24, Y+19	; 0x13
    4630:	9c 89       	ldd	r25, Y+20	; 0x14
    4632:	01 97       	sbiw	r24, 0x01	; 1
    4634:	9c 8b       	std	Y+20, r25	; 0x14
    4636:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4638:	8b 89       	ldd	r24, Y+19	; 0x13
    463a:	9c 89       	ldd	r25, Y+20	; 0x14
    463c:	00 97       	sbiw	r24, 0x00	; 0
    463e:	69 f7       	brne	.-38     	; 0x461a <wifi_connect+0x14d6>
    4640:	14 c0       	rjmp	.+40     	; 0x466a <wifi_connect+0x1526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4642:	6d 89       	ldd	r22, Y+21	; 0x15
    4644:	7e 89       	ldd	r23, Y+22	; 0x16
    4646:	8f 89       	ldd	r24, Y+23	; 0x17
    4648:	98 8d       	ldd	r25, Y+24	; 0x18
    464a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    464e:	dc 01       	movw	r26, r24
    4650:	cb 01       	movw	r24, r22
    4652:	9c 8b       	std	Y+20, r25	; 0x14
    4654:	8b 8b       	std	Y+19, r24	; 0x13
    4656:	8b 89       	ldd	r24, Y+19	; 0x13
    4658:	9c 89       	ldd	r25, Y+20	; 0x14
    465a:	98 8b       	std	Y+16, r25	; 0x10
    465c:	8f 87       	std	Y+15, r24	; 0x0f
    465e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4660:	98 89       	ldd	r25, Y+16	; 0x10
    4662:	01 97       	sbiw	r24, 0x01	; 1
    4664:	f1 f7       	brne	.-4      	; 0x4662 <wifi_connect+0x151e>
    4666:	98 8b       	std	Y+16, r25	; 0x10
    4668:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	Wifi_Buffer_Reset();
    466a:	0e 94 11 26 	call	0x4c22	; 0x4c22 <Wifi_Buffer_Reset>
	H_LCD_void_sendData('5');
    466e:	85 e3       	ldi	r24, 0x35	; 53
    4670:	0e 94 1e 2a 	call	0x543c	; 0x543c <H_LCD_void_sendData>
    4674:	80 e0       	ldi	r24, 0x00	; 0
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	aa e7       	ldi	r26, 0x7A	; 122
    467a:	b4 e4       	ldi	r27, 0x44	; 68
    467c:	8b 87       	std	Y+11, r24	; 0x0b
    467e:	9c 87       	std	Y+12, r25	; 0x0c
    4680:	ad 87       	std	Y+13, r26	; 0x0d
    4682:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4684:	6b 85       	ldd	r22, Y+11	; 0x0b
    4686:	7c 85       	ldd	r23, Y+12	; 0x0c
    4688:	8d 85       	ldd	r24, Y+13	; 0x0d
    468a:	9e 85       	ldd	r25, Y+14	; 0x0e
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	4a e7       	ldi	r20, 0x7A	; 122
    4692:	55 e4       	ldi	r21, 0x45	; 69
    4694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	8f 83       	std	Y+7, r24	; 0x07
    469e:	98 87       	std	Y+8, r25	; 0x08
    46a0:	a9 87       	std	Y+9, r26	; 0x09
    46a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46a4:	6f 81       	ldd	r22, Y+7	; 0x07
    46a6:	78 85       	ldd	r23, Y+8	; 0x08
    46a8:	89 85       	ldd	r24, Y+9	; 0x09
    46aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ac:	20 e0       	ldi	r18, 0x00	; 0
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	40 e8       	ldi	r20, 0x80	; 128
    46b2:	5f e3       	ldi	r21, 0x3F	; 63
    46b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46b8:	88 23       	and	r24, r24
    46ba:	2c f4       	brge	.+10     	; 0x46c6 <wifi_connect+0x1582>
		__ticks = 1;
    46bc:	81 e0       	ldi	r24, 0x01	; 1
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	9e 83       	std	Y+6, r25	; 0x06
    46c2:	8d 83       	std	Y+5, r24	; 0x05
    46c4:	3f c0       	rjmp	.+126    	; 0x4744 <wifi_connect+0x1600>
	else if (__tmp > 65535)
    46c6:	6f 81       	ldd	r22, Y+7	; 0x07
    46c8:	78 85       	ldd	r23, Y+8	; 0x08
    46ca:	89 85       	ldd	r24, Y+9	; 0x09
    46cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	3f ef       	ldi	r19, 0xFF	; 255
    46d2:	4f e7       	ldi	r20, 0x7F	; 127
    46d4:	57 e4       	ldi	r21, 0x47	; 71
    46d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46da:	18 16       	cp	r1, r24
    46dc:	4c f5       	brge	.+82     	; 0x4730 <wifi_connect+0x15ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46de:	6b 85       	ldd	r22, Y+11	; 0x0b
    46e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    46e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    46e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    46e6:	20 e0       	ldi	r18, 0x00	; 0
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    46ea:	40 e2       	ldi	r20, 0x20	; 32
    46ec:	51 e4       	ldi	r21, 0x41	; 65
    46ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46f2:	dc 01       	movw	r26, r24
    46f4:	cb 01       	movw	r24, r22
    46f6:	bc 01       	movw	r22, r24
    46f8:	cd 01       	movw	r24, r26
    46fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46fe:	dc 01       	movw	r26, r24
    4700:	cb 01       	movw	r24, r22
    4702:	9e 83       	std	Y+6, r25	; 0x06
    4704:	8d 83       	std	Y+5, r24	; 0x05
    4706:	0f c0       	rjmp	.+30     	; 0x4726 <wifi_connect+0x15e2>
    4708:	80 e9       	ldi	r24, 0x90	; 144
    470a:	91 e0       	ldi	r25, 0x01	; 1
    470c:	9c 83       	std	Y+4, r25	; 0x04
    470e:	8b 83       	std	Y+3, r24	; 0x03
    4710:	8b 81       	ldd	r24, Y+3	; 0x03
    4712:	9c 81       	ldd	r25, Y+4	; 0x04
    4714:	01 97       	sbiw	r24, 0x01	; 1
    4716:	f1 f7       	brne	.-4      	; 0x4714 <wifi_connect+0x15d0>
    4718:	9c 83       	std	Y+4, r25	; 0x04
    471a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    471c:	8d 81       	ldd	r24, Y+5	; 0x05
    471e:	9e 81       	ldd	r25, Y+6	; 0x06
    4720:	01 97       	sbiw	r24, 0x01	; 1
    4722:	9e 83       	std	Y+6, r25	; 0x06
    4724:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4726:	8d 81       	ldd	r24, Y+5	; 0x05
    4728:	9e 81       	ldd	r25, Y+6	; 0x06
    472a:	00 97       	sbiw	r24, 0x00	; 0
    472c:	69 f7       	brne	.-38     	; 0x4708 <wifi_connect+0x15c4>
    472e:	14 c0       	rjmp	.+40     	; 0x4758 <wifi_connect+0x1614>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4730:	6f 81       	ldd	r22, Y+7	; 0x07
    4732:	78 85       	ldd	r23, Y+8	; 0x08
    4734:	89 85       	ldd	r24, Y+9	; 0x09
    4736:	9a 85       	ldd	r25, Y+10	; 0x0a
    4738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    473c:	dc 01       	movw	r26, r24
    473e:	cb 01       	movw	r24, r22
    4740:	9e 83       	std	Y+6, r25	; 0x06
    4742:	8d 83       	std	Y+5, r24	; 0x05
    4744:	8d 81       	ldd	r24, Y+5	; 0x05
    4746:	9e 81       	ldd	r25, Y+6	; 0x06
    4748:	9a 83       	std	Y+2, r25	; 0x02
    474a:	89 83       	std	Y+1, r24	; 0x01
    474c:	89 81       	ldd	r24, Y+1	; 0x01
    474e:	9a 81       	ldd	r25, Y+2	; 0x02
    4750:	01 97       	sbiw	r24, 0x01	; 1
    4752:	f1 f7       	brne	.-4      	; 0x4750 <wifi_connect+0x160c>
    4754:	9a 83       	std	Y+2, r25	; 0x02
    4756:	89 83       	std	Y+1, r24	; 0x01
	//Wifi_Buffer_Reset();
	//H_LCD_void_sendData('6');
	//_delay_ms(1000);


	H_LCD_void_sendString("Connected");
    4758:	8d ee       	ldi	r24, 0xED	; 237
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	0e 94 2f 2a 	call	0x545e	; 0x545e <H_LCD_void_sendString>

}
    4760:	c2 51       	subi	r28, 0x12	; 18
    4762:	df 4f       	sbci	r29, 0xFF	; 255
    4764:	0f b6       	in	r0, 0x3f	; 63
    4766:	f8 94       	cli
    4768:	de bf       	out	0x3e, r29	; 62
    476a:	0f be       	out	0x3f, r0	; 63
    476c:	cd bf       	out	0x3d, r28	; 61
    476e:	cf 91       	pop	r28
    4770:	df 91       	pop	r29
    4772:	1f 91       	pop	r17
    4774:	0f 91       	pop	r16
    4776:	08 95       	ret

00004778 <Check_Wifi_Respones>:
/***********************************************************************/
/* Function to check wifi response without blocking nor time out */
/* only used for instantly checking */
/***********************************************************************/
void Check_Wifi_Respones(u8 *Wifi_Response , u8 *Error_Message)
{
    4778:	df 93       	push	r29
    477a:	cf 93       	push	r28
    477c:	00 d0       	rcall	.+0      	; 0x477e <Check_Wifi_Respones+0x6>
    477e:	00 d0       	rcall	.+0      	; 0x4780 <Check_Wifi_Respones+0x8>
    4780:	0f 92       	push	r0
    4782:	cd b7       	in	r28, 0x3d	; 61
    4784:	de b7       	in	r29, 0x3e	; 62
    4786:	9b 83       	std	Y+3, r25	; 0x03
    4788:	8a 83       	std	Y+2, r24	; 0x02
    478a:	7d 83       	std	Y+5, r23	; 0x05
    478c:	6c 83       	std	Y+4, r22	; 0x04
	u8 index =NULL;
    478e:	19 82       	std	Y+1, r1	; 0x01
	
	if((index = strstr(Rx_Buffer_UART, Wifi_Response)) != NULL)
    4790:	8a ec       	ldi	r24, 0xCA	; 202
    4792:	94 e0       	ldi	r25, 0x04	; 4
    4794:	2a 81       	ldd	r18, Y+2	; 0x02
    4796:	3b 81       	ldd	r19, Y+3	; 0x03
    4798:	b9 01       	movw	r22, r18
    479a:	0e 94 80 36 	call	0x6d00	; 0x6d00 <strstr>
    479e:	89 83       	std	Y+1, r24	; 0x01
    47a0:	89 81       	ldd	r24, Y+1	; 0x01
    47a2:	88 2f       	mov	r24, r24
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	00 97       	sbiw	r24, 0x00	; 0
    47a8:	49 f0       	breq	.+18     	; 0x47bc <Check_Wifi_Respones+0x44>
	{
		H_LCD_void_gotoXY(3,0);
    47aa:	83 e0       	ldi	r24, 0x03	; 3
    47ac:	60 e0       	ldi	r22, 0x00	; 0
    47ae:	0e 94 af 2a 	call	0x555e	; 0x555e <H_LCD_void_gotoXY>
		H_LCD_void_sendString(Wifi_Response);
    47b2:	8a 81       	ldd	r24, Y+2	; 0x02
    47b4:	9b 81       	ldd	r25, Y+3	; 0x03
    47b6:	0e 94 2f 2a 	call	0x545e	; 0x545e <H_LCD_void_sendString>
    47ba:	08 c0       	rjmp	.+16     	; 0x47cc <Check_Wifi_Respones+0x54>
	}
	else
	{
		H_LCD_void_gotoXY(3,0);
    47bc:	83 e0       	ldi	r24, 0x03	; 3
    47be:	60 e0       	ldi	r22, 0x00	; 0
    47c0:	0e 94 af 2a 	call	0x555e	; 0x555e <H_LCD_void_gotoXY>
		H_LCD_void_sendString(Rx_Buffer_UART);
    47c4:	8a ec       	ldi	r24, 0xCA	; 202
    47c6:	94 e0       	ldi	r25, 0x04	; 4
    47c8:	0e 94 2f 2a 	call	0x545e	; 0x545e <H_LCD_void_sendString>
		
	}
}
    47cc:	0f 90       	pop	r0
    47ce:	0f 90       	pop	r0
    47d0:	0f 90       	pop	r0
    47d2:	0f 90       	pop	r0
    47d4:	0f 90       	pop	r0
    47d6:	cf 91       	pop	r28
    47d8:	df 91       	pop	r29
    47da:	08 95       	ret

000047dc <Wifi_Wait_Respones>:

/*************************************************/
/* Function to check wifi response (blocking)  */
/*************************************************/
u8 Wifi_Wait_Respones(u8 *Wifi_Response)
{
    47dc:	df 93       	push	r29
    47de:	cf 93       	push	r28
    47e0:	cd b7       	in	r28, 0x3d	; 61
    47e2:	de b7       	in	r29, 0x3e	; 62
    47e4:	61 97       	sbiw	r28, 0x11	; 17
    47e6:	0f b6       	in	r0, 0x3f	; 63
    47e8:	f8 94       	cli
    47ea:	de bf       	out	0x3e, r29	; 62
    47ec:	0f be       	out	0x3f, r0	; 63
    47ee:	cd bf       	out	0x3d, r28	; 61
    47f0:	99 8b       	std	Y+17, r25	; 0x11
    47f2:	88 8b       	std	Y+16, r24	; 0x10
	/* set this response to 0 when you got response */
	u8 Response_Found =1;
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	8f 87       	std	Y+15, r24	; 0x0f
    47f8:	85 c0       	rjmp	.+266    	; 0x4904 <Wifi_Wait_Respones+0x128>
	while(Response_Found)
	{
		
		if(strstr(Rx_Buffer_UART, Wifi_Response) != NULL)
    47fa:	8a ec       	ldi	r24, 0xCA	; 202
    47fc:	94 e0       	ldi	r25, 0x04	; 4
    47fe:	28 89       	ldd	r18, Y+16	; 0x10
    4800:	39 89       	ldd	r19, Y+17	; 0x11
    4802:	b9 01       	movw	r22, r18
    4804:	0e 94 80 36 	call	0x6d00	; 0x6d00 <strstr>
    4808:	00 97       	sbiw	r24, 0x00	; 0
    480a:	31 f0       	breq	.+12     	; 0x4818 <Wifi_Wait_Respones+0x3c>
		{
			H_LCD_void_sendString(Wifi_Response);
    480c:	88 89       	ldd	r24, Y+16	; 0x10
    480e:	99 89       	ldd	r25, Y+17	; 0x11
    4810:	0e 94 2f 2a 	call	0x545e	; 0x545e <H_LCD_void_sendString>
			Response_Found = 0;
    4814:	1f 86       	std	Y+15, r1	; 0x0f
    4816:	04 c0       	rjmp	.+8      	; 0x4820 <Wifi_Wait_Respones+0x44>
			
			
		}
		else
		{
			H_LCD_void_sendString(Rx_Buffer_UART);
    4818:	8a ec       	ldi	r24, 0xCA	; 202
    481a:	94 e0       	ldi	r25, 0x04	; 4
    481c:	0e 94 2f 2a 	call	0x545e	; 0x545e <H_LCD_void_sendString>
    4820:	80 e0       	ldi	r24, 0x00	; 0
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	aa e7       	ldi	r26, 0x7A	; 122
    4826:	b4 e4       	ldi	r27, 0x44	; 68
    4828:	8b 87       	std	Y+11, r24	; 0x0b
    482a:	9c 87       	std	Y+12, r25	; 0x0c
    482c:	ad 87       	std	Y+13, r26	; 0x0d
    482e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4830:	6b 85       	ldd	r22, Y+11	; 0x0b
    4832:	7c 85       	ldd	r23, Y+12	; 0x0c
    4834:	8d 85       	ldd	r24, Y+13	; 0x0d
    4836:	9e 85       	ldd	r25, Y+14	; 0x0e
    4838:	20 e0       	ldi	r18, 0x00	; 0
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	4a e7       	ldi	r20, 0x7A	; 122
    483e:	55 e4       	ldi	r21, 0x45	; 69
    4840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4844:	dc 01       	movw	r26, r24
    4846:	cb 01       	movw	r24, r22
    4848:	8f 83       	std	Y+7, r24	; 0x07
    484a:	98 87       	std	Y+8, r25	; 0x08
    484c:	a9 87       	std	Y+9, r26	; 0x09
    484e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4850:	6f 81       	ldd	r22, Y+7	; 0x07
    4852:	78 85       	ldd	r23, Y+8	; 0x08
    4854:	89 85       	ldd	r24, Y+9	; 0x09
    4856:	9a 85       	ldd	r25, Y+10	; 0x0a
    4858:	20 e0       	ldi	r18, 0x00	; 0
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	40 e8       	ldi	r20, 0x80	; 128
    485e:	5f e3       	ldi	r21, 0x3F	; 63
    4860:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4864:	88 23       	and	r24, r24
    4866:	2c f4       	brge	.+10     	; 0x4872 <Wifi_Wait_Respones+0x96>
		__ticks = 1;
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	9e 83       	std	Y+6, r25	; 0x06
    486e:	8d 83       	std	Y+5, r24	; 0x05
    4870:	3f c0       	rjmp	.+126    	; 0x48f0 <Wifi_Wait_Respones+0x114>
	else if (__tmp > 65535)
    4872:	6f 81       	ldd	r22, Y+7	; 0x07
    4874:	78 85       	ldd	r23, Y+8	; 0x08
    4876:	89 85       	ldd	r24, Y+9	; 0x09
    4878:	9a 85       	ldd	r25, Y+10	; 0x0a
    487a:	20 e0       	ldi	r18, 0x00	; 0
    487c:	3f ef       	ldi	r19, 0xFF	; 255
    487e:	4f e7       	ldi	r20, 0x7F	; 127
    4880:	57 e4       	ldi	r21, 0x47	; 71
    4882:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4886:	18 16       	cp	r1, r24
    4888:	4c f5       	brge	.+82     	; 0x48dc <Wifi_Wait_Respones+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    488a:	6b 85       	ldd	r22, Y+11	; 0x0b
    488c:	7c 85       	ldd	r23, Y+12	; 0x0c
    488e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4890:	9e 85       	ldd	r25, Y+14	; 0x0e
    4892:	20 e0       	ldi	r18, 0x00	; 0
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	40 e2       	ldi	r20, 0x20	; 32
    4898:	51 e4       	ldi	r21, 0x41	; 65
    489a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    489e:	dc 01       	movw	r26, r24
    48a0:	cb 01       	movw	r24, r22
    48a2:	bc 01       	movw	r22, r24
    48a4:	cd 01       	movw	r24, r26
    48a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48aa:	dc 01       	movw	r26, r24
    48ac:	cb 01       	movw	r24, r22
    48ae:	9e 83       	std	Y+6, r25	; 0x06
    48b0:	8d 83       	std	Y+5, r24	; 0x05
    48b2:	0f c0       	rjmp	.+30     	; 0x48d2 <Wifi_Wait_Respones+0xf6>
    48b4:	80 e9       	ldi	r24, 0x90	; 144
    48b6:	91 e0       	ldi	r25, 0x01	; 1
    48b8:	9c 83       	std	Y+4, r25	; 0x04
    48ba:	8b 83       	std	Y+3, r24	; 0x03
    48bc:	8b 81       	ldd	r24, Y+3	; 0x03
    48be:	9c 81       	ldd	r25, Y+4	; 0x04
    48c0:	01 97       	sbiw	r24, 0x01	; 1
    48c2:	f1 f7       	brne	.-4      	; 0x48c0 <Wifi_Wait_Respones+0xe4>
    48c4:	9c 83       	std	Y+4, r25	; 0x04
    48c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48c8:	8d 81       	ldd	r24, Y+5	; 0x05
    48ca:	9e 81       	ldd	r25, Y+6	; 0x06
    48cc:	01 97       	sbiw	r24, 0x01	; 1
    48ce:	9e 83       	std	Y+6, r25	; 0x06
    48d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48d2:	8d 81       	ldd	r24, Y+5	; 0x05
    48d4:	9e 81       	ldd	r25, Y+6	; 0x06
    48d6:	00 97       	sbiw	r24, 0x00	; 0
    48d8:	69 f7       	brne	.-38     	; 0x48b4 <Wifi_Wait_Respones+0xd8>
    48da:	14 c0       	rjmp	.+40     	; 0x4904 <Wifi_Wait_Respones+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48dc:	6f 81       	ldd	r22, Y+7	; 0x07
    48de:	78 85       	ldd	r23, Y+8	; 0x08
    48e0:	89 85       	ldd	r24, Y+9	; 0x09
    48e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e8:	dc 01       	movw	r26, r24
    48ea:	cb 01       	movw	r24, r22
    48ec:	9e 83       	std	Y+6, r25	; 0x06
    48ee:	8d 83       	std	Y+5, r24	; 0x05
    48f0:	8d 81       	ldd	r24, Y+5	; 0x05
    48f2:	9e 81       	ldd	r25, Y+6	; 0x06
    48f4:	9a 83       	std	Y+2, r25	; 0x02
    48f6:	89 83       	std	Y+1, r24	; 0x01
    48f8:	89 81       	ldd	r24, Y+1	; 0x01
    48fa:	9a 81       	ldd	r25, Y+2	; 0x02
    48fc:	01 97       	sbiw	r24, 0x01	; 1
    48fe:	f1 f7       	brne	.-4      	; 0x48fc <Wifi_Wait_Respones+0x120>
    4900:	9a 83       	std	Y+2, r25	; 0x02
    4902:	89 83       	std	Y+1, r24	; 0x01
/*************************************************/
u8 Wifi_Wait_Respones(u8 *Wifi_Response)
{
	/* set this response to 0 when you got response */
	u8 Response_Found =1;
	while(Response_Found)
    4904:	8f 85       	ldd	r24, Y+15	; 0x0f
    4906:	88 23       	and	r24, r24
    4908:	09 f0       	breq	.+2      	; 0x490c <Wifi_Wait_Respones+0x130>
    490a:	77 cf       	rjmp	.-274    	; 0x47fa <Wifi_Wait_Respones+0x1e>
			H_LCD_void_sendString(Rx_Buffer_UART);
		}
		_delay_ms(1000);
	}
	
	return 1;
    490c:	81 e0       	ldi	r24, 0x01	; 1
	
}
    490e:	61 96       	adiw	r28, 0x11	; 17
    4910:	0f b6       	in	r0, 0x3f	; 63
    4912:	f8 94       	cli
    4914:	de bf       	out	0x3e, r29	; 62
    4916:	0f be       	out	0x3f, r0	; 63
    4918:	cd bf       	out	0x3d, r28	; 61
    491a:	cf 91       	pop	r28
    491c:	df 91       	pop	r29
    491e:	08 95       	ret

00004920 <Wifi_Wait_Data>:

/*************************************************/
/* Function to Recive data from wifi and check for the required data  */
/*************************************************/
u8 Wifi_Wait_Data(u8 Wifi_Data)
{
    4920:	df 93       	push	r29
    4922:	cf 93       	push	r28
    4924:	00 d0       	rcall	.+0      	; 0x4926 <Wifi_Wait_Data+0x6>
    4926:	00 d0       	rcall	.+0      	; 0x4928 <Wifi_Wait_Data+0x8>
    4928:	0f 92       	push	r0
    492a:	cd b7       	in	r28, 0x3d	; 61
    492c:	de b7       	in	r29, 0x3e	; 62
    492e:	8d 83       	std	Y+5, r24	; 0x05
	/* set this response to 0 when you got response */
	u8 Data_Found =1;
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	8c 83       	std	Y+4, r24	; 0x04
	u16 timeout = 5;
    4934:	85 e0       	ldi	r24, 0x05	; 5
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	9b 83       	std	Y+3, r25	; 0x03
    493a:	8a 83       	std	Y+2, r24	; 0x02
	/* Return state = 1 when data found  */
	u8 Return_State = 0;
    493c:	19 82       	std	Y+1, r1	; 0x01
    493e:	13 c0       	rjmp	.+38     	; 0x4966 <Wifi_Wait_Data+0x46>
	
	while(Data_Found && timeout )
	{
		
		if(strchr(Rx_Buffer_UART, Wifi_Data) != NULL)
    4940:	8d 81       	ldd	r24, Y+5	; 0x05
    4942:	28 2f       	mov	r18, r24
    4944:	30 e0       	ldi	r19, 0x00	; 0
    4946:	8a ec       	ldi	r24, 0xCA	; 202
    4948:	94 e0       	ldi	r25, 0x04	; 4
    494a:	b9 01       	movw	r22, r18
    494c:	0e 94 6c 36 	call	0x6cd8	; 0x6cd8 <strchr>
    4950:	00 97       	sbiw	r24, 0x00	; 0
    4952:	21 f0       	breq	.+8      	; 0x495c <Wifi_Wait_Data+0x3c>
		{
			//H_LCD_void_sendString(Wifi_Data);
			Data_Found = 0;
    4954:	1c 82       	std	Y+4, r1	; 0x04
			//Wifi_Buffer_Reset();
			Return_State = 1;
    4956:	81 e0       	ldi	r24, 0x01	; 1
    4958:	89 83       	std	Y+1, r24	; 0x01
    495a:	05 c0       	rjmp	.+10     	; 0x4966 <Wifi_Wait_Data+0x46>
		}
		else
		{
			//H_LCD_void_sendString(Rx_Buffer_UART);
			timeout--;
    495c:	8a 81       	ldd	r24, Y+2	; 0x02
    495e:	9b 81       	ldd	r25, Y+3	; 0x03
    4960:	01 97       	sbiw	r24, 0x01	; 1
    4962:	9b 83       	std	Y+3, r25	; 0x03
    4964:	8a 83       	std	Y+2, r24	; 0x02
	u8 Data_Found =1;
	u16 timeout = 5;
	/* Return state = 1 when data found  */
	u8 Return_State = 0;
	
	while(Data_Found && timeout )
    4966:	8c 81       	ldd	r24, Y+4	; 0x04
    4968:	88 23       	and	r24, r24
    496a:	21 f0       	breq	.+8      	; 0x4974 <Wifi_Wait_Data+0x54>
    496c:	8a 81       	ldd	r24, Y+2	; 0x02
    496e:	9b 81       	ldd	r25, Y+3	; 0x03
    4970:	00 97       	sbiw	r24, 0x00	; 0
    4972:	31 f7       	brne	.-52     	; 0x4940 <Wifi_Wait_Data+0x20>
			timeout--;
		}
		//_delay_ms(1000);
	}
	
	return Return_State;
    4974:	89 81       	ldd	r24, Y+1	; 0x01
}
    4976:	0f 90       	pop	r0
    4978:	0f 90       	pop	r0
    497a:	0f 90       	pop	r0
    497c:	0f 90       	pop	r0
    497e:	0f 90       	pop	r0
    4980:	cf 91       	pop	r28
    4982:	df 91       	pop	r29
    4984:	08 95       	ret

00004986 <Wifi_Send_Data>:

/*************************************************/
/* Function to Send Data to server  */
/*************************************************/
void Wifi_Send_Data(u8 Data)
{
    4986:	df 93       	push	r29
    4988:	cf 93       	push	r28
    498a:	cd b7       	in	r28, 0x3d	; 61
    498c:	de b7       	in	r29, 0x3e	; 62
    498e:	2f 97       	sbiw	r28, 0x0f	; 15
    4990:	0f b6       	in	r0, 0x3f	; 63
    4992:	f8 94       	cli
    4994:	de bf       	out	0x3e, r29	; 62
    4996:	0f be       	out	0x3f, r0	; 63
    4998:	cd bf       	out	0x3d, r28	; 61
    499a:	8f 87       	std	Y+15, r24	; 0x0f

	UART_sendString("AT+CIPSEND=17\r\n");
    499c:	87 ef       	ldi	r24, 0xF7	; 247
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	0e 94 66 07 	call	0xecc	; 0xecc <UART_sendString>
    49a4:	80 e0       	ldi	r24, 0x00	; 0
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	aa ef       	ldi	r26, 0xFA	; 250
    49aa:	b3 e4       	ldi	r27, 0x43	; 67
    49ac:	8b 87       	std	Y+11, r24	; 0x0b
    49ae:	9c 87       	std	Y+12, r25	; 0x0c
    49b0:	ad 87       	std	Y+13, r26	; 0x0d
    49b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    49b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    49b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    49ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    49bc:	20 e0       	ldi	r18, 0x00	; 0
    49be:	30 e0       	ldi	r19, 0x00	; 0
    49c0:	4a e7       	ldi	r20, 0x7A	; 122
    49c2:	55 e4       	ldi	r21, 0x45	; 69
    49c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49c8:	dc 01       	movw	r26, r24
    49ca:	cb 01       	movw	r24, r22
    49cc:	8f 83       	std	Y+7, r24	; 0x07
    49ce:	98 87       	std	Y+8, r25	; 0x08
    49d0:	a9 87       	std	Y+9, r26	; 0x09
    49d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49d4:	6f 81       	ldd	r22, Y+7	; 0x07
    49d6:	78 85       	ldd	r23, Y+8	; 0x08
    49d8:	89 85       	ldd	r24, Y+9	; 0x09
    49da:	9a 85       	ldd	r25, Y+10	; 0x0a
    49dc:	20 e0       	ldi	r18, 0x00	; 0
    49de:	30 e0       	ldi	r19, 0x00	; 0
    49e0:	40 e8       	ldi	r20, 0x80	; 128
    49e2:	5f e3       	ldi	r21, 0x3F	; 63
    49e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49e8:	88 23       	and	r24, r24
    49ea:	2c f4       	brge	.+10     	; 0x49f6 <Wifi_Send_Data+0x70>
		__ticks = 1;
    49ec:	81 e0       	ldi	r24, 0x01	; 1
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	9e 83       	std	Y+6, r25	; 0x06
    49f2:	8d 83       	std	Y+5, r24	; 0x05
    49f4:	3f c0       	rjmp	.+126    	; 0x4a74 <Wifi_Send_Data+0xee>
	else if (__tmp > 65535)
    49f6:	6f 81       	ldd	r22, Y+7	; 0x07
    49f8:	78 85       	ldd	r23, Y+8	; 0x08
    49fa:	89 85       	ldd	r24, Y+9	; 0x09
    49fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    49fe:	20 e0       	ldi	r18, 0x00	; 0
    4a00:	3f ef       	ldi	r19, 0xFF	; 255
    4a02:	4f e7       	ldi	r20, 0x7F	; 127
    4a04:	57 e4       	ldi	r21, 0x47	; 71
    4a06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a0a:	18 16       	cp	r1, r24
    4a0c:	4c f5       	brge	.+82     	; 0x4a60 <Wifi_Send_Data+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a10:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a12:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a14:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a16:	20 e0       	ldi	r18, 0x00	; 0
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	40 e2       	ldi	r20, 0x20	; 32
    4a1c:	51 e4       	ldi	r21, 0x41	; 65
    4a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a22:	dc 01       	movw	r26, r24
    4a24:	cb 01       	movw	r24, r22
    4a26:	bc 01       	movw	r22, r24
    4a28:	cd 01       	movw	r24, r26
    4a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a2e:	dc 01       	movw	r26, r24
    4a30:	cb 01       	movw	r24, r22
    4a32:	9e 83       	std	Y+6, r25	; 0x06
    4a34:	8d 83       	std	Y+5, r24	; 0x05
    4a36:	0f c0       	rjmp	.+30     	; 0x4a56 <Wifi_Send_Data+0xd0>
    4a38:	80 e9       	ldi	r24, 0x90	; 144
    4a3a:	91 e0       	ldi	r25, 0x01	; 1
    4a3c:	9c 83       	std	Y+4, r25	; 0x04
    4a3e:	8b 83       	std	Y+3, r24	; 0x03
    4a40:	8b 81       	ldd	r24, Y+3	; 0x03
    4a42:	9c 81       	ldd	r25, Y+4	; 0x04
    4a44:	01 97       	sbiw	r24, 0x01	; 1
    4a46:	f1 f7       	brne	.-4      	; 0x4a44 <Wifi_Send_Data+0xbe>
    4a48:	9c 83       	std	Y+4, r25	; 0x04
    4a4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    4a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    4a50:	01 97       	sbiw	r24, 0x01	; 1
    4a52:	9e 83       	std	Y+6, r25	; 0x06
    4a54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a56:	8d 81       	ldd	r24, Y+5	; 0x05
    4a58:	9e 81       	ldd	r25, Y+6	; 0x06
    4a5a:	00 97       	sbiw	r24, 0x00	; 0
    4a5c:	69 f7       	brne	.-38     	; 0x4a38 <Wifi_Send_Data+0xb2>
    4a5e:	14 c0       	rjmp	.+40     	; 0x4a88 <Wifi_Send_Data+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a60:	6f 81       	ldd	r22, Y+7	; 0x07
    4a62:	78 85       	ldd	r23, Y+8	; 0x08
    4a64:	89 85       	ldd	r24, Y+9	; 0x09
    4a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a6c:	dc 01       	movw	r26, r24
    4a6e:	cb 01       	movw	r24, r22
    4a70:	9e 83       	std	Y+6, r25	; 0x06
    4a72:	8d 83       	std	Y+5, r24	; 0x05
    4a74:	8d 81       	ldd	r24, Y+5	; 0x05
    4a76:	9e 81       	ldd	r25, Y+6	; 0x06
    4a78:	9a 83       	std	Y+2, r25	; 0x02
    4a7a:	89 83       	std	Y+1, r24	; 0x01
    4a7c:	89 81       	ldd	r24, Y+1	; 0x01
    4a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a80:	01 97       	sbiw	r24, 0x01	; 1
    4a82:	f1 f7       	brne	.-4      	; 0x4a80 <Wifi_Send_Data+0xfa>
    4a84:	9a 83       	std	Y+2, r25	; 0x02
    4a86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	Check_Wifi_Respones("OK","ERRORSS");
    4a88:	87 e6       	ldi	r24, 0x67	; 103
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	27 e0       	ldi	r18, 0x07	; 7
    4a8e:	31 e0       	ldi	r19, 0x01	; 1
    4a90:	b9 01       	movw	r22, r18
    4a92:	0e 94 bc 23 	call	0x4778	; 0x4778 <Check_Wifi_Respones>
	UART_sendString(Data);
    4a96:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a98:	88 2f       	mov	r24, r24
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	0e 94 66 07 	call	0xecc	; 0xecc <UART_sendString>
}
    4aa0:	2f 96       	adiw	r28, 0x0f	; 15
    4aa2:	0f b6       	in	r0, 0x3f	; 63
    4aa4:	f8 94       	cli
    4aa6:	de bf       	out	0x3e, r29	; 62
    4aa8:	0f be       	out	0x3f, r0	; 63
    4aaa:	cd bf       	out	0x3d, r28	; 61
    4aac:	cf 91       	pop	r28
    4aae:	df 91       	pop	r29
    4ab0:	08 95       	ret

00004ab2 <Wifi_Send_Data2>:

void Wifi_Send_Data2(u8 *Data)
{
    4ab2:	df 93       	push	r29
    4ab4:	cf 93       	push	r28
    4ab6:	cd b7       	in	r28, 0x3d	; 61
    4ab8:	de b7       	in	r29, 0x3e	; 62
    4aba:	a6 97       	sbiw	r28, 0x26	; 38
    4abc:	0f b6       	in	r0, 0x3f	; 63
    4abe:	f8 94       	cli
    4ac0:	de bf       	out	0x3e, r29	; 62
    4ac2:	0f be       	out	0x3f, r0	; 63
    4ac4:	cd bf       	out	0x3d, r28	; 61
    4ac6:	9e a3       	std	Y+38, r25	; 0x26
    4ac8:	8d a3       	std	Y+37, r24	; 0x25
	u16 Len = strlen(Data);
    4aca:	8d a1       	ldd	r24, Y+37	; 0x25
    4acc:	9e a1       	ldd	r25, Y+38	; 0x26
    4ace:	0e 94 77 36 	call	0x6cee	; 0x6cee <strlen>
    4ad2:	98 8b       	std	Y+16, r25	; 0x10
    4ad4:	8f 87       	std	Y+15, r24	; 0x0f
	 char buffer[20];
	 
	sprintf(buffer, "AT+CIPSEND=%d\r\n",Len);
    4ad6:	00 d0       	rcall	.+0      	; 0x4ad8 <Wifi_Send_Data2+0x26>
    4ad8:	00 d0       	rcall	.+0      	; 0x4ada <Wifi_Send_Data2+0x28>
    4ada:	00 d0       	rcall	.+0      	; 0x4adc <Wifi_Send_Data2+0x2a>
    4adc:	ed b7       	in	r30, 0x3d	; 61
    4ade:	fe b7       	in	r31, 0x3e	; 62
    4ae0:	31 96       	adiw	r30, 0x01	; 1
    4ae2:	ce 01       	movw	r24, r28
    4ae4:	41 96       	adiw	r24, 0x11	; 17
    4ae6:	91 83       	std	Z+1, r25	; 0x01
    4ae8:	80 83       	st	Z, r24
    4aea:	8f e0       	ldi	r24, 0x0F	; 15
    4aec:	91 e0       	ldi	r25, 0x01	; 1
    4aee:	93 83       	std	Z+3, r25	; 0x03
    4af0:	82 83       	std	Z+2, r24	; 0x02
    4af2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4af4:	98 89       	ldd	r25, Y+16	; 0x10
    4af6:	95 83       	std	Z+5, r25	; 0x05
    4af8:	84 83       	std	Z+4, r24	; 0x04
    4afa:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <sprintf>
    4afe:	8d b7       	in	r24, 0x3d	; 61
    4b00:	9e b7       	in	r25, 0x3e	; 62
    4b02:	06 96       	adiw	r24, 0x06	; 6
    4b04:	0f b6       	in	r0, 0x3f	; 63
    4b06:	f8 94       	cli
    4b08:	9e bf       	out	0x3e, r25	; 62
    4b0a:	0f be       	out	0x3f, r0	; 63
    4b0c:	8d bf       	out	0x3d, r24	; 61
	
	UART_sendString(buffer);
    4b0e:	ce 01       	movw	r24, r28
    4b10:	41 96       	adiw	r24, 0x11	; 17
    4b12:	0e 94 66 07 	call	0xecc	; 0xecc <UART_sendString>
    4b16:	80 e0       	ldi	r24, 0x00	; 0
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	a8 e4       	ldi	r26, 0x48	; 72
    4b1c:	b2 e4       	ldi	r27, 0x42	; 66
    4b1e:	8b 87       	std	Y+11, r24	; 0x0b
    4b20:	9c 87       	std	Y+12, r25	; 0x0c
    4b22:	ad 87       	std	Y+13, r26	; 0x0d
    4b24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b2e:	20 e0       	ldi	r18, 0x00	; 0
    4b30:	30 e0       	ldi	r19, 0x00	; 0
    4b32:	4a e7       	ldi	r20, 0x7A	; 122
    4b34:	55 e4       	ldi	r21, 0x45	; 69
    4b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b3a:	dc 01       	movw	r26, r24
    4b3c:	cb 01       	movw	r24, r22
    4b3e:	8f 83       	std	Y+7, r24	; 0x07
    4b40:	98 87       	std	Y+8, r25	; 0x08
    4b42:	a9 87       	std	Y+9, r26	; 0x09
    4b44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b46:	6f 81       	ldd	r22, Y+7	; 0x07
    4b48:	78 85       	ldd	r23, Y+8	; 0x08
    4b4a:	89 85       	ldd	r24, Y+9	; 0x09
    4b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b4e:	20 e0       	ldi	r18, 0x00	; 0
    4b50:	30 e0       	ldi	r19, 0x00	; 0
    4b52:	40 e8       	ldi	r20, 0x80	; 128
    4b54:	5f e3       	ldi	r21, 0x3F	; 63
    4b56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b5a:	88 23       	and	r24, r24
    4b5c:	2c f4       	brge	.+10     	; 0x4b68 <Wifi_Send_Data2+0xb6>
		__ticks = 1;
    4b5e:	81 e0       	ldi	r24, 0x01	; 1
    4b60:	90 e0       	ldi	r25, 0x00	; 0
    4b62:	9e 83       	std	Y+6, r25	; 0x06
    4b64:	8d 83       	std	Y+5, r24	; 0x05
    4b66:	3f c0       	rjmp	.+126    	; 0x4be6 <Wifi_Send_Data2+0x134>
	else if (__tmp > 65535)
    4b68:	6f 81       	ldd	r22, Y+7	; 0x07
    4b6a:	78 85       	ldd	r23, Y+8	; 0x08
    4b6c:	89 85       	ldd	r24, Y+9	; 0x09
    4b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b70:	20 e0       	ldi	r18, 0x00	; 0
    4b72:	3f ef       	ldi	r19, 0xFF	; 255
    4b74:	4f e7       	ldi	r20, 0x7F	; 127
    4b76:	57 e4       	ldi	r21, 0x47	; 71
    4b78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b7c:	18 16       	cp	r1, r24
    4b7e:	4c f5       	brge	.+82     	; 0x4bd2 <Wifi_Send_Data2+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b80:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b82:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b88:	20 e0       	ldi	r18, 0x00	; 0
    4b8a:	30 e0       	ldi	r19, 0x00	; 0
    4b8c:	40 e2       	ldi	r20, 0x20	; 32
    4b8e:	51 e4       	ldi	r21, 0x41	; 65
    4b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b94:	dc 01       	movw	r26, r24
    4b96:	cb 01       	movw	r24, r22
    4b98:	bc 01       	movw	r22, r24
    4b9a:	cd 01       	movw	r24, r26
    4b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ba0:	dc 01       	movw	r26, r24
    4ba2:	cb 01       	movw	r24, r22
    4ba4:	9e 83       	std	Y+6, r25	; 0x06
    4ba6:	8d 83       	std	Y+5, r24	; 0x05
    4ba8:	0f c0       	rjmp	.+30     	; 0x4bc8 <Wifi_Send_Data2+0x116>
    4baa:	80 e9       	ldi	r24, 0x90	; 144
    4bac:	91 e0       	ldi	r25, 0x01	; 1
    4bae:	9c 83       	std	Y+4, r25	; 0x04
    4bb0:	8b 83       	std	Y+3, r24	; 0x03
    4bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    4bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    4bb6:	01 97       	sbiw	r24, 0x01	; 1
    4bb8:	f1 f7       	brne	.-4      	; 0x4bb6 <Wifi_Send_Data2+0x104>
    4bba:	9c 83       	std	Y+4, r25	; 0x04
    4bbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    4bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc2:	01 97       	sbiw	r24, 0x01	; 1
    4bc4:	9e 83       	std	Y+6, r25	; 0x06
    4bc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    4bca:	9e 81       	ldd	r25, Y+6	; 0x06
    4bcc:	00 97       	sbiw	r24, 0x00	; 0
    4bce:	69 f7       	brne	.-38     	; 0x4baa <Wifi_Send_Data2+0xf8>
    4bd0:	14 c0       	rjmp	.+40     	; 0x4bfa <Wifi_Send_Data2+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    4bd4:	78 85       	ldd	r23, Y+8	; 0x08
    4bd6:	89 85       	ldd	r24, Y+9	; 0x09
    4bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bde:	dc 01       	movw	r26, r24
    4be0:	cb 01       	movw	r24, r22
    4be2:	9e 83       	std	Y+6, r25	; 0x06
    4be4:	8d 83       	std	Y+5, r24	; 0x05
    4be6:	8d 81       	ldd	r24, Y+5	; 0x05
    4be8:	9e 81       	ldd	r25, Y+6	; 0x06
    4bea:	9a 83       	std	Y+2, r25	; 0x02
    4bec:	89 83       	std	Y+1, r24	; 0x01
    4bee:	89 81       	ldd	r24, Y+1	; 0x01
    4bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    4bf2:	01 97       	sbiw	r24, 0x01	; 1
    4bf4:	f1 f7       	brne	.-4      	; 0x4bf2 <Wifi_Send_Data2+0x140>
    4bf6:	9a 83       	std	Y+2, r25	; 0x02
    4bf8:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(50);
	Check_Wifi_Respones("OK","ERRORSS");
    4bfa:	87 e6       	ldi	r24, 0x67	; 103
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	27 e0       	ldi	r18, 0x07	; 7
    4c00:	31 e0       	ldi	r19, 0x01	; 1
    4c02:	b9 01       	movw	r22, r18
    4c04:	0e 94 bc 23 	call	0x4778	; 0x4778 <Check_Wifi_Respones>
	UART_sendString(Data);
    4c08:	8d a1       	ldd	r24, Y+37	; 0x25
    4c0a:	9e a1       	ldd	r25, Y+38	; 0x26
    4c0c:	0e 94 66 07 	call	0xecc	; 0xecc <UART_sendString>
}
    4c10:	a6 96       	adiw	r28, 0x26	; 38
    4c12:	0f b6       	in	r0, 0x3f	; 63
    4c14:	f8 94       	cli
    4c16:	de bf       	out	0x3e, r29	; 62
    4c18:	0f be       	out	0x3f, r0	; 63
    4c1a:	cd bf       	out	0x3d, r28	; 61
    4c1c:	cf 91       	pop	r28
    4c1e:	df 91       	pop	r29
    4c20:	08 95       	ret

00004c22 <Wifi_Buffer_Reset>:

/*************************************************/
/* Function to Reset Wifi Buffer  */
/*************************************************/
void Wifi_Buffer_Reset()
{
    4c22:	df 93       	push	r29
    4c24:	cf 93       	push	r28
    4c26:	00 d0       	rcall	.+0      	; 0x4c28 <Wifi_Buffer_Reset+0x6>
    4c28:	cd b7       	in	r28, 0x3d	; 61
    4c2a:	de b7       	in	r29, 0x3e	; 62
	
	/* fill the buffer with 5 to reset */
	for(int j =0; j <UART_BUFFER_SIZE + 1; j++)
    4c2c:	1a 82       	std	Y+2, r1	; 0x02
    4c2e:	19 82       	std	Y+1, r1	; 0x01
    4c30:	0c c0       	rjmp	.+24     	; 0x4c4a <Wifi_Buffer_Reset+0x28>
	{
		Rx_Buffer_UART[j] = '9';
    4c32:	89 81       	ldd	r24, Y+1	; 0x01
    4c34:	9a 81       	ldd	r25, Y+2	; 0x02
    4c36:	fc 01       	movw	r30, r24
    4c38:	e6 53       	subi	r30, 0x36	; 54
    4c3a:	fb 4f       	sbci	r31, 0xFB	; 251
    4c3c:	89 e3       	ldi	r24, 0x39	; 57
    4c3e:	80 83       	st	Z, r24
/*************************************************/
void Wifi_Buffer_Reset()
{
	
	/* fill the buffer with 5 to reset */
	for(int j =0; j <UART_BUFFER_SIZE + 1; j++)
    4c40:	89 81       	ldd	r24, Y+1	; 0x01
    4c42:	9a 81       	ldd	r25, Y+2	; 0x02
    4c44:	01 96       	adiw	r24, 0x01	; 1
    4c46:	9a 83       	std	Y+2, r25	; 0x02
    4c48:	89 83       	std	Y+1, r24	; 0x01
    4c4a:	89 81       	ldd	r24, Y+1	; 0x01
    4c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c4e:	8d 33       	cpi	r24, 0x3D	; 61
    4c50:	91 05       	cpc	r25, r1
    4c52:	7c f3       	brlt	.-34     	; 0x4c32 <Wifi_Buffer_Reset+0x10>
	{
		Rx_Buffer_UART[j] = '9';
	}
	
	RX_Wr_Index_UART = 0;
    4c54:	10 92 c7 04 	sts	0x04C7, r1
	RX_Rd_Index_UART = 0;
    4c58:	10 92 c8 04 	sts	0x04C8, r1
	RX_Counter_UART = 0;
    4c5c:	10 92 c9 04 	sts	0x04C9, r1
}
    4c60:	0f 90       	pop	r0
    4c62:	0f 90       	pop	r0
    4c64:	cf 91       	pop	r28
    4c66:	df 91       	pop	r29
    4c68:	08 95       	ret

00004c6a <Wifi_Response_Reciver_UART_CallBack>:
/****************************************************************************/
/* wifi callback funtion to be passed to UART ISR to recive wifi responses */
/* then store it in a buffer */
/****************************************************************************/
void Wifi_Response_Reciver_UART_CallBack()
{
    4c6a:	df 93       	push	r29
    4c6c:	cf 93       	push	r28
    4c6e:	0f 92       	push	r0
    4c70:	cd b7       	in	r28, 0x3d	; 61
    4c72:	de b7       	in	r29, 0x3e	; 62
	
	u8 rx_byte;
	rx_byte = UART_UDR_REG;	/*you can not access a register inside HAL layer*/
    4c74:	ec e2       	ldi	r30, 0x2C	; 44
    4c76:	f0 e0       	ldi	r31, 0x00	; 0
    4c78:	80 81       	ld	r24, Z
    4c7a:	89 83       	std	Y+1, r24	; 0x01
	Rx_Buffer_UART[RX_Wr_Index_UART] = rx_byte;  //s put received char in buffer
    4c7c:	80 91 c7 04 	lds	r24, 0x04C7
    4c80:	88 2f       	mov	r24, r24
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	fc 01       	movw	r30, r24
    4c86:	e6 53       	subi	r30, 0x36	; 54
    4c88:	fb 4f       	sbci	r31, 0xFB	; 251
    4c8a:	89 81       	ldd	r24, Y+1	; 0x01
    4c8c:	80 83       	st	Z, r24
	if (++RX_Wr_Index_UART > UART_BUFFER_SIZE)
    4c8e:	80 91 c7 04 	lds	r24, 0x04C7
    4c92:	8f 5f       	subi	r24, 0xFF	; 255
    4c94:	80 93 c7 04 	sts	0x04C7, r24
    4c98:	80 91 c7 04 	lds	r24, 0x04C7
    4c9c:	8d 33       	cpi	r24, 0x3D	; 61
    4c9e:	10 f0       	brcs	.+4      	; 0x4ca4 <Wifi_Response_Reciver_UART_CallBack+0x3a>
	RX_Wr_Index_UART = 0;
    4ca0:	10 92 c7 04 	sts	0x04C7, r1
	if (++RX_Counter_UART > UART_BUFFER_SIZE) // keep a character count
    4ca4:	80 91 c9 04 	lds	r24, 0x04C9
    4ca8:	8f 5f       	subi	r24, 0xFF	; 255
    4caa:	80 93 c9 04 	sts	0x04C9, r24
    4cae:	80 91 c9 04 	lds	r24, 0x04C9
    4cb2:	8d 33       	cpi	r24, 0x3D	; 61
    4cb4:	18 f0       	brcs	.+6      	; 0x4cbc <Wifi_Response_Reciver_UART_CallBack+0x52>
	{
		RX_Counter_UART = UART_BUFFER_SIZE;  //;  if too many chars came
    4cb6:	8c e3       	ldi	r24, 0x3C	; 60
    4cb8:	80 93 c9 04 	sts	0x04C9, r24

	}
	
}
    4cbc:	0f 90       	pop	r0
    4cbe:	cf 91       	pop	r28
    4cc0:	df 91       	pop	r29
    4cc2:	08 95       	ret

00004cc4 <H_LM35_enu_getTemp>:
 */
#include "Error_State.h"
#include "ADC_int.h"
#include "LM35_int.h"

ES_t H_LM35_enu_getTemp(ADC_cfg_type* copy_LM35_cfg, u32* copy_temp){
    4cc4:	df 93       	push	r29
    4cc6:	cf 93       	push	r28
    4cc8:	cd b7       	in	r28, 0x3d	; 61
    4cca:	de b7       	in	r29, 0x3e	; 62
    4ccc:	27 97       	sbiw	r28, 0x07	; 7
    4cce:	0f b6       	in	r0, 0x3f	; 63
    4cd0:	f8 94       	cli
    4cd2:	de bf       	out	0x3e, r29	; 62
    4cd4:	0f be       	out	0x3f, r0	; 63
    4cd6:	cd bf       	out	0x3d, r28	; 61
    4cd8:	9d 83       	std	Y+5, r25	; 0x05
    4cda:	8c 83       	std	Y+4, r24	; 0x04
    4cdc:	7f 83       	std	Y+7, r23	; 0x07
    4cde:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    4ce0:	19 82       	std	Y+1, r1	; 0x01
	u16 digital_val;
	if(copy_LM35_cfg != NULL && copy_temp != NULL){
    4ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    4ce6:	00 97       	sbiw	r24, 0x00	; 0
    4ce8:	79 f1       	breq	.+94     	; 0x4d48 <H_LM35_enu_getTemp+0x84>
    4cea:	8e 81       	ldd	r24, Y+6	; 0x06
    4cec:	9f 81       	ldd	r25, Y+7	; 0x07
    4cee:	00 97       	sbiw	r24, 0x00	; 0
    4cf0:	59 f1       	breq	.+86     	; 0x4d48 <H_LM35_enu_getTemp+0x84>
		M_ADC_enu_init(*copy_LM35_cfg);
    4cf2:	ec 81       	ldd	r30, Y+4	; 0x04
    4cf4:	fd 81       	ldd	r31, Y+5	; 0x05
    4cf6:	20 81       	ld	r18, Z
    4cf8:	31 81       	ldd	r19, Z+1	; 0x01
    4cfa:	42 81       	ldd	r20, Z+2	; 0x02
    4cfc:	53 81       	ldd	r21, Z+3	; 0x03
    4cfe:	64 81       	ldd	r22, Z+4	; 0x04
    4d00:	75 81       	ldd	r23, Z+5	; 0x05
    4d02:	86 81       	ldd	r24, Z+6	; 0x06
    4d04:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <M_ADC_enu_init>
		M_ADC_enu_getDigitalValueSynchNonBlocking(copy_LM35_cfg, &digital_val);
    4d08:	8c 81       	ldd	r24, Y+4	; 0x04
    4d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    4d0c:	9e 01       	movw	r18, r28
    4d0e:	2e 5f       	subi	r18, 0xFE	; 254
    4d10:	3f 4f       	sbci	r19, 0xFF	; 255
    4d12:	b9 01       	movw	r22, r18
    4d14:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <M_ADC_enu_getDigitalValueSynchNonBlocking>
		/*convert ADC reading to temperature in celsius*/
		*copy_temp = (digital_val*(5000/1024))/10;
    4d18:	8a 81       	ldd	r24, Y+2	; 0x02
    4d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d1c:	88 0f       	add	r24, r24
    4d1e:	99 1f       	adc	r25, r25
    4d20:	88 0f       	add	r24, r24
    4d22:	99 1f       	adc	r25, r25
    4d24:	2a e0       	ldi	r18, 0x0A	; 10
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	b9 01       	movw	r22, r18
    4d2a:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <__udivmodhi4>
    4d2e:	cb 01       	movw	r24, r22
    4d30:	cc 01       	movw	r24, r24
    4d32:	a0 e0       	ldi	r26, 0x00	; 0
    4d34:	b0 e0       	ldi	r27, 0x00	; 0
    4d36:	ee 81       	ldd	r30, Y+6	; 0x06
    4d38:	ff 81       	ldd	r31, Y+7	; 0x07
    4d3a:	80 83       	st	Z, r24
    4d3c:	91 83       	std	Z+1, r25	; 0x01
    4d3e:	a2 83       	std	Z+2, r26	; 0x02
    4d40:	b3 83       	std	Z+3, r27	; 0x03
		Local_enuErrorState = ES_OK;
    4d42:	81 e0       	ldi	r24, 0x01	; 1
    4d44:	89 83       	std	Y+1, r24	; 0x01
    4d46:	02 c0       	rjmp	.+4      	; 0x4d4c <H_LM35_enu_getTemp+0x88>
	}
	else {
		Local_enuErrorState = ES_NULL_POINTER;
    4d48:	83 e0       	ldi	r24, 0x03	; 3
    4d4a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    4d4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d4e:	27 96       	adiw	r28, 0x07	; 7
    4d50:	0f b6       	in	r0, 0x3f	; 63
    4d52:	f8 94       	cli
    4d54:	de bf       	out	0x3e, r29	; 62
    4d56:	0f be       	out	0x3f, r0	; 63
    4d58:	cd bf       	out	0x3d, r28	; 61
    4d5a:	cf 91       	pop	r28
    4d5c:	df 91       	pop	r29
    4d5e:	08 95       	ret

00004d60 <H_LED_void_turnOn>:
  Reentrance       : Reentrant
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
void H_LED_void_turnOn(u8 ledID){
    4d60:	df 93       	push	r29
    4d62:	cf 93       	push	r28
    4d64:	00 d0       	rcall	.+0      	; 0x4d66 <H_LED_void_turnOn+0x6>
    4d66:	0f 92       	push	r0
    4d68:	cd b7       	in	r28, 0x3d	; 61
    4d6a:	de b7       	in	r29, 0x3e	; 62
    4d6c:	89 83       	std	Y+1, r24	; 0x01
	switch (ledID){
    4d6e:	89 81       	ldd	r24, Y+1	; 0x01
    4d70:	28 2f       	mov	r18, r24
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	3b 83       	std	Y+3, r19	; 0x03
    4d76:	2a 83       	std	Y+2, r18	; 0x02
    4d78:	8a 81       	ldd	r24, Y+2	; 0x02
    4d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d7c:	81 30       	cpi	r24, 0x01	; 1
    4d7e:	91 05       	cpc	r25, r1
    4d80:	f9 f0       	breq	.+62     	; 0x4dc0 <H_LED_void_turnOn+0x60>
    4d82:	2a 81       	ldd	r18, Y+2	; 0x02
    4d84:	3b 81       	ldd	r19, Y+3	; 0x03
    4d86:	22 30       	cpi	r18, 0x02	; 2
    4d88:	31 05       	cpc	r19, r1
    4d8a:	2c f4       	brge	.+10     	; 0x4d96 <H_LED_void_turnOn+0x36>
    4d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d90:	00 97       	sbiw	r24, 0x00	; 0
    4d92:	61 f0       	breq	.+24     	; 0x4dac <H_LED_void_turnOn+0x4c>
    4d94:	1e c0       	rjmp	.+60     	; 0x4dd2 <H_LED_void_turnOn+0x72>
    4d96:	2a 81       	ldd	r18, Y+2	; 0x02
    4d98:	3b 81       	ldd	r19, Y+3	; 0x03
    4d9a:	22 30       	cpi	r18, 0x02	; 2
    4d9c:	31 05       	cpc	r19, r1
    4d9e:	59 f0       	breq	.+22     	; 0x4db6 <H_LED_void_turnOn+0x56>
    4da0:	8a 81       	ldd	r24, Y+2	; 0x02
    4da2:	9b 81       	ldd	r25, Y+3	; 0x03
    4da4:	83 30       	cpi	r24, 0x03	; 3
    4da6:	91 05       	cpc	r25, r1
    4da8:	81 f0       	breq	.+32     	; 0x4dca <H_LED_void_turnOn+0x6a>
    4daa:	13 c0       	rjmp	.+38     	; 0x4dd2 <H_LED_void_turnOn+0x72>
	case LED_RED :
#if (LED_RED_DIRECTION == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_RED_PIN,DIO_HIGH);
    4dac:	8b e1       	ldi	r24, 0x1B	; 27
    4dae:	61 e0       	ldi	r22, 0x01	; 1
    4db0:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
    4db4:	0e c0       	rjmp	.+28     	; 0x4dd2 <H_LED_void_turnOn+0x72>
#endif
		break;

	case LED_GREEN:
#if	(LED_GREEN_DIRECTION ==	LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_GREEN_PIN,DIO_HIGH);
    4db6:	8e e0       	ldi	r24, 0x0E	; 14
    4db8:	61 e0       	ldi	r22, 0x01	; 1
    4dba:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
    4dbe:	09 c0       	rjmp	.+18     	; 0x4dd2 <H_LED_void_turnOn+0x72>

#endif
		break;
	case LED_BLUE:
#if	(LED_BLUE_DIRECTION ==LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_BLUE_PIN,DIO_HIGH);
    4dc0:	8f e0       	ldi	r24, 0x0F	; 15
    4dc2:	61 e0       	ldi	r22, 0x01	; 1
    4dc4:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
    4dc8:	04 c0       	rjmp	.+8      	; 0x4dd2 <H_LED_void_turnOn+0x72>
#endif
		break;

	case LED_YELLOW:
#if	(LED_YELLOW_DIRECTION ==LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_YELLOW_PIN,DIO_HIGH);
    4dca:	80 e1       	ldi	r24, 0x10	; 16
    4dcc:	61 e0       	ldi	r22, 0x01	; 1
    4dce:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>

#endif
		break;
	}

}
    4dd2:	0f 90       	pop	r0
    4dd4:	0f 90       	pop	r0
    4dd6:	0f 90       	pop	r0
    4dd8:	cf 91       	pop	r28
    4dda:	df 91       	pop	r29
    4ddc:	08 95       	ret

00004dde <H_LED_void_turnOff>:
  Reentrance       : Reentrant
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
void H_LED_void_turnOff(u8 ledID){
    4dde:	df 93       	push	r29
    4de0:	cf 93       	push	r28
    4de2:	00 d0       	rcall	.+0      	; 0x4de4 <H_LED_void_turnOff+0x6>
    4de4:	0f 92       	push	r0
    4de6:	cd b7       	in	r28, 0x3d	; 61
    4de8:	de b7       	in	r29, 0x3e	; 62
    4dea:	89 83       	std	Y+1, r24	; 0x01
	switch (ledID){
    4dec:	89 81       	ldd	r24, Y+1	; 0x01
    4dee:	28 2f       	mov	r18, r24
    4df0:	30 e0       	ldi	r19, 0x00	; 0
    4df2:	3b 83       	std	Y+3, r19	; 0x03
    4df4:	2a 83       	std	Y+2, r18	; 0x02
    4df6:	8a 81       	ldd	r24, Y+2	; 0x02
    4df8:	9b 81       	ldd	r25, Y+3	; 0x03
    4dfa:	81 30       	cpi	r24, 0x01	; 1
    4dfc:	91 05       	cpc	r25, r1
    4dfe:	f9 f0       	breq	.+62     	; 0x4e3e <H_LED_void_turnOff+0x60>
    4e00:	2a 81       	ldd	r18, Y+2	; 0x02
    4e02:	3b 81       	ldd	r19, Y+3	; 0x03
    4e04:	22 30       	cpi	r18, 0x02	; 2
    4e06:	31 05       	cpc	r19, r1
    4e08:	2c f4       	brge	.+10     	; 0x4e14 <H_LED_void_turnOff+0x36>
    4e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    4e0e:	00 97       	sbiw	r24, 0x00	; 0
    4e10:	61 f0       	breq	.+24     	; 0x4e2a <H_LED_void_turnOff+0x4c>
    4e12:	1e c0       	rjmp	.+60     	; 0x4e50 <H_LED_void_turnOff+0x72>
    4e14:	2a 81       	ldd	r18, Y+2	; 0x02
    4e16:	3b 81       	ldd	r19, Y+3	; 0x03
    4e18:	22 30       	cpi	r18, 0x02	; 2
    4e1a:	31 05       	cpc	r19, r1
    4e1c:	59 f0       	breq	.+22     	; 0x4e34 <H_LED_void_turnOff+0x56>
    4e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e20:	9b 81       	ldd	r25, Y+3	; 0x03
    4e22:	83 30       	cpi	r24, 0x03	; 3
    4e24:	91 05       	cpc	r25, r1
    4e26:	81 f0       	breq	.+32     	; 0x4e48 <H_LED_void_turnOff+0x6a>
    4e28:	13 c0       	rjmp	.+38     	; 0x4e50 <H_LED_void_turnOff+0x72>
	case LED_RED :
#if (LED_RED_DIRECTION == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_RED_PIN,DIO_LOW);
    4e2a:	8b e1       	ldi	r24, 0x1B	; 27
    4e2c:	60 e0       	ldi	r22, 0x00	; 0
    4e2e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
    4e32:	0e c0       	rjmp	.+28     	; 0x4e50 <H_LED_void_turnOff+0x72>
#endif
		break;

	case LED_GREEN:
#if	(LED_GREEN_DIRECTION ==	LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_GREEN_PIN,DIO_LOW);
    4e34:	8e e0       	ldi	r24, 0x0E	; 14
    4e36:	60 e0       	ldi	r22, 0x00	; 0
    4e38:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
    4e3c:	09 c0       	rjmp	.+18     	; 0x4e50 <H_LED_void_turnOff+0x72>

#endif
		break;
	case LED_BLUE:
#if	(LED_BLUE_DIRECTION ==LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_BLUE_PIN,DIO_LOW);
    4e3e:	8f e0       	ldi	r24, 0x0F	; 15
    4e40:	60 e0       	ldi	r22, 0x00	; 0
    4e42:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
    4e46:	04 c0       	rjmp	.+8      	; 0x4e50 <H_LED_void_turnOff+0x72>
#endif
		break;

	case LED_YELLOW:
#if	(LED_YELLOW_DIRECTION ==LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_YELLOW_PIN,DIO_LOW);
    4e48:	80 e1       	ldi	r24, 0x10	; 16
    4e4a:	60 e0       	ldi	r22, 0x00	; 0
    4e4c:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>

#endif
		break;
	}

}
    4e50:	0f 90       	pop	r0
    4e52:	0f 90       	pop	r0
    4e54:	0f 90       	pop	r0
    4e56:	cf 91       	pop	r28
    4e58:	df 91       	pop	r29
    4e5a:	08 95       	ret

00004e5c <H_LED_void_toggle>:
  Reentrance       : Reentrant
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
void H_LED_void_toggle(u8 ledID){
    4e5c:	df 93       	push	r29
    4e5e:	cf 93       	push	r28
    4e60:	00 d0       	rcall	.+0      	; 0x4e62 <H_LED_void_toggle+0x6>
    4e62:	0f 92       	push	r0
    4e64:	cd b7       	in	r28, 0x3d	; 61
    4e66:	de b7       	in	r29, 0x3e	; 62
    4e68:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID){
    4e6a:	89 81       	ldd	r24, Y+1	; 0x01
    4e6c:	28 2f       	mov	r18, r24
    4e6e:	30 e0       	ldi	r19, 0x00	; 0
    4e70:	3b 83       	std	Y+3, r19	; 0x03
    4e72:	2a 83       	std	Y+2, r18	; 0x02
    4e74:	8a 81       	ldd	r24, Y+2	; 0x02
    4e76:	9b 81       	ldd	r25, Y+3	; 0x03
    4e78:	81 30       	cpi	r24, 0x01	; 1
    4e7a:	91 05       	cpc	r25, r1
    4e7c:	c9 f0       	breq	.+50     	; 0x4eb0 <H_LED_void_toggle+0x54>
    4e7e:	2a 81       	ldd	r18, Y+2	; 0x02
    4e80:	3b 81       	ldd	r19, Y+3	; 0x03
    4e82:	22 30       	cpi	r18, 0x02	; 2
    4e84:	31 05       	cpc	r19, r1
    4e86:	2c f4       	brge	.+10     	; 0x4e92 <H_LED_void_toggle+0x36>
    4e88:	8a 81       	ldd	r24, Y+2	; 0x02
    4e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    4e8c:	00 97       	sbiw	r24, 0x00	; 0
    4e8e:	61 f0       	breq	.+24     	; 0x4ea8 <H_LED_void_toggle+0x4c>
    4e90:	1a c0       	rjmp	.+52     	; 0x4ec6 <H_LED_void_toggle+0x6a>
    4e92:	2a 81       	ldd	r18, Y+2	; 0x02
    4e94:	3b 81       	ldd	r19, Y+3	; 0x03
    4e96:	22 30       	cpi	r18, 0x02	; 2
    4e98:	31 05       	cpc	r19, r1
    4e9a:	71 f0       	breq	.+28     	; 0x4eb8 <H_LED_void_toggle+0x5c>
    4e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    4ea0:	83 30       	cpi	r24, 0x03	; 3
    4ea2:	91 05       	cpc	r25, r1
    4ea4:	69 f0       	breq	.+26     	; 0x4ec0 <H_LED_void_toggle+0x64>
    4ea6:	0f c0       	rjmp	.+30     	; 0x4ec6 <H_LED_void_toggle+0x6a>
	case LED_RED:
		M_Dio_void_togglePinValue(LED_RED_PIN);
    4ea8:	8b e1       	ldi	r24, 0x1B	; 27
    4eaa:	0e 94 fe 14 	call	0x29fc	; 0x29fc <M_Dio_void_togglePinValue>
    4eae:	0b c0       	rjmp	.+22     	; 0x4ec6 <H_LED_void_toggle+0x6a>
		break;
	case LED_BLUE:
		M_Dio_void_togglePinValue(LED_BLUE_PIN);
    4eb0:	8f e0       	ldi	r24, 0x0F	; 15
    4eb2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <M_Dio_void_togglePinValue>
    4eb6:	07 c0       	rjmp	.+14     	; 0x4ec6 <H_LED_void_toggle+0x6a>
			break;
	case LED_GREEN:
		M_Dio_void_togglePinValue(LED_GREEN_PIN);
    4eb8:	8e e0       	ldi	r24, 0x0E	; 14
    4eba:	0e 94 fe 14 	call	0x29fc	; 0x29fc <M_Dio_void_togglePinValue>
    4ebe:	03 c0       	rjmp	.+6      	; 0x4ec6 <H_LED_void_toggle+0x6a>
			break;
	case LED_YELLOW:
		M_Dio_void_togglePinValue(LED_YELLOW_PIN);
    4ec0:	80 e1       	ldi	r24, 0x10	; 16
    4ec2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <M_Dio_void_togglePinValue>
			break;
	}

}
    4ec6:	0f 90       	pop	r0
    4ec8:	0f 90       	pop	r0
    4eca:	0f 90       	pop	r0
    4ecc:	cf 91       	pop	r28
    4ece:	df 91       	pop	r29
    4ed0:	08 95       	ret

00004ed2 <H_LED_void_set_Intensity>:

void H_LED_void_set_Intensity(u16 copy_Intensity){
    4ed2:	df 93       	push	r29
    4ed4:	cf 93       	push	r28
    4ed6:	00 d0       	rcall	.+0      	; 0x4ed8 <H_LED_void_set_Intensity+0x6>
    4ed8:	cd b7       	in	r28, 0x3d	; 61
    4eda:	de b7       	in	r29, 0x3e	; 62
    4edc:	9a 83       	std	Y+2, r25	; 0x02
    4ede:	89 83       	std	Y+1, r24	; 0x01
	M_TIMER1_void_FastPWM(copy_Intensity);
    4ee0:	89 81       	ldd	r24, Y+1	; 0x01
    4ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ee4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <M_TIMER1_void_FastPWM>
	M_TIMER1_void_Start(TIMER1_CLK_8);
    4ee8:	82 e0       	ldi	r24, 0x02	; 2
    4eea:	0e 94 90 09 	call	0x1320	; 0x1320 <M_TIMER1_void_Start>
}
    4eee:	0f 90       	pop	r0
    4ef0:	0f 90       	pop	r0
    4ef2:	cf 91       	pop	r28
    4ef4:	df 91       	pop	r29
    4ef6:	08 95       	ret

00004ef8 <H_LDR_enu_getIntensity>:
#include "Error_State.h"
#include "ADC_int.h"
#include "LDR_cfg.h"
#include "LDR_int.h"

ES_t H_LDR_enu_getIntensity(ADC_cfg_type* copy_LDR_cfg,u32* copy_intensity){
    4ef8:	df 93       	push	r29
    4efa:	cf 93       	push	r28
    4efc:	cd b7       	in	r28, 0x3d	; 61
    4efe:	de b7       	in	r29, 0x3e	; 62
    4f00:	27 97       	sbiw	r28, 0x07	; 7
    4f02:	0f b6       	in	r0, 0x3f	; 63
    4f04:	f8 94       	cli
    4f06:	de bf       	out	0x3e, r29	; 62
    4f08:	0f be       	out	0x3f, r0	; 63
    4f0a:	cd bf       	out	0x3d, r28	; 61
    4f0c:	9d 83       	std	Y+5, r25	; 0x05
    4f0e:	8c 83       	std	Y+4, r24	; 0x04
    4f10:	7f 83       	std	Y+7, r23	; 0x07
    4f12:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErrorState = ES_NOK ;
    4f14:	19 82       	std	Y+1, r1	; 0x01
	u16 digital_val;
	if(copy_intensity != NULL && copy_LDR_cfg != NULL){
    4f16:	8e 81       	ldd	r24, Y+6	; 0x06
    4f18:	9f 81       	ldd	r25, Y+7	; 0x07
    4f1a:	00 97       	sbiw	r24, 0x00	; 0
    4f1c:	e9 f1       	breq	.+122    	; 0x4f98 <H_LDR_enu_getIntensity+0xa0>
    4f1e:	8c 81       	ldd	r24, Y+4	; 0x04
    4f20:	9d 81       	ldd	r25, Y+5	; 0x05
    4f22:	00 97       	sbiw	r24, 0x00	; 0
    4f24:	c9 f1       	breq	.+114    	; 0x4f98 <H_LDR_enu_getIntensity+0xa0>
		M_ADC_enu_init(*copy_LDR_cfg);
    4f26:	ec 81       	ldd	r30, Y+4	; 0x04
    4f28:	fd 81       	ldd	r31, Y+5	; 0x05
    4f2a:	20 81       	ld	r18, Z
    4f2c:	31 81       	ldd	r19, Z+1	; 0x01
    4f2e:	42 81       	ldd	r20, Z+2	; 0x02
    4f30:	53 81       	ldd	r21, Z+3	; 0x03
    4f32:	64 81       	ldd	r22, Z+4	; 0x04
    4f34:	75 81       	ldd	r23, Z+5	; 0x05
    4f36:	86 81       	ldd	r24, Z+6	; 0x06
    4f38:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <M_ADC_enu_init>
		M_ADC_enu_getDigitalValueSynchNonBlocking(copy_LDR_cfg,&digital_val);
    4f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    4f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    4f40:	9e 01       	movw	r18, r28
    4f42:	2e 5f       	subi	r18, 0xFE	; 254
    4f44:	3f 4f       	sbci	r19, 0xFF	; 255
    4f46:	b9 01       	movw	r22, r18
    4f48:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <M_ADC_enu_getDigitalValueSynchNonBlocking>
		*copy_intensity = ((512000/digital_val)-500)/50;
    4f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    4f50:	9c 01       	movw	r18, r24
    4f52:	40 e0       	ldi	r20, 0x00	; 0
    4f54:	50 e0       	ldi	r21, 0x00	; 0
    4f56:	80 e0       	ldi	r24, 0x00	; 0
    4f58:	90 ed       	ldi	r25, 0xD0	; 208
    4f5a:	a7 e0       	ldi	r26, 0x07	; 7
    4f5c:	b0 e0       	ldi	r27, 0x00	; 0
    4f5e:	bc 01       	movw	r22, r24
    4f60:	cd 01       	movw	r24, r26
    4f62:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <__divmodsi4>
    4f66:	da 01       	movw	r26, r20
    4f68:	c9 01       	movw	r24, r18
    4f6a:	84 5f       	subi	r24, 0xF4	; 244
    4f6c:	91 40       	sbci	r25, 0x01	; 1
    4f6e:	a0 40       	sbci	r26, 0x00	; 0
    4f70:	b0 40       	sbci	r27, 0x00	; 0
    4f72:	22 e3       	ldi	r18, 0x32	; 50
    4f74:	30 e0       	ldi	r19, 0x00	; 0
    4f76:	40 e0       	ldi	r20, 0x00	; 0
    4f78:	50 e0       	ldi	r21, 0x00	; 0
    4f7a:	bc 01       	movw	r22, r24
    4f7c:	cd 01       	movw	r24, r26
    4f7e:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <__divmodsi4>
    4f82:	da 01       	movw	r26, r20
    4f84:	c9 01       	movw	r24, r18
    4f86:	ee 81       	ldd	r30, Y+6	; 0x06
    4f88:	ff 81       	ldd	r31, Y+7	; 0x07
    4f8a:	80 83       	st	Z, r24
    4f8c:	91 83       	std	Z+1, r25	; 0x01
    4f8e:	a2 83       	std	Z+2, r26	; 0x02
    4f90:	b3 83       	std	Z+3, r27	; 0x03
		Local_enuErrorState = ES_OK;
    4f92:	81 e0       	ldi	r24, 0x01	; 1
    4f94:	89 83       	std	Y+1, r24	; 0x01
    4f96:	02 c0       	rjmp	.+4      	; 0x4f9c <H_LDR_enu_getIntensity+0xa4>
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
    4f98:	83 e0       	ldi	r24, 0x03	; 3
    4f9a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState ;
    4f9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f9e:	27 96       	adiw	r28, 0x07	; 7
    4fa0:	0f b6       	in	r0, 0x3f	; 63
    4fa2:	f8 94       	cli
    4fa4:	de bf       	out	0x3e, r29	; 62
    4fa6:	0f be       	out	0x3f, r0	; 63
    4fa8:	cd bf       	out	0x3d, r28	; 61
    4faa:	cf 91       	pop	r28
    4fac:	df 91       	pop	r29
    4fae:	08 95       	ret

00004fb0 <H_LCD_void_latchByte>:
#include "LCD_int.h"
#include <avr/delay.h>
#include "BIT_MATH.h"

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    4fb0:	df 93       	push	r29
    4fb2:	cf 93       	push	r28
    4fb4:	cd b7       	in	r28, 0x3d	; 61
    4fb6:	de b7       	in	r29, 0x3e	; 62
    4fb8:	e9 97       	sbiw	r28, 0x39	; 57
    4fba:	0f b6       	in	r0, 0x3f	; 63
    4fbc:	f8 94       	cli
    4fbe:	de bf       	out	0x3e, r29	; 62
    4fc0:	0f be       	out	0x3f, r0	; 63
    4fc2:	cd bf       	out	0x3d, r28	; 61
    4fc4:	89 af       	std	Y+57, r24	; 0x39
#if (LCD_MODE == FOUR_BIT_MODE)


	/* Step1: write your data or command */
	/* Send upper nibble */
	M_Dio_void_setPinValue(LCD_D4_PIN, GET_BIT(copy_u8Byte, 4));
    4fc6:	89 ad       	ldd	r24, Y+57	; 0x39
    4fc8:	82 95       	swap	r24
    4fca:	8f 70       	andi	r24, 0x0F	; 15
    4fcc:	98 2f       	mov	r25, r24
    4fce:	91 70       	andi	r25, 0x01	; 1
    4fd0:	84 e1       	ldi	r24, 0x14	; 20
    4fd2:	69 2f       	mov	r22, r25
    4fd4:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D5_PIN, GET_BIT(copy_u8Byte, 5));
    4fd8:	89 ad       	ldd	r24, Y+57	; 0x39
    4fda:	82 95       	swap	r24
    4fdc:	86 95       	lsr	r24
    4fde:	87 70       	andi	r24, 0x07	; 7
    4fe0:	98 2f       	mov	r25, r24
    4fe2:	91 70       	andi	r25, 0x01	; 1
    4fe4:	85 e1       	ldi	r24, 0x15	; 21
    4fe6:	69 2f       	mov	r22, r25
    4fe8:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D6_PIN, GET_BIT(copy_u8Byte, 6));
    4fec:	89 ad       	ldd	r24, Y+57	; 0x39
    4fee:	82 95       	swap	r24
    4ff0:	86 95       	lsr	r24
    4ff2:	86 95       	lsr	r24
    4ff4:	83 70       	andi	r24, 0x03	; 3
    4ff6:	98 2f       	mov	r25, r24
    4ff8:	91 70       	andi	r25, 0x01	; 1
    4ffa:	86 e1       	ldi	r24, 0x16	; 22
    4ffc:	69 2f       	mov	r22, r25
    4ffe:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D7_PIN, GET_BIT(copy_u8Byte, 7));
    5002:	89 ad       	ldd	r24, Y+57	; 0x39
    5004:	98 2f       	mov	r25, r24
    5006:	99 1f       	adc	r25, r25
    5008:	99 27       	eor	r25, r25
    500a:	99 1f       	adc	r25, r25
    500c:	88 e1       	ldi	r24, 0x18	; 24
    500e:	69 2f       	mov	r22, r25
    5010:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>

	/* Step2: Enable LCD */
	M_Dio_void_setPinValue(LCD_EN_PIN, DIO_HIGH);
    5014:	8c e0       	ldi	r24, 0x0C	; 12
    5016:	61 e0       	ldi	r22, 0x01	; 1
    5018:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
    501c:	80 e0       	ldi	r24, 0x00	; 0
    501e:	90 e0       	ldi	r25, 0x00	; 0
    5020:	a0 e8       	ldi	r26, 0x80	; 128
    5022:	bf e3       	ldi	r27, 0x3F	; 63
    5024:	8d ab       	std	Y+53, r24	; 0x35
    5026:	9e ab       	std	Y+54, r25	; 0x36
    5028:	af ab       	std	Y+55, r26	; 0x37
    502a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    502c:	6d a9       	ldd	r22, Y+53	; 0x35
    502e:	7e a9       	ldd	r23, Y+54	; 0x36
    5030:	8f a9       	ldd	r24, Y+55	; 0x37
    5032:	98 ad       	ldd	r25, Y+56	; 0x38
    5034:	20 e0       	ldi	r18, 0x00	; 0
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	4a e7       	ldi	r20, 0x7A	; 122
    503a:	55 e4       	ldi	r21, 0x45	; 69
    503c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5040:	dc 01       	movw	r26, r24
    5042:	cb 01       	movw	r24, r22
    5044:	89 ab       	std	Y+49, r24	; 0x31
    5046:	9a ab       	std	Y+50, r25	; 0x32
    5048:	ab ab       	std	Y+51, r26	; 0x33
    504a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    504c:	69 a9       	ldd	r22, Y+49	; 0x31
    504e:	7a a9       	ldd	r23, Y+50	; 0x32
    5050:	8b a9       	ldd	r24, Y+51	; 0x33
    5052:	9c a9       	ldd	r25, Y+52	; 0x34
    5054:	20 e0       	ldi	r18, 0x00	; 0
    5056:	30 e0       	ldi	r19, 0x00	; 0
    5058:	40 e8       	ldi	r20, 0x80	; 128
    505a:	5f e3       	ldi	r21, 0x3F	; 63
    505c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5060:	88 23       	and	r24, r24
    5062:	2c f4       	brge	.+10     	; 0x506e <H_LCD_void_latchByte+0xbe>
		__ticks = 1;
    5064:	81 e0       	ldi	r24, 0x01	; 1
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	98 ab       	std	Y+48, r25	; 0x30
    506a:	8f a7       	std	Y+47, r24	; 0x2f
    506c:	3f c0       	rjmp	.+126    	; 0x50ec <H_LCD_void_latchByte+0x13c>
	else if (__tmp > 65535)
    506e:	69 a9       	ldd	r22, Y+49	; 0x31
    5070:	7a a9       	ldd	r23, Y+50	; 0x32
    5072:	8b a9       	ldd	r24, Y+51	; 0x33
    5074:	9c a9       	ldd	r25, Y+52	; 0x34
    5076:	20 e0       	ldi	r18, 0x00	; 0
    5078:	3f ef       	ldi	r19, 0xFF	; 255
    507a:	4f e7       	ldi	r20, 0x7F	; 127
    507c:	57 e4       	ldi	r21, 0x47	; 71
    507e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5082:	18 16       	cp	r1, r24
    5084:	4c f5       	brge	.+82     	; 0x50d8 <H_LCD_void_latchByte+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5086:	6d a9       	ldd	r22, Y+53	; 0x35
    5088:	7e a9       	ldd	r23, Y+54	; 0x36
    508a:	8f a9       	ldd	r24, Y+55	; 0x37
    508c:	98 ad       	ldd	r25, Y+56	; 0x38
    508e:	20 e0       	ldi	r18, 0x00	; 0
    5090:	30 e0       	ldi	r19, 0x00	; 0
    5092:	40 e2       	ldi	r20, 0x20	; 32
    5094:	51 e4       	ldi	r21, 0x41	; 65
    5096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    509a:	dc 01       	movw	r26, r24
    509c:	cb 01       	movw	r24, r22
    509e:	bc 01       	movw	r22, r24
    50a0:	cd 01       	movw	r24, r26
    50a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50a6:	dc 01       	movw	r26, r24
    50a8:	cb 01       	movw	r24, r22
    50aa:	98 ab       	std	Y+48, r25	; 0x30
    50ac:	8f a7       	std	Y+47, r24	; 0x2f
    50ae:	0f c0       	rjmp	.+30     	; 0x50ce <H_LCD_void_latchByte+0x11e>
    50b0:	80 e9       	ldi	r24, 0x90	; 144
    50b2:	91 e0       	ldi	r25, 0x01	; 1
    50b4:	9e a7       	std	Y+46, r25	; 0x2e
    50b6:	8d a7       	std	Y+45, r24	; 0x2d
    50b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    50ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    50bc:	01 97       	sbiw	r24, 0x01	; 1
    50be:	f1 f7       	brne	.-4      	; 0x50bc <H_LCD_void_latchByte+0x10c>
    50c0:	9e a7       	std	Y+46, r25	; 0x2e
    50c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    50c6:	98 a9       	ldd	r25, Y+48	; 0x30
    50c8:	01 97       	sbiw	r24, 0x01	; 1
    50ca:	98 ab       	std	Y+48, r25	; 0x30
    50cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    50d0:	98 a9       	ldd	r25, Y+48	; 0x30
    50d2:	00 97       	sbiw	r24, 0x00	; 0
    50d4:	69 f7       	brne	.-38     	; 0x50b0 <H_LCD_void_latchByte+0x100>
    50d6:	14 c0       	rjmp	.+40     	; 0x5100 <H_LCD_void_latchByte+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50d8:	69 a9       	ldd	r22, Y+49	; 0x31
    50da:	7a a9       	ldd	r23, Y+50	; 0x32
    50dc:	8b a9       	ldd	r24, Y+51	; 0x33
    50de:	9c a9       	ldd	r25, Y+52	; 0x34
    50e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e4:	dc 01       	movw	r26, r24
    50e6:	cb 01       	movw	r24, r22
    50e8:	98 ab       	std	Y+48, r25	; 0x30
    50ea:	8f a7       	std	Y+47, r24	; 0x2f
    50ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    50ee:	98 a9       	ldd	r25, Y+48	; 0x30
    50f0:	9c a7       	std	Y+44, r25	; 0x2c
    50f2:	8b a7       	std	Y+43, r24	; 0x2b
    50f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    50f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    50f8:	01 97       	sbiw	r24, 0x01	; 1
    50fa:	f1 f7       	brne	.-4      	; 0x50f8 <H_LCD_void_latchByte+0x148>
    50fc:	9c a7       	std	Y+44, r25	; 0x2c
    50fe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/* Step3: disable LCD */
	M_Dio_void_setPinValue(LCD_EN_PIN, DIO_LOW);
    5100:	8c e0       	ldi	r24, 0x0C	; 12
    5102:	60 e0       	ldi	r22, 0x00	; 0
    5104:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
    5108:	80 e0       	ldi	r24, 0x00	; 0
    510a:	90 e0       	ldi	r25, 0x00	; 0
    510c:	a0 e4       	ldi	r26, 0x40	; 64
    510e:	b0 e4       	ldi	r27, 0x40	; 64
    5110:	8f a3       	std	Y+39, r24	; 0x27
    5112:	98 a7       	std	Y+40, r25	; 0x28
    5114:	a9 a7       	std	Y+41, r26	; 0x29
    5116:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5118:	6f a1       	ldd	r22, Y+39	; 0x27
    511a:	78 a5       	ldd	r23, Y+40	; 0x28
    511c:	89 a5       	ldd	r24, Y+41	; 0x29
    511e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5120:	20 e0       	ldi	r18, 0x00	; 0
    5122:	30 e0       	ldi	r19, 0x00	; 0
    5124:	4a e7       	ldi	r20, 0x7A	; 122
    5126:	55 e4       	ldi	r21, 0x45	; 69
    5128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    512c:	dc 01       	movw	r26, r24
    512e:	cb 01       	movw	r24, r22
    5130:	8b a3       	std	Y+35, r24	; 0x23
    5132:	9c a3       	std	Y+36, r25	; 0x24
    5134:	ad a3       	std	Y+37, r26	; 0x25
    5136:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5138:	6b a1       	ldd	r22, Y+35	; 0x23
    513a:	7c a1       	ldd	r23, Y+36	; 0x24
    513c:	8d a1       	ldd	r24, Y+37	; 0x25
    513e:	9e a1       	ldd	r25, Y+38	; 0x26
    5140:	20 e0       	ldi	r18, 0x00	; 0
    5142:	30 e0       	ldi	r19, 0x00	; 0
    5144:	40 e8       	ldi	r20, 0x80	; 128
    5146:	5f e3       	ldi	r21, 0x3F	; 63
    5148:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    514c:	88 23       	and	r24, r24
    514e:	2c f4       	brge	.+10     	; 0x515a <H_LCD_void_latchByte+0x1aa>
		__ticks = 1;
    5150:	81 e0       	ldi	r24, 0x01	; 1
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	9a a3       	std	Y+34, r25	; 0x22
    5156:	89 a3       	std	Y+33, r24	; 0x21
    5158:	3f c0       	rjmp	.+126    	; 0x51d8 <H_LCD_void_latchByte+0x228>
	else if (__tmp > 65535)
    515a:	6b a1       	ldd	r22, Y+35	; 0x23
    515c:	7c a1       	ldd	r23, Y+36	; 0x24
    515e:	8d a1       	ldd	r24, Y+37	; 0x25
    5160:	9e a1       	ldd	r25, Y+38	; 0x26
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	3f ef       	ldi	r19, 0xFF	; 255
    5166:	4f e7       	ldi	r20, 0x7F	; 127
    5168:	57 e4       	ldi	r21, 0x47	; 71
    516a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    516e:	18 16       	cp	r1, r24
    5170:	4c f5       	brge	.+82     	; 0x51c4 <H_LCD_void_latchByte+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5172:	6f a1       	ldd	r22, Y+39	; 0x27
    5174:	78 a5       	ldd	r23, Y+40	; 0x28
    5176:	89 a5       	ldd	r24, Y+41	; 0x29
    5178:	9a a5       	ldd	r25, Y+42	; 0x2a
    517a:	20 e0       	ldi	r18, 0x00	; 0
    517c:	30 e0       	ldi	r19, 0x00	; 0
    517e:	40 e2       	ldi	r20, 0x20	; 32
    5180:	51 e4       	ldi	r21, 0x41	; 65
    5182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5186:	dc 01       	movw	r26, r24
    5188:	cb 01       	movw	r24, r22
    518a:	bc 01       	movw	r22, r24
    518c:	cd 01       	movw	r24, r26
    518e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5192:	dc 01       	movw	r26, r24
    5194:	cb 01       	movw	r24, r22
    5196:	9a a3       	std	Y+34, r25	; 0x22
    5198:	89 a3       	std	Y+33, r24	; 0x21
    519a:	0f c0       	rjmp	.+30     	; 0x51ba <H_LCD_void_latchByte+0x20a>
    519c:	80 e9       	ldi	r24, 0x90	; 144
    519e:	91 e0       	ldi	r25, 0x01	; 1
    51a0:	98 a3       	std	Y+32, r25	; 0x20
    51a2:	8f 8f       	std	Y+31, r24	; 0x1f
    51a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    51a6:	98 a1       	ldd	r25, Y+32	; 0x20
    51a8:	01 97       	sbiw	r24, 0x01	; 1
    51aa:	f1 f7       	brne	.-4      	; 0x51a8 <H_LCD_void_latchByte+0x1f8>
    51ac:	98 a3       	std	Y+32, r25	; 0x20
    51ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51b0:	89 a1       	ldd	r24, Y+33	; 0x21
    51b2:	9a a1       	ldd	r25, Y+34	; 0x22
    51b4:	01 97       	sbiw	r24, 0x01	; 1
    51b6:	9a a3       	std	Y+34, r25	; 0x22
    51b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51ba:	89 a1       	ldd	r24, Y+33	; 0x21
    51bc:	9a a1       	ldd	r25, Y+34	; 0x22
    51be:	00 97       	sbiw	r24, 0x00	; 0
    51c0:	69 f7       	brne	.-38     	; 0x519c <H_LCD_void_latchByte+0x1ec>
    51c2:	14 c0       	rjmp	.+40     	; 0x51ec <H_LCD_void_latchByte+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51c4:	6b a1       	ldd	r22, Y+35	; 0x23
    51c6:	7c a1       	ldd	r23, Y+36	; 0x24
    51c8:	8d a1       	ldd	r24, Y+37	; 0x25
    51ca:	9e a1       	ldd	r25, Y+38	; 0x26
    51cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51d0:	dc 01       	movw	r26, r24
    51d2:	cb 01       	movw	r24, r22
    51d4:	9a a3       	std	Y+34, r25	; 0x22
    51d6:	89 a3       	std	Y+33, r24	; 0x21
    51d8:	89 a1       	ldd	r24, Y+33	; 0x21
    51da:	9a a1       	ldd	r25, Y+34	; 0x22
    51dc:	9e 8f       	std	Y+30, r25	; 0x1e
    51de:	8d 8f       	std	Y+29, r24	; 0x1d
    51e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51e4:	01 97       	sbiw	r24, 0x01	; 1
    51e6:	f1 f7       	brne	.-4      	; 0x51e4 <H_LCD_void_latchByte+0x234>
    51e8:	9e 8f       	std	Y+30, r25	; 0x1e
    51ea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3);

	/* Step4: Send lower nibble */
	M_Dio_void_setPinValue(LCD_D4_PIN, GET_BIT(copy_u8Byte, 0));
    51ec:	89 ad       	ldd	r24, Y+57	; 0x39
    51ee:	98 2f       	mov	r25, r24
    51f0:	91 70       	andi	r25, 0x01	; 1
    51f2:	84 e1       	ldi	r24, 0x14	; 20
    51f4:	69 2f       	mov	r22, r25
    51f6:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D5_PIN, GET_BIT(copy_u8Byte, 1));
    51fa:	89 ad       	ldd	r24, Y+57	; 0x39
    51fc:	86 95       	lsr	r24
    51fe:	98 2f       	mov	r25, r24
    5200:	91 70       	andi	r25, 0x01	; 1
    5202:	85 e1       	ldi	r24, 0x15	; 21
    5204:	69 2f       	mov	r22, r25
    5206:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D6_PIN, GET_BIT(copy_u8Byte, 2));
    520a:	89 ad       	ldd	r24, Y+57	; 0x39
    520c:	86 95       	lsr	r24
    520e:	86 95       	lsr	r24
    5210:	98 2f       	mov	r25, r24
    5212:	91 70       	andi	r25, 0x01	; 1
    5214:	86 e1       	ldi	r24, 0x16	; 22
    5216:	69 2f       	mov	r22, r25
    5218:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D7_PIN, GET_BIT(copy_u8Byte, 3));
    521c:	89 ad       	ldd	r24, Y+57	; 0x39
    521e:	86 95       	lsr	r24
    5220:	86 95       	lsr	r24
    5222:	86 95       	lsr	r24
    5224:	98 2f       	mov	r25, r24
    5226:	91 70       	andi	r25, 0x01	; 1
    5228:	88 e1       	ldi	r24, 0x18	; 24
    522a:	69 2f       	mov	r22, r25
    522c:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>

	/* Step5: Enable LCD */
	M_Dio_void_setPinValue(LCD_EN_PIN, DIO_HIGH);
    5230:	8c e0       	ldi	r24, 0x0C	; 12
    5232:	61 e0       	ldi	r22, 0x01	; 1
    5234:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
    5238:	80 e0       	ldi	r24, 0x00	; 0
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	a0 e8       	ldi	r26, 0x80	; 128
    523e:	bf e3       	ldi	r27, 0x3F	; 63
    5240:	89 8f       	std	Y+25, r24	; 0x19
    5242:	9a 8f       	std	Y+26, r25	; 0x1a
    5244:	ab 8f       	std	Y+27, r26	; 0x1b
    5246:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5248:	69 8d       	ldd	r22, Y+25	; 0x19
    524a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    524c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    524e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5250:	20 e0       	ldi	r18, 0x00	; 0
    5252:	30 e0       	ldi	r19, 0x00	; 0
    5254:	4a e7       	ldi	r20, 0x7A	; 122
    5256:	55 e4       	ldi	r21, 0x45	; 69
    5258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    525c:	dc 01       	movw	r26, r24
    525e:	cb 01       	movw	r24, r22
    5260:	8d 8b       	std	Y+21, r24	; 0x15
    5262:	9e 8b       	std	Y+22, r25	; 0x16
    5264:	af 8b       	std	Y+23, r26	; 0x17
    5266:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5268:	6d 89       	ldd	r22, Y+21	; 0x15
    526a:	7e 89       	ldd	r23, Y+22	; 0x16
    526c:	8f 89       	ldd	r24, Y+23	; 0x17
    526e:	98 8d       	ldd	r25, Y+24	; 0x18
    5270:	20 e0       	ldi	r18, 0x00	; 0
    5272:	30 e0       	ldi	r19, 0x00	; 0
    5274:	40 e8       	ldi	r20, 0x80	; 128
    5276:	5f e3       	ldi	r21, 0x3F	; 63
    5278:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    527c:	88 23       	and	r24, r24
    527e:	2c f4       	brge	.+10     	; 0x528a <H_LCD_void_latchByte+0x2da>
		__ticks = 1;
    5280:	81 e0       	ldi	r24, 0x01	; 1
    5282:	90 e0       	ldi	r25, 0x00	; 0
    5284:	9c 8b       	std	Y+20, r25	; 0x14
    5286:	8b 8b       	std	Y+19, r24	; 0x13
    5288:	3f c0       	rjmp	.+126    	; 0x5308 <H_LCD_void_latchByte+0x358>
	else if (__tmp > 65535)
    528a:	6d 89       	ldd	r22, Y+21	; 0x15
    528c:	7e 89       	ldd	r23, Y+22	; 0x16
    528e:	8f 89       	ldd	r24, Y+23	; 0x17
    5290:	98 8d       	ldd	r25, Y+24	; 0x18
    5292:	20 e0       	ldi	r18, 0x00	; 0
    5294:	3f ef       	ldi	r19, 0xFF	; 255
    5296:	4f e7       	ldi	r20, 0x7F	; 127
    5298:	57 e4       	ldi	r21, 0x47	; 71
    529a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    529e:	18 16       	cp	r1, r24
    52a0:	4c f5       	brge	.+82     	; 0x52f4 <H_LCD_void_latchByte+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52a2:	69 8d       	ldd	r22, Y+25	; 0x19
    52a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52aa:	20 e0       	ldi	r18, 0x00	; 0
    52ac:	30 e0       	ldi	r19, 0x00	; 0
    52ae:	40 e2       	ldi	r20, 0x20	; 32
    52b0:	51 e4       	ldi	r21, 0x41	; 65
    52b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52b6:	dc 01       	movw	r26, r24
    52b8:	cb 01       	movw	r24, r22
    52ba:	bc 01       	movw	r22, r24
    52bc:	cd 01       	movw	r24, r26
    52be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52c2:	dc 01       	movw	r26, r24
    52c4:	cb 01       	movw	r24, r22
    52c6:	9c 8b       	std	Y+20, r25	; 0x14
    52c8:	8b 8b       	std	Y+19, r24	; 0x13
    52ca:	0f c0       	rjmp	.+30     	; 0x52ea <H_LCD_void_latchByte+0x33a>
    52cc:	80 e9       	ldi	r24, 0x90	; 144
    52ce:	91 e0       	ldi	r25, 0x01	; 1
    52d0:	9a 8b       	std	Y+18, r25	; 0x12
    52d2:	89 8b       	std	Y+17, r24	; 0x11
    52d4:	89 89       	ldd	r24, Y+17	; 0x11
    52d6:	9a 89       	ldd	r25, Y+18	; 0x12
    52d8:	01 97       	sbiw	r24, 0x01	; 1
    52da:	f1 f7       	brne	.-4      	; 0x52d8 <H_LCD_void_latchByte+0x328>
    52dc:	9a 8b       	std	Y+18, r25	; 0x12
    52de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52e0:	8b 89       	ldd	r24, Y+19	; 0x13
    52e2:	9c 89       	ldd	r25, Y+20	; 0x14
    52e4:	01 97       	sbiw	r24, 0x01	; 1
    52e6:	9c 8b       	std	Y+20, r25	; 0x14
    52e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52ea:	8b 89       	ldd	r24, Y+19	; 0x13
    52ec:	9c 89       	ldd	r25, Y+20	; 0x14
    52ee:	00 97       	sbiw	r24, 0x00	; 0
    52f0:	69 f7       	brne	.-38     	; 0x52cc <H_LCD_void_latchByte+0x31c>
    52f2:	14 c0       	rjmp	.+40     	; 0x531c <H_LCD_void_latchByte+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52f4:	6d 89       	ldd	r22, Y+21	; 0x15
    52f6:	7e 89       	ldd	r23, Y+22	; 0x16
    52f8:	8f 89       	ldd	r24, Y+23	; 0x17
    52fa:	98 8d       	ldd	r25, Y+24	; 0x18
    52fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5300:	dc 01       	movw	r26, r24
    5302:	cb 01       	movw	r24, r22
    5304:	9c 8b       	std	Y+20, r25	; 0x14
    5306:	8b 8b       	std	Y+19, r24	; 0x13
    5308:	8b 89       	ldd	r24, Y+19	; 0x13
    530a:	9c 89       	ldd	r25, Y+20	; 0x14
    530c:	98 8b       	std	Y+16, r25	; 0x10
    530e:	8f 87       	std	Y+15, r24	; 0x0f
    5310:	8f 85       	ldd	r24, Y+15	; 0x0f
    5312:	98 89       	ldd	r25, Y+16	; 0x10
    5314:	01 97       	sbiw	r24, 0x01	; 1
    5316:	f1 f7       	brne	.-4      	; 0x5314 <H_LCD_void_latchByte+0x364>
    5318:	98 8b       	std	Y+16, r25	; 0x10
    531a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/* Step6: disable LCD */
	M_Dio_void_setPinValue(LCD_EN_PIN, DIO_LOW);
    531c:	8c e0       	ldi	r24, 0x0C	; 12
    531e:	60 e0       	ldi	r22, 0x00	; 0
    5320:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
    5324:	80 e0       	ldi	r24, 0x00	; 0
    5326:	90 e0       	ldi	r25, 0x00	; 0
    5328:	a0 e4       	ldi	r26, 0x40	; 64
    532a:	b0 e4       	ldi	r27, 0x40	; 64
    532c:	8b 87       	std	Y+11, r24	; 0x0b
    532e:	9c 87       	std	Y+12, r25	; 0x0c
    5330:	ad 87       	std	Y+13, r26	; 0x0d
    5332:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5334:	6b 85       	ldd	r22, Y+11	; 0x0b
    5336:	7c 85       	ldd	r23, Y+12	; 0x0c
    5338:	8d 85       	ldd	r24, Y+13	; 0x0d
    533a:	9e 85       	ldd	r25, Y+14	; 0x0e
    533c:	20 e0       	ldi	r18, 0x00	; 0
    533e:	30 e0       	ldi	r19, 0x00	; 0
    5340:	4a e7       	ldi	r20, 0x7A	; 122
    5342:	55 e4       	ldi	r21, 0x45	; 69
    5344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5348:	dc 01       	movw	r26, r24
    534a:	cb 01       	movw	r24, r22
    534c:	8f 83       	std	Y+7, r24	; 0x07
    534e:	98 87       	std	Y+8, r25	; 0x08
    5350:	a9 87       	std	Y+9, r26	; 0x09
    5352:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5354:	6f 81       	ldd	r22, Y+7	; 0x07
    5356:	78 85       	ldd	r23, Y+8	; 0x08
    5358:	89 85       	ldd	r24, Y+9	; 0x09
    535a:	9a 85       	ldd	r25, Y+10	; 0x0a
    535c:	20 e0       	ldi	r18, 0x00	; 0
    535e:	30 e0       	ldi	r19, 0x00	; 0
    5360:	40 e8       	ldi	r20, 0x80	; 128
    5362:	5f e3       	ldi	r21, 0x3F	; 63
    5364:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5368:	88 23       	and	r24, r24
    536a:	2c f4       	brge	.+10     	; 0x5376 <H_LCD_void_latchByte+0x3c6>
		__ticks = 1;
    536c:	81 e0       	ldi	r24, 0x01	; 1
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	9e 83       	std	Y+6, r25	; 0x06
    5372:	8d 83       	std	Y+5, r24	; 0x05
    5374:	3f c0       	rjmp	.+126    	; 0x53f4 <H_LCD_void_latchByte+0x444>
	else if (__tmp > 65535)
    5376:	6f 81       	ldd	r22, Y+7	; 0x07
    5378:	78 85       	ldd	r23, Y+8	; 0x08
    537a:	89 85       	ldd	r24, Y+9	; 0x09
    537c:	9a 85       	ldd	r25, Y+10	; 0x0a
    537e:	20 e0       	ldi	r18, 0x00	; 0
    5380:	3f ef       	ldi	r19, 0xFF	; 255
    5382:	4f e7       	ldi	r20, 0x7F	; 127
    5384:	57 e4       	ldi	r21, 0x47	; 71
    5386:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    538a:	18 16       	cp	r1, r24
    538c:	4c f5       	brge	.+82     	; 0x53e0 <H_LCD_void_latchByte+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    538e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5390:	7c 85       	ldd	r23, Y+12	; 0x0c
    5392:	8d 85       	ldd	r24, Y+13	; 0x0d
    5394:	9e 85       	ldd	r25, Y+14	; 0x0e
    5396:	20 e0       	ldi	r18, 0x00	; 0
    5398:	30 e0       	ldi	r19, 0x00	; 0
    539a:	40 e2       	ldi	r20, 0x20	; 32
    539c:	51 e4       	ldi	r21, 0x41	; 65
    539e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53a2:	dc 01       	movw	r26, r24
    53a4:	cb 01       	movw	r24, r22
    53a6:	bc 01       	movw	r22, r24
    53a8:	cd 01       	movw	r24, r26
    53aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53ae:	dc 01       	movw	r26, r24
    53b0:	cb 01       	movw	r24, r22
    53b2:	9e 83       	std	Y+6, r25	; 0x06
    53b4:	8d 83       	std	Y+5, r24	; 0x05
    53b6:	0f c0       	rjmp	.+30     	; 0x53d6 <H_LCD_void_latchByte+0x426>
    53b8:	80 e9       	ldi	r24, 0x90	; 144
    53ba:	91 e0       	ldi	r25, 0x01	; 1
    53bc:	9c 83       	std	Y+4, r25	; 0x04
    53be:	8b 83       	std	Y+3, r24	; 0x03
    53c0:	8b 81       	ldd	r24, Y+3	; 0x03
    53c2:	9c 81       	ldd	r25, Y+4	; 0x04
    53c4:	01 97       	sbiw	r24, 0x01	; 1
    53c6:	f1 f7       	brne	.-4      	; 0x53c4 <H_LCD_void_latchByte+0x414>
    53c8:	9c 83       	std	Y+4, r25	; 0x04
    53ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53cc:	8d 81       	ldd	r24, Y+5	; 0x05
    53ce:	9e 81       	ldd	r25, Y+6	; 0x06
    53d0:	01 97       	sbiw	r24, 0x01	; 1
    53d2:	9e 83       	std	Y+6, r25	; 0x06
    53d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53d6:	8d 81       	ldd	r24, Y+5	; 0x05
    53d8:	9e 81       	ldd	r25, Y+6	; 0x06
    53da:	00 97       	sbiw	r24, 0x00	; 0
    53dc:	69 f7       	brne	.-38     	; 0x53b8 <H_LCD_void_latchByte+0x408>
    53de:	14 c0       	rjmp	.+40     	; 0x5408 <H_LCD_void_latchByte+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53e0:	6f 81       	ldd	r22, Y+7	; 0x07
    53e2:	78 85       	ldd	r23, Y+8	; 0x08
    53e4:	89 85       	ldd	r24, Y+9	; 0x09
    53e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    53e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53ec:	dc 01       	movw	r26, r24
    53ee:	cb 01       	movw	r24, r22
    53f0:	9e 83       	std	Y+6, r25	; 0x06
    53f2:	8d 83       	std	Y+5, r24	; 0x05
    53f4:	8d 81       	ldd	r24, Y+5	; 0x05
    53f6:	9e 81       	ldd	r25, Y+6	; 0x06
    53f8:	9a 83       	std	Y+2, r25	; 0x02
    53fa:	89 83       	std	Y+1, r24	; 0x01
    53fc:	89 81       	ldd	r24, Y+1	; 0x01
    53fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5400:	01 97       	sbiw	r24, 0x01	; 1
    5402:	f1 f7       	brne	.-4      	; 0x5400 <H_LCD_void_latchByte+0x450>
    5404:	9a 83       	std	Y+2, r25	; 0x02
    5406:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_void_setPinValue(LCD_EN_PIN, DIO_LOW);
	_delay_ms(3);

#endif

}
    5408:	e9 96       	adiw	r28, 0x39	; 57
    540a:	0f b6       	in	r0, 0x3f	; 63
    540c:	f8 94       	cli
    540e:	de bf       	out	0x3e, r29	; 62
    5410:	0f be       	out	0x3f, r0	; 63
    5412:	cd bf       	out	0x3d, r28	; 61
    5414:	cf 91       	pop	r28
    5416:	df 91       	pop	r29
    5418:	08 95       	ret

0000541a <H_LCD_void_sendCommand>:

void H_LCD_void_sendCommand(u8 copy_u8command)
{
    541a:	df 93       	push	r29
    541c:	cf 93       	push	r28
    541e:	0f 92       	push	r0
    5420:	cd b7       	in	r28, 0x3d	; 61
    5422:	de b7       	in	r29, 0x3e	; 62
    5424:	89 83       	std	Y+1, r24	; 0x01

	M_Dio_void_setPinValue(LCD_RS_PIN, DIO_LOW);
    5426:	8d e0       	ldi	r24, 0x0D	; 13
    5428:	60 e0       	ldi	r22, 0x00	; 0
    542a:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
	H_LCD_void_latchByte(copy_u8command);
    542e:	89 81       	ldd	r24, Y+1	; 0x01
    5430:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <H_LCD_void_latchByte>


}
    5434:	0f 90       	pop	r0
    5436:	cf 91       	pop	r28
    5438:	df 91       	pop	r29
    543a:	08 95       	ret

0000543c <H_LCD_void_sendData>:

void H_LCD_void_sendData(u8 copy_u8data ){
    543c:	df 93       	push	r29
    543e:	cf 93       	push	r28
    5440:	0f 92       	push	r0
    5442:	cd b7       	in	r28, 0x3d	; 61
    5444:	de b7       	in	r29, 0x3e	; 62
    5446:	89 83       	std	Y+1, r24	; 0x01

	M_Dio_void_setPinValue(LCD_RS_PIN, DIO_HIGH);
    5448:	8d e0       	ldi	r24, 0x0D	; 13
    544a:	61 e0       	ldi	r22, 0x01	; 1
    544c:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>

	H_LCD_void_latchByte(copy_u8data);
    5450:	89 81       	ldd	r24, Y+1	; 0x01
    5452:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <H_LCD_void_latchByte>

}
    5456:	0f 90       	pop	r0
    5458:	cf 91       	pop	r28
    545a:	df 91       	pop	r29
    545c:	08 95       	ret

0000545e <H_LCD_void_sendString>:

void H_LCD_void_sendString( char  * pstr)
{
    545e:	df 93       	push	r29
    5460:	cf 93       	push	r28
    5462:	00 d0       	rcall	.+0      	; 0x5464 <H_LCD_void_sendString+0x6>
    5464:	00 d0       	rcall	.+0      	; 0x5466 <H_LCD_void_sendString+0x8>
    5466:	cd b7       	in	r28, 0x3d	; 61
    5468:	de b7       	in	r29, 0x3e	; 62
    546a:	9c 83       	std	Y+4, r25	; 0x04
    546c:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;pstr[i]!=0;i++)  /* send each char of string till the NULL */
    546e:	1a 82       	std	Y+2, r1	; 0x02
    5470:	19 82       	std	Y+1, r1	; 0x01
    5472:	0f c0       	rjmp	.+30     	; 0x5492 <H_LCD_void_sendString+0x34>
	{
		H_LCD_void_sendData (pstr[i]);  /* call LCD data write */
    5474:	29 81       	ldd	r18, Y+1	; 0x01
    5476:	3a 81       	ldd	r19, Y+2	; 0x02
    5478:	8b 81       	ldd	r24, Y+3	; 0x03
    547a:	9c 81       	ldd	r25, Y+4	; 0x04
    547c:	fc 01       	movw	r30, r24
    547e:	e2 0f       	add	r30, r18
    5480:	f3 1f       	adc	r31, r19
    5482:	80 81       	ld	r24, Z
    5484:	0e 94 1e 2a 	call	0x543c	; 0x543c <H_LCD_void_sendData>
}

void H_LCD_void_sendString( char  * pstr)
{
	int i;
	for(i=0;pstr[i]!=0;i++)  /* send each char of string till the NULL */
    5488:	89 81       	ldd	r24, Y+1	; 0x01
    548a:	9a 81       	ldd	r25, Y+2	; 0x02
    548c:	01 96       	adiw	r24, 0x01	; 1
    548e:	9a 83       	std	Y+2, r25	; 0x02
    5490:	89 83       	std	Y+1, r24	; 0x01
    5492:	29 81       	ldd	r18, Y+1	; 0x01
    5494:	3a 81       	ldd	r19, Y+2	; 0x02
    5496:	8b 81       	ldd	r24, Y+3	; 0x03
    5498:	9c 81       	ldd	r25, Y+4	; 0x04
    549a:	fc 01       	movw	r30, r24
    549c:	e2 0f       	add	r30, r18
    549e:	f3 1f       	adc	r31, r19
    54a0:	80 81       	ld	r24, Z
    54a2:	88 23       	and	r24, r24
    54a4:	39 f7       	brne	.-50     	; 0x5474 <H_LCD_void_sendString+0x16>

	}



}
    54a6:	0f 90       	pop	r0
    54a8:	0f 90       	pop	r0
    54aa:	0f 90       	pop	r0
    54ac:	0f 90       	pop	r0
    54ae:	cf 91       	pop	r28
    54b0:	df 91       	pop	r29
    54b2:	08 95       	ret

000054b4 <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    54b4:	df 93       	push	r29
    54b6:	cf 93       	push	r28
    54b8:	cd b7       	in	r28, 0x3d	; 61
    54ba:	de b7       	in	r29, 0x3e	; 62
    54bc:	ac 97       	sbiw	r28, 0x2c	; 44
    54be:	0f b6       	in	r0, 0x3f	; 63
    54c0:	f8 94       	cli
    54c2:	de bf       	out	0x3e, r29	; 62
    54c4:	0f be       	out	0x3f, r0	; 63
    54c6:	cd bf       	out	0x3d, r28	; 61
    54c8:	69 a7       	std	Y+41, r22	; 0x29
    54ca:	7a a7       	std	Y+42, r23	; 0x2a
    54cc:	8b a7       	std	Y+43, r24	; 0x2b
    54ce:	9c a7       	std	Y+44, r25	; 0x2c

	u16 num_string[20];

	if(copy_s32Num > 0)
    54d0:	89 a5       	ldd	r24, Y+41	; 0x29
    54d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    54d4:	ab a5       	ldd	r26, Y+43	; 0x2b
    54d6:	bc a5       	ldd	r27, Y+44	; 0x2c
    54d8:	18 16       	cp	r1, r24
    54da:	19 06       	cpc	r1, r25
    54dc:	1a 06       	cpc	r1, r26
    54de:	1b 06       	cpc	r1, r27
    54e0:	7c f4       	brge	.+30     	; 0x5500 <H_LCD_void_sendIntNum+0x4c>
	{
		itoa(copy_s32Num, num_string, 10);
    54e2:	89 a5       	ldd	r24, Y+41	; 0x29
    54e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    54e6:	9e 01       	movw	r18, r28
    54e8:	2f 5f       	subi	r18, 0xFF	; 255
    54ea:	3f 4f       	sbci	r19, 0xFF	; 255
    54ec:	b9 01       	movw	r22, r18
    54ee:	4a e0       	ldi	r20, 0x0A	; 10
    54f0:	50 e0       	ldi	r21, 0x00	; 0
    54f2:	0e 94 9a 36 	call	0x6d34	; 0x6d34 <itoa>
		H_LCD_void_sendString(num_string);
    54f6:	ce 01       	movw	r24, r28
    54f8:	01 96       	adiw	r24, 0x01	; 1
    54fa:	0e 94 2f 2a 	call	0x545e	; 0x545e <H_LCD_void_sendString>
    54fe:	26 c0       	rjmp	.+76     	; 0x554c <H_LCD_void_sendIntNum+0x98>
	}

	else if(copy_s32Num < 0)
    5500:	89 a5       	ldd	r24, Y+41	; 0x29
    5502:	9a a5       	ldd	r25, Y+42	; 0x2a
    5504:	ab a5       	ldd	r26, Y+43	; 0x2b
    5506:	bc a5       	ldd	r27, Y+44	; 0x2c
    5508:	bb 23       	and	r27, r27
    550a:	04 f5       	brge	.+64     	; 0x554c <H_LCD_void_sendIntNum+0x98>
	{
		H_LCD_void_sendData ('-');
    550c:	8d e2       	ldi	r24, 0x2D	; 45
    550e:	0e 94 1e 2a 	call	0x543c	; 0x543c <H_LCD_void_sendData>
		copy_s32Num *= -1;
    5512:	89 a5       	ldd	r24, Y+41	; 0x29
    5514:	9a a5       	ldd	r25, Y+42	; 0x2a
    5516:	ab a5       	ldd	r26, Y+43	; 0x2b
    5518:	bc a5       	ldd	r27, Y+44	; 0x2c
    551a:	b0 95       	com	r27
    551c:	a0 95       	com	r26
    551e:	90 95       	com	r25
    5520:	81 95       	neg	r24
    5522:	9f 4f       	sbci	r25, 0xFF	; 255
    5524:	af 4f       	sbci	r26, 0xFF	; 255
    5526:	bf 4f       	sbci	r27, 0xFF	; 255
    5528:	89 a7       	std	Y+41, r24	; 0x29
    552a:	9a a7       	std	Y+42, r25	; 0x2a
    552c:	ab a7       	std	Y+43, r26	; 0x2b
    552e:	bc a7       	std	Y+44, r27	; 0x2c
		itoa(copy_s32Num, num_string, 10);
    5530:	89 a5       	ldd	r24, Y+41	; 0x29
    5532:	9a a5       	ldd	r25, Y+42	; 0x2a
    5534:	9e 01       	movw	r18, r28
    5536:	2f 5f       	subi	r18, 0xFF	; 255
    5538:	3f 4f       	sbci	r19, 0xFF	; 255
    553a:	b9 01       	movw	r22, r18
    553c:	4a e0       	ldi	r20, 0x0A	; 10
    553e:	50 e0       	ldi	r21, 0x00	; 0
    5540:	0e 94 9a 36 	call	0x6d34	; 0x6d34 <itoa>
		H_LCD_void_sendString(num_string);
    5544:	ce 01       	movw	r24, r28
    5546:	01 96       	adiw	r24, 0x01	; 1
    5548:	0e 94 2f 2a 	call	0x545e	; 0x545e <H_LCD_void_sendString>

	}


	*/
}
    554c:	ac 96       	adiw	r28, 0x2c	; 44
    554e:	0f b6       	in	r0, 0x3f	; 63
    5550:	f8 94       	cli
    5552:	de bf       	out	0x3e, r29	; 62
    5554:	0f be       	out	0x3f, r0	; 63
    5556:	cd bf       	out	0x3d, r28	; 61
    5558:	cf 91       	pop	r28
    555a:	df 91       	pop	r29
    555c:	08 95       	ret

0000555e <H_LCD_void_gotoXY>:


void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    555e:	df 93       	push	r29
    5560:	cf 93       	push	r28
    5562:	cd b7       	in	r28, 0x3d	; 61
    5564:	de b7       	in	r29, 0x3e	; 62
    5566:	2c 97       	sbiw	r28, 0x0c	; 12
    5568:	0f b6       	in	r0, 0x3f	; 63
    556a:	f8 94       	cli
    556c:	de bf       	out	0x3e, r29	; 62
    556e:	0f be       	out	0x3f, r0	; 63
    5570:	cd bf       	out	0x3d, r28	; 61
    5572:	89 87       	std	Y+9, r24	; 0x09
    5574:	6a 87       	std	Y+10, r22	; 0x0a

	switch(copy_u8Row)
    5576:	89 85       	ldd	r24, Y+9	; 0x09
    5578:	28 2f       	mov	r18, r24
    557a:	30 e0       	ldi	r19, 0x00	; 0
    557c:	3c 87       	std	Y+12, r19	; 0x0c
    557e:	2b 87       	std	Y+11, r18	; 0x0b
    5580:	8b 85       	ldd	r24, Y+11	; 0x0b
    5582:	9c 85       	ldd	r25, Y+12	; 0x0c
    5584:	82 30       	cpi	r24, 0x02	; 2
    5586:	91 05       	cpc	r25, r1
    5588:	71 f1       	breq	.+92     	; 0x55e6 <H_LCD_void_gotoXY+0x88>
    558a:	2b 85       	ldd	r18, Y+11	; 0x0b
    558c:	3c 85       	ldd	r19, Y+12	; 0x0c
    558e:	23 30       	cpi	r18, 0x03	; 3
    5590:	31 05       	cpc	r19, r1
    5592:	34 f4       	brge	.+12     	; 0x55a0 <H_LCD_void_gotoXY+0x42>
    5594:	8b 85       	ldd	r24, Y+11	; 0x0b
    5596:	9c 85       	ldd	r25, Y+12	; 0x0c
    5598:	81 30       	cpi	r24, 0x01	; 1
    559a:	91 05       	cpc	r25, r1
    559c:	69 f0       	breq	.+26     	; 0x55b8 <H_LCD_void_gotoXY+0x5a>
    559e:	67 c0       	rjmp	.+206    	; 0x566e <H_LCD_void_gotoXY+0x110>
    55a0:	2b 85       	ldd	r18, Y+11	; 0x0b
    55a2:	3c 85       	ldd	r19, Y+12	; 0x0c
    55a4:	23 30       	cpi	r18, 0x03	; 3
    55a6:	31 05       	cpc	r19, r1
    55a8:	a9 f1       	breq	.+106    	; 0x5614 <H_LCD_void_gotoXY+0xb6>
    55aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    55ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    55ae:	84 30       	cpi	r24, 0x04	; 4
    55b0:	91 05       	cpc	r25, r1
    55b2:	09 f4       	brne	.+2      	; 0x55b6 <H_LCD_void_gotoXY+0x58>
    55b4:	46 c0       	rjmp	.+140    	; 0x5642 <H_LCD_void_gotoXY+0xe4>
    55b6:	5b c0       	rjmp	.+182    	; 0x566e <H_LCD_void_gotoXY+0x110>
	{

		case 1:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE1);
    55b8:	80 e8       	ldi	r24, 0x80	; 128
    55ba:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>
				for(int i =0; i<copy_u8Col; i++)
    55be:	18 86       	std	Y+8, r1	; 0x08
    55c0:	1f 82       	std	Y+7, r1	; 0x07
    55c2:	08 c0       	rjmp	.+16     	; 0x55d4 <H_LCD_void_gotoXY+0x76>
				{
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
    55c4:	84 e1       	ldi	r24, 0x14	; 20
    55c6:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>

	switch(copy_u8Row)
	{

		case 1:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE1);
				for(int i =0; i<copy_u8Col; i++)
    55ca:	8f 81       	ldd	r24, Y+7	; 0x07
    55cc:	98 85       	ldd	r25, Y+8	; 0x08
    55ce:	01 96       	adiw	r24, 0x01	; 1
    55d0:	98 87       	std	Y+8, r25	; 0x08
    55d2:	8f 83       	std	Y+7, r24	; 0x07
    55d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    55d6:	28 2f       	mov	r18, r24
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	8f 81       	ldd	r24, Y+7	; 0x07
    55dc:	98 85       	ldd	r25, Y+8	; 0x08
    55de:	82 17       	cp	r24, r18
    55e0:	93 07       	cpc	r25, r19
    55e2:	84 f3       	brlt	.-32     	; 0x55c4 <H_LCD_void_gotoXY+0x66>
    55e4:	44 c0       	rjmp	.+136    	; 0x566e <H_LCD_void_gotoXY+0x110>
				{
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
				}
				break;

		case 2:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE2);
    55e6:	80 ec       	ldi	r24, 0xC0	; 192
    55e8:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>
				for(int i =0; i<copy_u8Col; i++)
    55ec:	1e 82       	std	Y+6, r1	; 0x06
    55ee:	1d 82       	std	Y+5, r1	; 0x05
    55f0:	08 c0       	rjmp	.+16     	; 0x5602 <H_LCD_void_gotoXY+0xa4>
				{
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
    55f2:	84 e1       	ldi	r24, 0x14	; 20
    55f4:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
				}
				break;

		case 2:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE2);
				for(int i =0; i<copy_u8Col; i++)
    55f8:	8d 81       	ldd	r24, Y+5	; 0x05
    55fa:	9e 81       	ldd	r25, Y+6	; 0x06
    55fc:	01 96       	adiw	r24, 0x01	; 1
    55fe:	9e 83       	std	Y+6, r25	; 0x06
    5600:	8d 83       	std	Y+5, r24	; 0x05
    5602:	8a 85       	ldd	r24, Y+10	; 0x0a
    5604:	28 2f       	mov	r18, r24
    5606:	30 e0       	ldi	r19, 0x00	; 0
    5608:	8d 81       	ldd	r24, Y+5	; 0x05
    560a:	9e 81       	ldd	r25, Y+6	; 0x06
    560c:	82 17       	cp	r24, r18
    560e:	93 07       	cpc	r25, r19
    5610:	84 f3       	brlt	.-32     	; 0x55f2 <H_LCD_void_gotoXY+0x94>
    5612:	2d c0       	rjmp	.+90     	; 0x566e <H_LCD_void_gotoXY+0x110>
				{
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
				}
				break;

		case 3:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE3);
    5614:	84 e9       	ldi	r24, 0x94	; 148
    5616:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>
				for(int i =0; i<copy_u8Col; i++)
    561a:	1c 82       	std	Y+4, r1	; 0x04
    561c:	1b 82       	std	Y+3, r1	; 0x03
    561e:	08 c0       	rjmp	.+16     	; 0x5630 <H_LCD_void_gotoXY+0xd2>
				{
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
    5620:	84 e1       	ldi	r24, 0x14	; 20
    5622:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
				}
				break;

		case 3:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE3);
				for(int i =0; i<copy_u8Col; i++)
    5626:	8b 81       	ldd	r24, Y+3	; 0x03
    5628:	9c 81       	ldd	r25, Y+4	; 0x04
    562a:	01 96       	adiw	r24, 0x01	; 1
    562c:	9c 83       	std	Y+4, r25	; 0x04
    562e:	8b 83       	std	Y+3, r24	; 0x03
    5630:	8a 85       	ldd	r24, Y+10	; 0x0a
    5632:	28 2f       	mov	r18, r24
    5634:	30 e0       	ldi	r19, 0x00	; 0
    5636:	8b 81       	ldd	r24, Y+3	; 0x03
    5638:	9c 81       	ldd	r25, Y+4	; 0x04
    563a:	82 17       	cp	r24, r18
    563c:	93 07       	cpc	r25, r19
    563e:	84 f3       	brlt	.-32     	; 0x5620 <H_LCD_void_gotoXY+0xc2>
    5640:	16 c0       	rjmp	.+44     	; 0x566e <H_LCD_void_gotoXY+0x110>
				{
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
				}
				break;

		case 4:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE4);
    5642:	84 ed       	ldi	r24, 0xD4	; 212
    5644:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>
				for(int i =0; i<copy_u8Col; i++)
    5648:	1a 82       	std	Y+2, r1	; 0x02
    564a:	19 82       	std	Y+1, r1	; 0x01
    564c:	08 c0       	rjmp	.+16     	; 0x565e <H_LCD_void_gotoXY+0x100>
				{
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
    564e:	84 e1       	ldi	r24, 0x14	; 20
    5650:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
				}
				break;

		case 4:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE4);
				for(int i =0; i<copy_u8Col; i++)
    5654:	89 81       	ldd	r24, Y+1	; 0x01
    5656:	9a 81       	ldd	r25, Y+2	; 0x02
    5658:	01 96       	adiw	r24, 0x01	; 1
    565a:	9a 83       	std	Y+2, r25	; 0x02
    565c:	89 83       	std	Y+1, r24	; 0x01
    565e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5660:	28 2f       	mov	r18, r24
    5662:	30 e0       	ldi	r19, 0x00	; 0
    5664:	89 81       	ldd	r24, Y+1	; 0x01
    5666:	9a 81       	ldd	r25, Y+2	; 0x02
    5668:	82 17       	cp	r24, r18
    566a:	93 07       	cpc	r25, r19
    566c:	84 f3       	brlt	.-32     	; 0x564e <H_LCD_void_gotoXY+0xf0>
				break;

	}


}
    566e:	2c 96       	adiw	r28, 0x0c	; 12
    5670:	0f b6       	in	r0, 0x3f	; 63
    5672:	f8 94       	cli
    5674:	de bf       	out	0x3e, r29	; 62
    5676:	0f be       	out	0x3f, r0	; 63
    5678:	cd bf       	out	0x3d, r28	; 61
    567a:	cf 91       	pop	r28
    567c:	df 91       	pop	r29
    567e:	08 95       	ret

00005680 <H_LCD_void_creatCustomChar>:
void H_LCD_void_creatCustomChar (const u8 * ArrPattern,u8 copy_u8charCode)
{
    5680:	df 93       	push	r29
    5682:	cf 93       	push	r28
    5684:	00 d0       	rcall	.+0      	; 0x5686 <H_LCD_void_creatCustomChar+0x6>
    5686:	00 d0       	rcall	.+0      	; 0x5688 <H_LCD_void_creatCustomChar+0x8>
    5688:	cd b7       	in	r28, 0x3d	; 61
    568a:	de b7       	in	r29, 0x3e	; 62
    568c:	9b 83       	std	Y+3, r25	; 0x03
    568e:	8a 83       	std	Y+2, r24	; 0x02
    5690:	6c 83       	std	Y+4, r22	; 0x04

	u8 i;

	if(copy_u8charCode < 8)
    5692:	8c 81       	ldd	r24, Y+4	; 0x04
    5694:	88 30       	cpi	r24, 0x08	; 8
    5696:	f8 f4       	brcc	.+62     	; 0x56d6 <H_LCD_void_creatCustomChar+0x56>
	{
		/* select the CGRAM address to store the custom character   */
		H_LCD_void_sendCommand(LCD_CGRAM_START_ADDRESS + (copy_u8charCode * 8));
    5698:	8c 81       	ldd	r24, Y+4	; 0x04
    569a:	88 2f       	mov	r24, r24
    569c:	90 e0       	ldi	r25, 0x00	; 0
    569e:	08 96       	adiw	r24, 0x08	; 8
    56a0:	88 0f       	add	r24, r24
    56a2:	99 1f       	adc	r25, r25
    56a4:	88 0f       	add	r24, r24
    56a6:	99 1f       	adc	r25, r25
    56a8:	88 0f       	add	r24, r24
    56aa:	99 1f       	adc	r25, r25
    56ac:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>

		/* store the custom character patterin into CGRAM   */
		for(i =0; i<8; i++)
    56b0:	19 82       	std	Y+1, r1	; 0x01
    56b2:	0e c0       	rjmp	.+28     	; 0x56d0 <H_LCD_void_creatCustomChar+0x50>
		{
			H_LCD_void_sendData(ArrPattern[i]);
    56b4:	89 81       	ldd	r24, Y+1	; 0x01
    56b6:	28 2f       	mov	r18, r24
    56b8:	30 e0       	ldi	r19, 0x00	; 0
    56ba:	8a 81       	ldd	r24, Y+2	; 0x02
    56bc:	9b 81       	ldd	r25, Y+3	; 0x03
    56be:	fc 01       	movw	r30, r24
    56c0:	e2 0f       	add	r30, r18
    56c2:	f3 1f       	adc	r31, r19
    56c4:	80 81       	ld	r24, Z
    56c6:	0e 94 1e 2a 	call	0x543c	; 0x543c <H_LCD_void_sendData>
	{
		/* select the CGRAM address to store the custom character   */
		H_LCD_void_sendCommand(LCD_CGRAM_START_ADDRESS + (copy_u8charCode * 8));

		/* store the custom character patterin into CGRAM   */
		for(i =0; i<8; i++)
    56ca:	89 81       	ldd	r24, Y+1	; 0x01
    56cc:	8f 5f       	subi	r24, 0xFF	; 255
    56ce:	89 83       	std	Y+1, r24	; 0x01
    56d0:	89 81       	ldd	r24, Y+1	; 0x01
    56d2:	88 30       	cpi	r24, 0x08	; 8
    56d4:	78 f3       	brcs	.-34     	; 0x56b4 <H_LCD_void_creatCustomChar+0x34>
	}

	/* Return to DDRAM address 0x00 */
	//H_LCD_void_sendCommand(LCD_SET_DDRAM_ADDR);

}
    56d6:	0f 90       	pop	r0
    56d8:	0f 90       	pop	r0
    56da:	0f 90       	pop	r0
    56dc:	0f 90       	pop	r0
    56de:	cf 91       	pop	r28
    56e0:	df 91       	pop	r29
    56e2:	08 95       	ret

000056e4 <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    56e4:	df 93       	push	r29
    56e6:	cf 93       	push	r28
    56e8:	0f 92       	push	r0
    56ea:	cd b7       	in	r28, 0x3d	; 61
    56ec:	de b7       	in	r29, 0x3e	; 62
    56ee:	89 83       	std	Y+1, r24	; 0x01

	/* Set DDRAM address where the custom character will be displayed  */
	//H_LCD_void_sendCommand(LCD_SET_DDRAM_ADDR + copy_u8charCode );

	/* Send the data to be displayed on LCD  */
	H_LCD_void_sendData(copy_u8charCode);
    56f0:	89 81       	ldd	r24, Y+1	; 0x01
    56f2:	0e 94 1e 2a 	call	0x543c	; 0x543c <H_LCD_void_sendData>
}
    56f6:	0f 90       	pop	r0
    56f8:	cf 91       	pop	r28
    56fa:	df 91       	pop	r29
    56fc:	08 95       	ret

000056fe <H_LCD_void_Clear_Display>:

void H_LCD_void_Clear_Display()
{
    56fe:	df 93       	push	r29
    5700:	cf 93       	push	r28
    5702:	cd b7       	in	r28, 0x3d	; 61
    5704:	de b7       	in	r29, 0x3e	; 62

	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY);
    5706:	81 e0       	ldi	r24, 0x01	; 1
    5708:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE1);
    570c:	80 e8       	ldi	r24, 0x80	; 128
    570e:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>

}
    5712:	cf 91       	pop	r28
    5714:	df 91       	pop	r29
    5716:	08 95       	ret

00005718 <H_LCD_void_Init>:


void H_LCD_void_Init(void)
{
    5718:	df 93       	push	r29
    571a:	cf 93       	push	r28
    571c:	cd b7       	in	r28, 0x3d	; 61
    571e:	de b7       	in	r29, 0x3e	; 62
    5720:	2e 97       	sbiw	r28, 0x0e	; 14
    5722:	0f b6       	in	r0, 0x3f	; 63
    5724:	f8 94       	cli
    5726:	de bf       	out	0x3e, r29	; 62
    5728:	0f be       	out	0x3f, r0	; 63
    572a:	cd bf       	out	0x3d, r28	; 61
    572c:	80 e0       	ldi	r24, 0x00	; 0
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	a0 e2       	ldi	r26, 0x20	; 32
    5732:	b2 e4       	ldi	r27, 0x42	; 66
    5734:	8b 87       	std	Y+11, r24	; 0x0b
    5736:	9c 87       	std	Y+12, r25	; 0x0c
    5738:	ad 87       	std	Y+13, r26	; 0x0d
    573a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    573c:	6b 85       	ldd	r22, Y+11	; 0x0b
    573e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5740:	8d 85       	ldd	r24, Y+13	; 0x0d
    5742:	9e 85       	ldd	r25, Y+14	; 0x0e
    5744:	20 e0       	ldi	r18, 0x00	; 0
    5746:	30 e0       	ldi	r19, 0x00	; 0
    5748:	4a e7       	ldi	r20, 0x7A	; 122
    574a:	55 e4       	ldi	r21, 0x45	; 69
    574c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5750:	dc 01       	movw	r26, r24
    5752:	cb 01       	movw	r24, r22
    5754:	8f 83       	std	Y+7, r24	; 0x07
    5756:	98 87       	std	Y+8, r25	; 0x08
    5758:	a9 87       	std	Y+9, r26	; 0x09
    575a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    575c:	6f 81       	ldd	r22, Y+7	; 0x07
    575e:	78 85       	ldd	r23, Y+8	; 0x08
    5760:	89 85       	ldd	r24, Y+9	; 0x09
    5762:	9a 85       	ldd	r25, Y+10	; 0x0a
    5764:	20 e0       	ldi	r18, 0x00	; 0
    5766:	30 e0       	ldi	r19, 0x00	; 0
    5768:	40 e8       	ldi	r20, 0x80	; 128
    576a:	5f e3       	ldi	r21, 0x3F	; 63
    576c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5770:	88 23       	and	r24, r24
    5772:	2c f4       	brge	.+10     	; 0x577e <H_LCD_void_Init+0x66>
		__ticks = 1;
    5774:	81 e0       	ldi	r24, 0x01	; 1
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	9e 83       	std	Y+6, r25	; 0x06
    577a:	8d 83       	std	Y+5, r24	; 0x05
    577c:	3f c0       	rjmp	.+126    	; 0x57fc <H_LCD_void_Init+0xe4>
	else if (__tmp > 65535)
    577e:	6f 81       	ldd	r22, Y+7	; 0x07
    5780:	78 85       	ldd	r23, Y+8	; 0x08
    5782:	89 85       	ldd	r24, Y+9	; 0x09
    5784:	9a 85       	ldd	r25, Y+10	; 0x0a
    5786:	20 e0       	ldi	r18, 0x00	; 0
    5788:	3f ef       	ldi	r19, 0xFF	; 255
    578a:	4f e7       	ldi	r20, 0x7F	; 127
    578c:	57 e4       	ldi	r21, 0x47	; 71
    578e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5792:	18 16       	cp	r1, r24
    5794:	4c f5       	brge	.+82     	; 0x57e8 <H_LCD_void_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5796:	6b 85       	ldd	r22, Y+11	; 0x0b
    5798:	7c 85       	ldd	r23, Y+12	; 0x0c
    579a:	8d 85       	ldd	r24, Y+13	; 0x0d
    579c:	9e 85       	ldd	r25, Y+14	; 0x0e
    579e:	20 e0       	ldi	r18, 0x00	; 0
    57a0:	30 e0       	ldi	r19, 0x00	; 0
    57a2:	40 e2       	ldi	r20, 0x20	; 32
    57a4:	51 e4       	ldi	r21, 0x41	; 65
    57a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57aa:	dc 01       	movw	r26, r24
    57ac:	cb 01       	movw	r24, r22
    57ae:	bc 01       	movw	r22, r24
    57b0:	cd 01       	movw	r24, r26
    57b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57b6:	dc 01       	movw	r26, r24
    57b8:	cb 01       	movw	r24, r22
    57ba:	9e 83       	std	Y+6, r25	; 0x06
    57bc:	8d 83       	std	Y+5, r24	; 0x05
    57be:	0f c0       	rjmp	.+30     	; 0x57de <H_LCD_void_Init+0xc6>
    57c0:	80 e9       	ldi	r24, 0x90	; 144
    57c2:	91 e0       	ldi	r25, 0x01	; 1
    57c4:	9c 83       	std	Y+4, r25	; 0x04
    57c6:	8b 83       	std	Y+3, r24	; 0x03
    57c8:	8b 81       	ldd	r24, Y+3	; 0x03
    57ca:	9c 81       	ldd	r25, Y+4	; 0x04
    57cc:	01 97       	sbiw	r24, 0x01	; 1
    57ce:	f1 f7       	brne	.-4      	; 0x57cc <H_LCD_void_Init+0xb4>
    57d0:	9c 83       	std	Y+4, r25	; 0x04
    57d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57d4:	8d 81       	ldd	r24, Y+5	; 0x05
    57d6:	9e 81       	ldd	r25, Y+6	; 0x06
    57d8:	01 97       	sbiw	r24, 0x01	; 1
    57da:	9e 83       	std	Y+6, r25	; 0x06
    57dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57de:	8d 81       	ldd	r24, Y+5	; 0x05
    57e0:	9e 81       	ldd	r25, Y+6	; 0x06
    57e2:	00 97       	sbiw	r24, 0x00	; 0
    57e4:	69 f7       	brne	.-38     	; 0x57c0 <H_LCD_void_Init+0xa8>
    57e6:	14 c0       	rjmp	.+40     	; 0x5810 <H_LCD_void_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57e8:	6f 81       	ldd	r22, Y+7	; 0x07
    57ea:	78 85       	ldd	r23, Y+8	; 0x08
    57ec:	89 85       	ldd	r24, Y+9	; 0x09
    57ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    57f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57f4:	dc 01       	movw	r26, r24
    57f6:	cb 01       	movw	r24, r22
    57f8:	9e 83       	std	Y+6, r25	; 0x06
    57fa:	8d 83       	std	Y+5, r24	; 0x05
    57fc:	8d 81       	ldd	r24, Y+5	; 0x05
    57fe:	9e 81       	ldd	r25, Y+6	; 0x06
    5800:	9a 83       	std	Y+2, r25	; 0x02
    5802:	89 83       	std	Y+1, r24	; 0x01
    5804:	89 81       	ldd	r24, Y+1	; 0x01
    5806:	9a 81       	ldd	r25, Y+2	; 0x02
    5808:	01 97       	sbiw	r24, 0x01	; 1
    580a:	f1 f7       	brne	.-4      	; 0x5808 <H_LCD_void_Init+0xf0>
    580c:	9a 83       	std	Y+2, r25	; 0x02
    580e:	89 83       	std	Y+1, r24	; 0x01

	/* LCD Power ON delay  */
	_delay_ms(40);

	/* Send for 4 bit initialization of LCD  */
	H_LCD_void_sendCommand(0x33);
    5810:	83 e3       	ldi	r24, 0x33	; 51
    5812:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_FUN_SET_MODE);
    5816:	82 e3       	ldi	r24, 0x32	; 50
    5818:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>

	/* 2 line, 5*7 matrix in 4-bit mode */
	H_LCD_void_sendCommand(LCD_4BIT_2LINE_5X7);
    581c:	88 e2       	ldi	r24, 0x28	; 40
    581e:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>

	/* Display on cursor ON */
	H_LCD_void_sendCommand(LCD_DISPLAY_ON_CURSOR_BLINKING);
    5822:	8f e0       	ldi	r24, 0x0F	; 15
    5824:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>

	/* Increment cursor (shift cursor to right) */
	H_LCD_void_sendCommand(LCD_INCREMENT_CURSOR_SHIFT_TO_RIGHT);
    5828:	86 e0       	ldi	r24, 0x06	; 6
    582a:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>

	/* Clear display screen */
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY);
    582e:	81 e0       	ldi	r24, 0x01	; 1
    5830:	0e 94 0d 2a 	call	0x541a	; 0x541a <H_LCD_void_sendCommand>


}
    5834:	2e 96       	adiw	r28, 0x0e	; 14
    5836:	0f b6       	in	r0, 0x3f	; 63
    5838:	f8 94       	cli
    583a:	de bf       	out	0x3e, r29	; 62
    583c:	0f be       	out	0x3f, r0	; 63
    583e:	cd bf       	out	0x3d, r28	; 61
    5840:	cf 91       	pop	r28
    5842:	df 91       	pop	r29
    5844:	08 95       	ret

00005846 <MOTOR_ON>:

#define MOTOR_FREQUENCY		15600
void MOTOR_Enable();

void MOTOR_ON(MOTOR_DIR MorotDirection, u8 DutyCycle)
{
    5846:	df 93       	push	r29
    5848:	cf 93       	push	r28
    584a:	00 d0       	rcall	.+0      	; 0x584c <MOTOR_ON+0x6>
    584c:	cd b7       	in	r28, 0x3d	; 61
    584e:	de b7       	in	r29, 0x3e	; 62
    5850:	89 83       	std	Y+1, r24	; 0x01
    5852:	6a 83       	std	Y+2, r22	; 0x02
	M_vTIMER0_SetPhaseCorrectPWM( MOTOR_FREQUENCY , DutyCycle , TIMER0_PWM_PHASECORRECT_NonInverted_MODE);
    5854:	60 ef       	ldi	r22, 0xF0	; 240
    5856:	7c e3       	ldi	r23, 0x3C	; 60
    5858:	80 e0       	ldi	r24, 0x00	; 0
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	4a 81       	ldd	r20, Y+2	; 0x02
    585e:	20 e2       	ldi	r18, 0x20	; 32
    5860:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <M_vTIMER0_SetPhaseCorrectPWM>
	M_Dio_void_setPinValue(MOTOR_EN_PIN, 1);
    5864:	8a e1       	ldi	r24, 0x1A	; 26
    5866:	61 e0       	ldi	r22, 0x01	; 1
    5868:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(MOTOR_DIR_PIN, MorotDirection);
    586c:	89 e1       	ldi	r24, 0x19	; 25
    586e:	69 81       	ldd	r22, Y+1	; 0x01
    5870:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
	
}
    5874:	0f 90       	pop	r0
    5876:	0f 90       	pop	r0
    5878:	cf 91       	pop	r28
    587a:	df 91       	pop	r29
    587c:	08 95       	ret

0000587e <MOTOR_OFF>:

void MOTOR_OFF()
{
    587e:	df 93       	push	r29
    5880:	cf 93       	push	r28
    5882:	cd b7       	in	r28, 0x3d	; 61
    5884:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinValue(MOTOR_EN_PIN, 0);
    5886:	8a e1       	ldi	r24, 0x1A	; 26
    5888:	60 e0       	ldi	r22, 0x00	; 0
    588a:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <M_Dio_void_setPinValue>
}
    588e:	cf 91       	pop	r28
    5890:	df 91       	pop	r29
    5892:	08 95       	ret

00005894 <Read_Wifi>:
  INCLUDES
*******************************************/
#include "APP_int.h"

void Read_Wifi(void)
{
    5894:	df 93       	push	r29
    5896:	cf 93       	push	r28
    5898:	cd b7       	in	r28, 0x3d	; 61
    589a:	de b7       	in	r29, 0x3e	; 62
	/* Check Inputs for Logout_Request_Flag */
	if (Wifi_Wait_Data(Logout_Requested))		Logout_Request_Flag = Logout_Requested ;
    589c:	8a e7       	ldi	r24, 0x7A	; 122
    589e:	0e 94 90 24 	call	0x4920	; 0x4920 <Wifi_Wait_Data>
    58a2:	88 23       	and	r24, r24
    58a4:	19 f0       	breq	.+6      	; 0x58ac <Read_Wifi+0x18>
    58a6:	8a e7       	ldi	r24, 0x7A	; 122
    58a8:	80 93 75 06 	sts	0x0675, r24

	/* Check Inputs for Motor State Flag */
	if (Wifi_Wait_Data(Motor_State_OFF))		Motor_State_Flag = Motor_State_OFF ;
    58ac:	81 e6       	ldi	r24, 0x61	; 97
    58ae:	0e 94 90 24 	call	0x4920	; 0x4920 <Wifi_Wait_Data>
    58b2:	88 23       	and	r24, r24
    58b4:	19 f0       	breq	.+6      	; 0x58bc <Read_Wifi+0x28>
    58b6:	81 e6       	ldi	r24, 0x61	; 97
    58b8:	80 93 67 06 	sts	0x0667, r24
	if (Wifi_Wait_Data(Motor_State_HighSpeed))	Motor_State_Flag = Motor_State_HighSpeed;
    58bc:	82 e6       	ldi	r24, 0x62	; 98
    58be:	0e 94 90 24 	call	0x4920	; 0x4920 <Wifi_Wait_Data>
    58c2:	88 23       	and	r24, r24
    58c4:	19 f0       	breq	.+6      	; 0x58cc <Read_Wifi+0x38>
    58c6:	82 e6       	ldi	r24, 0x62	; 98
    58c8:	80 93 67 06 	sts	0x0667, r24
	if (Wifi_Wait_Data(Motor_State_LowSpeed))	Motor_State_Flag = Motor_State_LowSpeed ;
    58cc:	83 e6       	ldi	r24, 0x63	; 99
    58ce:	0e 94 90 24 	call	0x4920	; 0x4920 <Wifi_Wait_Data>
    58d2:	88 23       	and	r24, r24
    58d4:	19 f0       	breq	.+6      	; 0x58dc <Read_Wifi+0x48>
    58d6:	83 e6       	ldi	r24, 0x63	; 99
    58d8:	80 93 67 06 	sts	0x0667, r24
	if (Wifi_Wait_Data(Motor_State_Auto))		Motor_State_Flag = Motor_State_Auto ;
    58dc:	84 e6       	ldi	r24, 0x64	; 100
    58de:	0e 94 90 24 	call	0x4920	; 0x4920 <Wifi_Wait_Data>
    58e2:	88 23       	and	r24, r24
    58e4:	19 f0       	breq	.+6      	; 0x58ec <Read_Wifi+0x58>
    58e6:	84 e6       	ldi	r24, 0x64	; 100
    58e8:	80 93 67 06 	sts	0x0667, r24

	/* Check Inputs for LED_State_Flag */
	if (Wifi_Wait_Data(LED_State_OFF))			LED_State_Flag = LED_State_OFF ;
    58ec:	85 e6       	ldi	r24, 0x65	; 101
    58ee:	0e 94 90 24 	call	0x4920	; 0x4920 <Wifi_Wait_Data>
    58f2:	88 23       	and	r24, r24
    58f4:	19 f0       	breq	.+6      	; 0x58fc <Read_Wifi+0x68>
    58f6:	85 e6       	ldi	r24, 0x65	; 101
    58f8:	80 93 7d 06 	sts	0x067D, r24
	if (Wifi_Wait_Data(LED_State_Auto))			LED_State_Flag = LED_State_Auto ;
    58fc:	86 e6       	ldi	r24, 0x66	; 102
    58fe:	0e 94 90 24 	call	0x4920	; 0x4920 <Wifi_Wait_Data>
    5902:	88 23       	and	r24, r24
    5904:	19 f0       	breq	.+6      	; 0x590c <Read_Wifi+0x78>
    5906:	86 e6       	ldi	r24, 0x66	; 102
    5908:	80 93 7d 06 	sts	0x067D, r24

	/* Check Inputs for Temperature_Request_Flag */
	if (Wifi_Wait_Data(Temperature_Requested))  Temperature_Request_Flag = Temperature_Requested ;
    590c:	87 e6       	ldi	r24, 0x67	; 103
    590e:	0e 94 90 24 	call	0x4920	; 0x4920 <Wifi_Wait_Data>
    5912:	88 23       	and	r24, r24
    5914:	19 f0       	breq	.+6      	; 0x591c <Read_Wifi+0x88>
    5916:	87 e6       	ldi	r24, 0x67	; 103
    5918:	80 93 7e 06 	sts	0x067E, r24
	Wifi_Buffer_Reset();
    591c:	0e 94 11 26 	call	0x4c22	; 0x4c22 <Wifi_Buffer_Reset>
}
    5920:	cf 91       	pop	r28
    5922:	df 91       	pop	r29
    5924:	08 95       	ret

00005926 <Show_Temperture_Wifi>:


/* Send temperture to user if Temperture requested flag is set */
void Show_Temperture_Wifi()
{
    5926:	df 93       	push	r29
    5928:	cf 93       	push	r28
    592a:	cd b7       	in	r28, 0x3d	; 61
    592c:	de b7       	in	r29, 0x3e	; 62
    592e:	64 97       	sbiw	r28, 0x14	; 20
    5930:	0f b6       	in	r0, 0x3f	; 63
    5932:	f8 94       	cli
    5934:	de bf       	out	0x3e, r29	; 62
    5936:	0f be       	out	0x3f, r0	; 63
    5938:	cd bf       	out	0x3d, r28	; 61
	if(Temperature_Request_Flag == Temperature_Requested )
    593a:	80 91 7e 06 	lds	r24, 0x067E
    593e:	87 36       	cpi	r24, 0x67	; 103
    5940:	79 f5       	brne	.+94     	; 0x59a0 <Show_Temperture_Wifi+0x7a>
	{
		//current_temp
		char Temperature_buffer[20];
		sprintf(Temperature_buffer, "Temperature= %ldC\r\n",current_temp);
    5942:	20 91 6d 06 	lds	r18, 0x066D
    5946:	30 91 6e 06 	lds	r19, 0x066E
    594a:	40 91 6f 06 	lds	r20, 0x066F
    594e:	50 91 70 06 	lds	r21, 0x0670
    5952:	8d b7       	in	r24, 0x3d	; 61
    5954:	9e b7       	in	r25, 0x3e	; 62
    5956:	08 97       	sbiw	r24, 0x08	; 8
    5958:	0f b6       	in	r0, 0x3f	; 63
    595a:	f8 94       	cli
    595c:	9e bf       	out	0x3e, r25	; 62
    595e:	0f be       	out	0x3f, r0	; 63
    5960:	8d bf       	out	0x3d, r24	; 61
    5962:	ed b7       	in	r30, 0x3d	; 61
    5964:	fe b7       	in	r31, 0x3e	; 62
    5966:	31 96       	adiw	r30, 0x01	; 1
    5968:	ce 01       	movw	r24, r28
    596a:	01 96       	adiw	r24, 0x01	; 1
    596c:	91 83       	std	Z+1, r25	; 0x01
    596e:	80 83       	st	Z, r24
    5970:	8f e1       	ldi	r24, 0x1F	; 31
    5972:	91 e0       	ldi	r25, 0x01	; 1
    5974:	93 83       	std	Z+3, r25	; 0x03
    5976:	82 83       	std	Z+2, r24	; 0x02
    5978:	24 83       	std	Z+4, r18	; 0x04
    597a:	35 83       	std	Z+5, r19	; 0x05
    597c:	46 83       	std	Z+6, r20	; 0x06
    597e:	57 83       	std	Z+7, r21	; 0x07
    5980:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <sprintf>
    5984:	8d b7       	in	r24, 0x3d	; 61
    5986:	9e b7       	in	r25, 0x3e	; 62
    5988:	08 96       	adiw	r24, 0x08	; 8
    598a:	0f b6       	in	r0, 0x3f	; 63
    598c:	f8 94       	cli
    598e:	9e bf       	out	0x3e, r25	; 62
    5990:	0f be       	out	0x3f, r0	; 63
    5992:	8d bf       	out	0x3d, r24	; 61
		
		Wifi_Send_Data2(Temperature_buffer);
    5994:	ce 01       	movw	r24, r28
    5996:	01 96       	adiw	r24, 0x01	; 1
    5998:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <Wifi_Send_Data2>
		Temperature_Request_Flag = 0;
    599c:	10 92 7e 06 	sts	0x067E, r1
	}
	
}
    59a0:	64 96       	adiw	r28, 0x14	; 20
    59a2:	0f b6       	in	r0, 0x3f	; 63
    59a4:	f8 94       	cli
    59a6:	de bf       	out	0x3e, r29	; 62
    59a8:	0f be       	out	0x3f, r0	; 63
    59aa:	cd bf       	out	0x3d, r28	; 61
    59ac:	cf 91       	pop	r28
    59ae:	df 91       	pop	r29
    59b0:	08 95       	ret

000059b2 <Show_Menu_Wifi>:


/* Show Menu to user */
void Show_Menu_Wifi()
{
    59b2:	df 93       	push	r29
    59b4:	cf 93       	push	r28
    59b6:	cd b7       	in	r28, 0x3d	; 61
    59b8:	de b7       	in	r29, 0x3e	; 62
	
Wifi_Send_Data2("\nWelcom Ahmed:\n a: Motor OFF,\n b: Motor High speed,\n c: Motor Low Speed,\n d: Motor Auto,\n e: LED OFF,\n f: LED Auto,\n g: Show Temperature\n, z: Logout");
    59ba:	83 e3       	ldi	r24, 0x33	; 51
    59bc:	91 e0       	ldi	r25, 0x01	; 1
    59be:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <Wifi_Send_Data2>
	
    59c2:	cf 91       	pop	r28
    59c4:	df 91       	pop	r29
    59c6:	08 95       	ret

000059c8 <Adjust_FanSpeed>:
  Reentrance       : Reentrant
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Adjust_FanSpeed(){
    59c8:	df 93       	push	r29
    59ca:	cf 93       	push	r28
    59cc:	00 d0       	rcall	.+0      	; 0x59ce <Adjust_FanSpeed+0x6>
    59ce:	cd b7       	in	r28, 0x3d	; 61
    59d0:	de b7       	in	r29, 0x3e	; 62

	/* Check That user input changed from privious  command or not  */
	if (Motor_State_Flag_Privious_Reading != Motor_State_Flag){
    59d2:	90 91 76 06 	lds	r25, 0x0676
    59d6:	80 91 67 06 	lds	r24, 0x0667
    59da:	98 17       	cp	r25, r24
    59dc:	09 f4       	brne	.+2      	; 0x59e0 <Adjust_FanSpeed+0x18>
    59de:	4c c0       	rjmp	.+152    	; 0x5a78 <Adjust_FanSpeed+0xb0>
		switch(Motor_State_Flag)
    59e0:	80 91 67 06 	lds	r24, 0x0667
    59e4:	28 2f       	mov	r18, r24
    59e6:	30 e0       	ldi	r19, 0x00	; 0
    59e8:	3a 83       	std	Y+2, r19	; 0x02
    59ea:	29 83       	std	Y+1, r18	; 0x01
    59ec:	89 81       	ldd	r24, Y+1	; 0x01
    59ee:	9a 81       	ldd	r25, Y+2	; 0x02
    59f0:	82 36       	cpi	r24, 0x62	; 98
    59f2:	91 05       	cpc	r25, r1
    59f4:	11 f1       	breq	.+68     	; 0x5a3a <Adjust_FanSpeed+0x72>
    59f6:	29 81       	ldd	r18, Y+1	; 0x01
    59f8:	3a 81       	ldd	r19, Y+2	; 0x02
    59fa:	23 36       	cpi	r18, 0x63	; 99
    59fc:	31 05       	cpc	r19, r1
    59fe:	34 f4       	brge	.+12     	; 0x5a0c <Adjust_FanSpeed+0x44>
    5a00:	89 81       	ldd	r24, Y+1	; 0x01
    5a02:	9a 81       	ldd	r25, Y+2	; 0x02
    5a04:	81 36       	cpi	r24, 0x61	; 97
    5a06:	91 05       	cpc	r25, r1
    5a08:	61 f0       	breq	.+24     	; 0x5a22 <Adjust_FanSpeed+0x5a>
    5a0a:	36 c0       	rjmp	.+108    	; 0x5a78 <Adjust_FanSpeed+0xb0>
    5a0c:	29 81       	ldd	r18, Y+1	; 0x01
    5a0e:	3a 81       	ldd	r19, Y+2	; 0x02
    5a10:	23 36       	cpi	r18, 0x63	; 99
    5a12:	31 05       	cpc	r19, r1
    5a14:	f1 f0       	breq	.+60     	; 0x5a52 <Adjust_FanSpeed+0x8a>
    5a16:	89 81       	ldd	r24, Y+1	; 0x01
    5a18:	9a 81       	ldd	r25, Y+2	; 0x02
    5a1a:	84 36       	cpi	r24, 0x64	; 100
    5a1c:	91 05       	cpc	r25, r1
    5a1e:	29 f1       	breq	.+74     	; 0x5a6a <Adjust_FanSpeed+0xa2>
    5a20:	2b c0       	rjmp	.+86     	; 0x5a78 <Adjust_FanSpeed+0xb0>
		{
			case Motor_State_OFF: MOTOR_ON(MOTOR_CW , 0);
    5a22:	81 e0       	ldi	r24, 0x01	; 1
    5a24:	60 e0       	ldi	r22, 0x00	; 0
    5a26:	0e 94 23 2c 	call	0x5846	; 0x5846 <MOTOR_ON>
								  Motor_State_Flag_Privious_Reading = Motor_State_OFF;
    5a2a:	81 e6       	ldi	r24, 0x61	; 97
    5a2c:	80 93 76 06 	sts	0x0676, r24
								  Wifi_Send_Data2(" Fan Turned OFF ");
    5a30:	88 ec       	ldi	r24, 0xC8	; 200
    5a32:	91 e0       	ldi	r25, 0x01	; 1
    5a34:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <Wifi_Send_Data2>
    5a38:	1f c0       	rjmp	.+62     	; 0x5a78 <Adjust_FanSpeed+0xb0>
								  break;

			case Motor_State_HighSpeed: MOTOR_ON(MOTOR_CW , 80);
    5a3a:	81 e0       	ldi	r24, 0x01	; 1
    5a3c:	60 e5       	ldi	r22, 0x50	; 80
    5a3e:	0e 94 23 2c 	call	0x5846	; 0x5846 <MOTOR_ON>
										Motor_State_Flag_Privious_Reading = Motor_State_HighSpeed;
    5a42:	82 e6       	ldi	r24, 0x62	; 98
    5a44:	80 93 76 06 	sts	0x0676, r24
										Wifi_Send_Data2(" Fan Turned ON at 80% Speed ");
    5a48:	89 ed       	ldi	r24, 0xD9	; 217
    5a4a:	91 e0       	ldi	r25, 0x01	; 1
    5a4c:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <Wifi_Send_Data2>
    5a50:	13 c0       	rjmp	.+38     	; 0x5a78 <Adjust_FanSpeed+0xb0>
										break;

			case Motor_State_LowSpeed:  MOTOR_ON(MOTOR_CW , 50);
    5a52:	81 e0       	ldi	r24, 0x01	; 1
    5a54:	62 e3       	ldi	r22, 0x32	; 50
    5a56:	0e 94 23 2c 	call	0x5846	; 0x5846 <MOTOR_ON>
										Motor_State_Flag_Privious_Reading = Motor_State_LowSpeed;
    5a5a:	83 e6       	ldi	r24, 0x63	; 99
    5a5c:	80 93 76 06 	sts	0x0676, r24
										Wifi_Send_Data2(" Fan Turned ON at 50% Speed ");
    5a60:	86 ef       	ldi	r24, 0xF6	; 246
    5a62:	91 e0       	ldi	r25, 0x01	; 1
    5a64:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <Wifi_Send_Data2>
    5a68:	07 c0       	rjmp	.+14     	; 0x5a78 <Adjust_FanSpeed+0xb0>
										break;
			
			case Motor_State_Auto: Wifi_Send_Data2(" Auto Fan");
    5a6a:	83 e1       	ldi	r24, 0x13	; 19
    5a6c:	92 e0       	ldi	r25, 0x02	; 2
    5a6e:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <Wifi_Send_Data2>
									Motor_State_Flag_Privious_Reading = Motor_State_Auto;
    5a72:	84 e6       	ldi	r24, 0x64	; 100
    5a74:	80 93 76 06 	sts	0x0676, r24
		}
	}
	


}
    5a78:	0f 90       	pop	r0
    5a7a:	0f 90       	pop	r0
    5a7c:	cf 91       	pop	r28
    5a7e:	df 91       	pop	r29
    5a80:	08 95       	ret

00005a82 <Adjust_LEDIntensety>:

void Adjust_LEDIntensety(){
    5a82:	df 93       	push	r29
    5a84:	cf 93       	push	r28
    5a86:	cd b7       	in	r28, 0x3d	; 61
    5a88:	de b7       	in	r29, 0x3e	; 62
	/* Check That user input changed from previous  command or not  */
	if ((LED_State_Flag == LED_State_OFF) && (LED_State_Flag != LED_previous_State_Flag))
    5a8a:	80 91 7d 06 	lds	r24, 0x067D
    5a8e:	85 36       	cpi	r24, 0x65	; 101
    5a90:	81 f4       	brne	.+32     	; 0x5ab2 <Adjust_LEDIntensety+0x30>
    5a92:	90 91 7d 06 	lds	r25, 0x067D
    5a96:	80 91 65 06 	lds	r24, 0x0665
    5a9a:	98 17       	cp	r25, r24
    5a9c:	51 f0       	breq	.+20     	; 0x5ab2 <Adjust_LEDIntensety+0x30>
	{
			M_TIMER1_void_Stop();
    5a9e:	0e 94 bb 09 	call	0x1376	; 0x1376 <M_TIMER1_void_Stop>
			Wifi_Send_Data2(" LED OFF ");
    5aa2:	8d e1       	ldi	r24, 0x1D	; 29
    5aa4:	92 e0       	ldi	r25, 0x02	; 2
    5aa6:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <Wifi_Send_Data2>
			LED_previous_State_Flag = LED_State_OFF;
    5aaa:	85 e6       	ldi	r24, 0x65	; 101
    5aac:	80 93 65 06 	sts	0x0665, r24
    5ab0:	11 c0       	rjmp	.+34     	; 0x5ad4 <Adjust_LEDIntensety+0x52>
	}
	
	 else if(LED_State_Flag == LED_State_Auto && (LED_State_Flag != LED_previous_State_Flag))
    5ab2:	80 91 7d 06 	lds	r24, 0x067D
    5ab6:	86 36       	cpi	r24, 0x66	; 102
    5ab8:	69 f4       	brne	.+26     	; 0x5ad4 <Adjust_LEDIntensety+0x52>
    5aba:	90 91 7d 06 	lds	r25, 0x067D
    5abe:	80 91 65 06 	lds	r24, 0x0665
    5ac2:	98 17       	cp	r25, r24
    5ac4:	39 f0       	breq	.+14     	; 0x5ad4 <Adjust_LEDIntensety+0x52>
	 {
		  Wifi_Send_Data2(" LED Auto");
    5ac6:	87 e2       	ldi	r24, 0x27	; 39
    5ac8:	92 e0       	ldi	r25, 0x02	; 2
    5aca:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <Wifi_Send_Data2>
			LED_previous_State_Flag = LED_State_Auto;
    5ace:	86 e6       	ldi	r24, 0x66	; 102
    5ad0:	80 93 65 06 	sts	0x0665, r24

	 }
}
    5ad4:	cf 91       	pop	r28
    5ad6:	df 91       	pop	r29
    5ad8:	08 95       	ret

00005ada <Led_Control>:



void Led_Control()
{
    5ada:	df 93       	push	r29
    5adc:	cf 93       	push	r28
    5ade:	cd b7       	in	r28, 0x3d	; 61
    5ae0:	de b7       	in	r29, 0x3e	; 62
	if(LED_State_Flag == LED_State_Auto )
    5ae2:	80 91 7d 06 	lds	r24, 0x067D
    5ae6:	86 36       	cpi	r24, 0x66	; 102
    5ae8:	09 f0       	breq	.+2      	; 0x5aec <Led_Control+0x12>
    5aea:	40 c0       	rjmp	.+128    	; 0x5b6c <Led_Control+0x92>
	//{
	//	Intensity_percent = 100;
	//}
	//u8 LED_PWM =  100- Intensity_percent;
		
		if(current_intens>=0 && current_intens<15){
    5aec:	80 91 77 06 	lds	r24, 0x0677
    5af0:	90 91 78 06 	lds	r25, 0x0678
    5af4:	a0 91 79 06 	lds	r26, 0x0679
    5af8:	b0 91 7a 06 	lds	r27, 0x067A
    5afc:	8f 30       	cpi	r24, 0x0F	; 15
    5afe:	91 05       	cpc	r25, r1
    5b00:	a1 05       	cpc	r26, r1
    5b02:	b1 05       	cpc	r27, r1
    5b04:	28 f4       	brcc	.+10     	; 0x5b10 <Led_Control+0x36>
			H_LED_void_set_Intensity(100);
    5b06:	84 e6       	ldi	r24, 0x64	; 100
    5b08:	90 e0       	ldi	r25, 0x00	; 0
    5b0a:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <H_LED_void_set_Intensity>
    5b0e:	2e c0       	rjmp	.+92     	; 0x5b6c <Led_Control+0x92>
		}
		else if(current_intens>=15 && current_intens<25){
    5b10:	80 91 77 06 	lds	r24, 0x0677
    5b14:	90 91 78 06 	lds	r25, 0x0678
    5b18:	a0 91 79 06 	lds	r26, 0x0679
    5b1c:	b0 91 7a 06 	lds	r27, 0x067A
    5b20:	8f 30       	cpi	r24, 0x0F	; 15
    5b22:	91 05       	cpc	r25, r1
    5b24:	a1 05       	cpc	r26, r1
    5b26:	b1 05       	cpc	r27, r1
    5b28:	90 f0       	brcs	.+36     	; 0x5b4e <Led_Control+0x74>
    5b2a:	80 91 77 06 	lds	r24, 0x0677
    5b2e:	90 91 78 06 	lds	r25, 0x0678
    5b32:	a0 91 79 06 	lds	r26, 0x0679
    5b36:	b0 91 7a 06 	lds	r27, 0x067A
    5b3a:	89 31       	cpi	r24, 0x19	; 25
    5b3c:	91 05       	cpc	r25, r1
    5b3e:	a1 05       	cpc	r26, r1
    5b40:	b1 05       	cpc	r27, r1
    5b42:	28 f4       	brcc	.+10     	; 0x5b4e <Led_Control+0x74>
			H_LED_void_set_Intensity(40);
    5b44:	88 e2       	ldi	r24, 0x28	; 40
    5b46:	90 e0       	ldi	r25, 0x00	; 0
    5b48:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <H_LED_void_set_Intensity>
    5b4c:	0f c0       	rjmp	.+30     	; 0x5b6c <Led_Control+0x92>
		}
		else if(current_intens>=25){
    5b4e:	80 91 77 06 	lds	r24, 0x0677
    5b52:	90 91 78 06 	lds	r25, 0x0678
    5b56:	a0 91 79 06 	lds	r26, 0x0679
    5b5a:	b0 91 7a 06 	lds	r27, 0x067A
    5b5e:	89 31       	cpi	r24, 0x19	; 25
    5b60:	91 05       	cpc	r25, r1
    5b62:	a1 05       	cpc	r26, r1
    5b64:	b1 05       	cpc	r27, r1
    5b66:	10 f0       	brcs	.+4      	; 0x5b6c <Led_Control+0x92>
			M_TIMER1_void_Stop();
    5b68:	0e 94 bb 09 	call	0x1376	; 0x1376 <M_TIMER1_void_Stop>
		else{

			}
			
	}
}
    5b6c:	cf 91       	pop	r28
    5b6e:	df 91       	pop	r29
    5b70:	08 95       	ret

00005b72 <Motor_Control>:


void Motor_Control()
{
    5b72:	df 93       	push	r29
    5b74:	cf 93       	push	r28
    5b76:	cd b7       	in	r28, 0x3d	; 61
    5b78:	de b7       	in	r29, 0x3e	; 62
		 if( Motor_State_Flag == Motor_State_Auto){
    5b7a:	80 91 67 06 	lds	r24, 0x0667
    5b7e:	84 36       	cpi	r24, 0x64	; 100
    5b80:	09 f0       	breq	.+2      	; 0x5b84 <Motor_Control+0x12>
    5b82:	4d c0       	rjmp	.+154    	; 0x5c1e <Motor_Control+0xac>

				 if(current_temp>=0 && current_temp<10){
    5b84:	80 91 6d 06 	lds	r24, 0x066D
    5b88:	90 91 6e 06 	lds	r25, 0x066E
    5b8c:	a0 91 6f 06 	lds	r26, 0x066F
    5b90:	b0 91 70 06 	lds	r27, 0x0670
    5b94:	8a 30       	cpi	r24, 0x0A	; 10
    5b96:	91 05       	cpc	r25, r1
    5b98:	a1 05       	cpc	r26, r1
    5b9a:	b1 05       	cpc	r27, r1
    5b9c:	18 f4       	brcc	.+6      	; 0x5ba4 <Motor_Control+0x32>
					 MOTOR_OFF();
    5b9e:	0e 94 3f 2c 	call	0x587e	; 0x587e <MOTOR_OFF>
    5ba2:	3d c0       	rjmp	.+122    	; 0x5c1e <Motor_Control+0xac>
					 //Wifi_Send_Data2(" Auto Fan: Temp < 10, Fan off ");
				 }
				 else if(current_temp>=10 && current_temp<27){
    5ba4:	80 91 6d 06 	lds	r24, 0x066D
    5ba8:	90 91 6e 06 	lds	r25, 0x066E
    5bac:	a0 91 6f 06 	lds	r26, 0x066F
    5bb0:	b0 91 70 06 	lds	r27, 0x0670
    5bb4:	8a 30       	cpi	r24, 0x0A	; 10
    5bb6:	91 05       	cpc	r25, r1
    5bb8:	a1 05       	cpc	r26, r1
    5bba:	b1 05       	cpc	r27, r1
    5bbc:	90 f0       	brcs	.+36     	; 0x5be2 <Motor_Control+0x70>
    5bbe:	80 91 6d 06 	lds	r24, 0x066D
    5bc2:	90 91 6e 06 	lds	r25, 0x066E
    5bc6:	a0 91 6f 06 	lds	r26, 0x066F
    5bca:	b0 91 70 06 	lds	r27, 0x0670
    5bce:	8b 31       	cpi	r24, 0x1B	; 27
    5bd0:	91 05       	cpc	r25, r1
    5bd2:	a1 05       	cpc	r26, r1
    5bd4:	b1 05       	cpc	r27, r1
    5bd6:	28 f4       	brcc	.+10     	; 0x5be2 <Motor_Control+0x70>
					 MOTOR_ON(MOTOR_CW , 50);
    5bd8:	81 e0       	ldi	r24, 0x01	; 1
    5bda:	62 e3       	ldi	r22, 0x32	; 50
    5bdc:	0e 94 23 2c 	call	0x5846	; 0x5846 <MOTOR_ON>
    5be0:	1e c0       	rjmp	.+60     	; 0x5c1e <Motor_Control+0xac>
					 //Wifi_Send_Data2(" Auto Fan: Temp < 27 , Fan Low speed ");
				 }
				 else if(current_temp>=27 && current_temp<=45){
    5be2:	80 91 6d 06 	lds	r24, 0x066D
    5be6:	90 91 6e 06 	lds	r25, 0x066E
    5bea:	a0 91 6f 06 	lds	r26, 0x066F
    5bee:	b0 91 70 06 	lds	r27, 0x0670
    5bf2:	8b 31       	cpi	r24, 0x1B	; 27
    5bf4:	91 05       	cpc	r25, r1
    5bf6:	a1 05       	cpc	r26, r1
    5bf8:	b1 05       	cpc	r27, r1
    5bfa:	88 f0       	brcs	.+34     	; 0x5c1e <Motor_Control+0xac>
    5bfc:	80 91 6d 06 	lds	r24, 0x066D
    5c00:	90 91 6e 06 	lds	r25, 0x066E
    5c04:	a0 91 6f 06 	lds	r26, 0x066F
    5c08:	b0 91 70 06 	lds	r27, 0x0670
    5c0c:	8e 32       	cpi	r24, 0x2E	; 46
    5c0e:	91 05       	cpc	r25, r1
    5c10:	a1 05       	cpc	r26, r1
    5c12:	b1 05       	cpc	r27, r1
    5c14:	20 f4       	brcc	.+8      	; 0x5c1e <Motor_Control+0xac>
					 MOTOR_ON(MOTOR_CW , 80);
    5c16:	81 e0       	ldi	r24, 0x01	; 1
    5c18:	60 e5       	ldi	r22, 0x50	; 80
    5c1a:	0e 94 23 2c 	call	0x5846	; 0x5846 <MOTOR_ON>
				 }

			 }

		 
}
    5c1e:	cf 91       	pop	r28
    5c20:	df 91       	pop	r29
    5c22:	08 95       	ret

00005c24 <getTempAndIntens>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/

ES_t getTempAndIntens(){
    5c24:	df 93       	push	r29
    5c26:	cf 93       	push	r28
    5c28:	0f 92       	push	r0
    5c2a:	cd b7       	in	r28, 0x3d	; 61
    5c2c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    5c2e:	19 82       	std	Y+1, r1	; 0x01
	H_LM35_enu_getTemp(&ADC1_config[1], &current_temp);
    5c30:	81 ed       	ldi	r24, 0xD1	; 209
    5c32:	93 e0       	ldi	r25, 0x03	; 3
    5c34:	2d e6       	ldi	r18, 0x6D	; 109
    5c36:	36 e0       	ldi	r19, 0x06	; 6
    5c38:	b9 01       	movw	r22, r18
    5c3a:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <H_LM35_enu_getTemp>
	H_LDR_enu_getIntensity(ADC1_config, &current_intens);
    5c3e:	8a ec       	ldi	r24, 0xCA	; 202
    5c40:	93 e0       	ldi	r25, 0x03	; 3
    5c42:	27 e7       	ldi	r18, 0x77	; 119
    5c44:	36 e0       	ldi	r19, 0x06	; 6
    5c46:	b9 01       	movw	r22, r18
    5c48:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <H_LDR_enu_getIntensity>
	/*check if temperature changed to another range*/
	if(current_temp>=0 && current_temp<=150){
    5c4c:	80 91 6d 06 	lds	r24, 0x066D
    5c50:	90 91 6e 06 	lds	r25, 0x066E
    5c54:	a0 91 6f 06 	lds	r26, 0x066F
    5c58:	b0 91 70 06 	lds	r27, 0x0670
    5c5c:	87 39       	cpi	r24, 0x97	; 151
    5c5e:	91 05       	cpc	r25, r1
    5c60:	a1 05       	cpc	r26, r1
    5c62:	b1 05       	cpc	r27, r1
    5c64:	08 f0       	brcs	.+2      	; 0x5c68 <getTempAndIntens+0x44>
    5c66:	76 c0       	rjmp	.+236    	; 0x5d54 <getTempAndIntens+0x130>
		if(
    5c68:	80 91 6d 06 	lds	r24, 0x066D
    5c6c:	90 91 6e 06 	lds	r25, 0x066E
    5c70:	a0 91 6f 06 	lds	r26, 0x066F
    5c74:	b0 91 70 06 	lds	r27, 0x0670
    5c78:	8a 30       	cpi	r24, 0x0A	; 10
    5c7a:	91 05       	cpc	r25, r1
    5c7c:	a1 05       	cpc	r26, r1
    5c7e:	b1 05       	cpc	r27, r1
    5c80:	d0 f0       	brcs	.+52     	; 0x5cb6 <getTempAndIntens+0x92>
    5c82:	80 91 6d 06 	lds	r24, 0x066D
    5c86:	90 91 6e 06 	lds	r25, 0x066E
    5c8a:	a0 91 6f 06 	lds	r26, 0x066F
    5c8e:	b0 91 70 06 	lds	r27, 0x0670
    5c92:	8c 31       	cpi	r24, 0x1C	; 28
    5c94:	91 05       	cpc	r25, r1
    5c96:	a1 05       	cpc	r26, r1
    5c98:	b1 05       	cpc	r27, r1
    5c9a:	68 f4       	brcc	.+26     	; 0x5cb6 <getTempAndIntens+0x92>
    5c9c:	80 91 68 06 	lds	r24, 0x0668
    5ca0:	90 91 69 06 	lds	r25, 0x0669
    5ca4:	a0 91 6a 06 	lds	r26, 0x066A
    5ca8:	b0 91 6b 06 	lds	r27, 0x066B
    5cac:	8c 31       	cpi	r24, 0x1C	; 28
    5cae:	91 05       	cpc	r25, r1
    5cb0:	a1 05       	cpc	r26, r1
    5cb2:	b1 05       	cpc	r27, r1
    5cb4:	38 f5       	brcc	.+78     	; 0x5d04 <getTempAndIntens+0xe0>
    5cb6:	80 91 68 06 	lds	r24, 0x0668
    5cba:	90 91 69 06 	lds	r25, 0x0669
    5cbe:	a0 91 6a 06 	lds	r26, 0x066A
    5cc2:	b0 91 6b 06 	lds	r27, 0x066B
    5cc6:	8a 30       	cpi	r24, 0x0A	; 10
    5cc8:	91 05       	cpc	r25, r1
    5cca:	a1 05       	cpc	r26, r1
    5ccc:	b1 05       	cpc	r27, r1
    5cce:	78 f1       	brcs	.+94     	; 0x5d2e <getTempAndIntens+0x10a>
    5cd0:	80 91 68 06 	lds	r24, 0x0668
    5cd4:	90 91 69 06 	lds	r25, 0x0669
    5cd8:	a0 91 6a 06 	lds	r26, 0x066A
    5cdc:	b0 91 6b 06 	lds	r27, 0x066B
    5ce0:	8c 31       	cpi	r24, 0x1C	; 28
    5ce2:	91 05       	cpc	r25, r1
    5ce4:	a1 05       	cpc	r26, r1
    5ce6:	b1 05       	cpc	r27, r1
    5ce8:	10 f5       	brcc	.+68     	; 0x5d2e <getTempAndIntens+0x10a>
    5cea:	80 91 6d 06 	lds	r24, 0x066D
    5cee:	90 91 6e 06 	lds	r25, 0x066E
    5cf2:	a0 91 6f 06 	lds	r26, 0x066F
    5cf6:	b0 91 70 06 	lds	r27, 0x0670
    5cfa:	8c 31       	cpi	r24, 0x1C	; 28
    5cfc:	91 05       	cpc	r25, r1
    5cfe:	a1 05       	cpc	r26, r1
    5d00:	b1 05       	cpc	r27, r1
    5d02:	a8 f0       	brcs	.+42     	; 0x5d2e <getTempAndIntens+0x10a>
			((current_temp >=10 && current_temp <=27)&&((previous_temp >27)))
			|| ((previous_temp >=10 && previous_temp <=27)&&((current_temp >27)))
			){
			Temp_Changed_Flag =1;
    5d04:	81 e0       	ldi	r24, 0x01	; 1
    5d06:	80 93 7b 06 	sts	0x067B, r24
			previous_temp = current_temp;
    5d0a:	80 91 6d 06 	lds	r24, 0x066D
    5d0e:	90 91 6e 06 	lds	r25, 0x066E
    5d12:	a0 91 6f 06 	lds	r26, 0x066F
    5d16:	b0 91 70 06 	lds	r27, 0x0670
    5d1a:	80 93 68 06 	sts	0x0668, r24
    5d1e:	90 93 69 06 	sts	0x0669, r25
    5d22:	a0 93 6a 06 	sts	0x066A, r26
    5d26:	b0 93 6b 06 	sts	0x066B, r27
			Local_enuErrorState = ES_OK;
    5d2a:	81 e0       	ldi	r24, 0x01	; 1
    5d2c:	89 83       	std	Y+1, r24	; 0x01
		}
		else {
		}
		previous_temp = current_temp;
    5d2e:	80 91 6d 06 	lds	r24, 0x066D
    5d32:	90 91 6e 06 	lds	r25, 0x066E
    5d36:	a0 91 6f 06 	lds	r26, 0x066F
    5d3a:	b0 91 70 06 	lds	r27, 0x0670
    5d3e:	80 93 68 06 	sts	0x0668, r24
    5d42:	90 93 69 06 	sts	0x0669, r25
    5d46:	a0 93 6a 06 	sts	0x066A, r26
    5d4a:	b0 93 6b 06 	sts	0x066B, r27
		Local_enuErrorState = ES_OK;
    5d4e:	81 e0       	ldi	r24, 0x01	; 1
    5d50:	89 83       	std	Y+1, r24	; 0x01
    5d52:	02 c0       	rjmp	.+4      	; 0x5d58 <getTempAndIntens+0x134>
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    5d54:	82 e0       	ldi	r24, 0x02	; 2
    5d56:	89 83       	std	Y+1, r24	; 0x01
	}

	/*check if intensity changed to another range*/
	if (current_intens >=0 && current_intens <=2038){
    5d58:	80 91 77 06 	lds	r24, 0x0677
    5d5c:	90 91 78 06 	lds	r25, 0x0678
    5d60:	a0 91 79 06 	lds	r26, 0x0679
    5d64:	b0 91 7a 06 	lds	r27, 0x067A
    5d68:	87 3f       	cpi	r24, 0xF7	; 247
    5d6a:	27 e0       	ldi	r18, 0x07	; 7
    5d6c:	92 07       	cpc	r25, r18
    5d6e:	20 e0       	ldi	r18, 0x00	; 0
    5d70:	a2 07       	cpc	r26, r18
    5d72:	20 e0       	ldi	r18, 0x00	; 0
    5d74:	b2 07       	cpc	r27, r18
    5d76:	08 f0       	brcs	.+2      	; 0x5d7a <getTempAndIntens+0x156>
    5d78:	77 c0       	rjmp	.+238    	; 0x5e68 <getTempAndIntens+0x244>
		if(
    5d7a:	80 91 77 06 	lds	r24, 0x0677
    5d7e:	90 91 78 06 	lds	r25, 0x0678
    5d82:	a0 91 79 06 	lds	r26, 0x0679
    5d86:	b0 91 7a 06 	lds	r27, 0x067A
    5d8a:	80 31       	cpi	r24, 0x10	; 16
    5d8c:	91 05       	cpc	r25, r1
    5d8e:	a1 05       	cpc	r26, r1
    5d90:	b1 05       	cpc	r27, r1
    5d92:	d0 f4       	brcc	.+52     	; 0x5dc8 <getTempAndIntens+0x1a4>
    5d94:	80 91 71 06 	lds	r24, 0x0671
    5d98:	90 91 72 06 	lds	r25, 0x0672
    5d9c:	a0 91 73 06 	lds	r26, 0x0673
    5da0:	b0 91 74 06 	lds	r27, 0x0674
    5da4:	80 31       	cpi	r24, 0x10	; 16
    5da6:	91 05       	cpc	r25, r1
    5da8:	a1 05       	cpc	r26, r1
    5daa:	b1 05       	cpc	r27, r1
    5dac:	68 f0       	brcs	.+26     	; 0x5dc8 <getTempAndIntens+0x1a4>
    5dae:	80 91 71 06 	lds	r24, 0x0671
    5db2:	90 91 72 06 	lds	r25, 0x0672
    5db6:	a0 91 73 06 	lds	r26, 0x0673
    5dba:	b0 91 74 06 	lds	r27, 0x0674
    5dbe:	8a 31       	cpi	r24, 0x1A	; 26
    5dc0:	91 05       	cpc	r25, r1
    5dc2:	a1 05       	cpc	r26, r1
    5dc4:	b1 05       	cpc	r27, r1
    5dc6:	38 f1       	brcs	.+78     	; 0x5e16 <getTempAndIntens+0x1f2>
    5dc8:	80 91 71 06 	lds	r24, 0x0671
    5dcc:	90 91 72 06 	lds	r25, 0x0672
    5dd0:	a0 91 73 06 	lds	r26, 0x0673
    5dd4:	b0 91 74 06 	lds	r27, 0x0674
    5dd8:	80 31       	cpi	r24, 0x10	; 16
    5dda:	91 05       	cpc	r25, r1
    5ddc:	a1 05       	cpc	r26, r1
    5dde:	b1 05       	cpc	r27, r1
    5de0:	80 f5       	brcc	.+96     	; 0x5e42 <getTempAndIntens+0x21e>
    5de2:	80 91 77 06 	lds	r24, 0x0677
    5de6:	90 91 78 06 	lds	r25, 0x0678
    5dea:	a0 91 79 06 	lds	r26, 0x0679
    5dee:	b0 91 7a 06 	lds	r27, 0x067A
    5df2:	80 31       	cpi	r24, 0x10	; 16
    5df4:	91 05       	cpc	r25, r1
    5df6:	a1 05       	cpc	r26, r1
    5df8:	b1 05       	cpc	r27, r1
    5dfa:	18 f1       	brcs	.+70     	; 0x5e42 <getTempAndIntens+0x21e>
    5dfc:	80 91 77 06 	lds	r24, 0x0677
    5e00:	90 91 78 06 	lds	r25, 0x0678
    5e04:	a0 91 79 06 	lds	r26, 0x0679
    5e08:	b0 91 7a 06 	lds	r27, 0x067A
    5e0c:	8a 31       	cpi	r24, 0x1A	; 26
    5e0e:	91 05       	cpc	r25, r1
    5e10:	a1 05       	cpc	r26, r1
    5e12:	b1 05       	cpc	r27, r1
    5e14:	b0 f4       	brcc	.+44     	; 0x5e42 <getTempAndIntens+0x21e>
		((current_intens >=0 && current_intens <=15)&&((previous_intens >15&& previous_intens <=25)))
		|| ((previous_intens >=0&& previous_intens <=15)&&((current_intens >15 && current_intens <=25)))
		){
			Intens_Changed_Flag = 1;
    5e16:	81 e0       	ldi	r24, 0x01	; 1
    5e18:	80 93 7c 06 	sts	0x067C, r24
			previous_intens = current_intens;
    5e1c:	80 91 77 06 	lds	r24, 0x0677
    5e20:	90 91 78 06 	lds	r25, 0x0678
    5e24:	a0 91 79 06 	lds	r26, 0x0679
    5e28:	b0 91 7a 06 	lds	r27, 0x067A
    5e2c:	80 93 71 06 	sts	0x0671, r24
    5e30:	90 93 72 06 	sts	0x0672, r25
    5e34:	a0 93 73 06 	sts	0x0673, r26
    5e38:	b0 93 74 06 	sts	0x0674, r27
			Local_enuErrorState = ES_OK;
    5e3c:	81 e0       	ldi	r24, 0x01	; 1
    5e3e:	89 83       	std	Y+1, r24	; 0x01
    5e40:	15 c0       	rjmp	.+42     	; 0x5e6c <getTempAndIntens+0x248>
		}
		else {
			previous_intens = current_intens;
    5e42:	80 91 77 06 	lds	r24, 0x0677
    5e46:	90 91 78 06 	lds	r25, 0x0678
    5e4a:	a0 91 79 06 	lds	r26, 0x0679
    5e4e:	b0 91 7a 06 	lds	r27, 0x067A
    5e52:	80 93 71 06 	sts	0x0671, r24
    5e56:	90 93 72 06 	sts	0x0672, r25
    5e5a:	a0 93 73 06 	sts	0x0673, r26
    5e5e:	b0 93 74 06 	sts	0x0674, r27
			Local_enuErrorState = ES_OK;
    5e62:	81 e0       	ldi	r24, 0x01	; 1
    5e64:	89 83       	std	Y+1, r24	; 0x01
    5e66:	02 c0       	rjmp	.+4      	; 0x5e6c <getTempAndIntens+0x248>
		}
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    5e68:	82 e0       	ldi	r24, 0x02	; 2
    5e6a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	H_LCD_void_gotoXY(1, 0);
    5e6c:	81 e0       	ldi	r24, 0x01	; 1
    5e6e:	60 e0       	ldi	r22, 0x00	; 0
    5e70:	0e 94 af 2a 	call	0x555e	; 0x555e <H_LCD_void_gotoXY>
	H_LCD_void_sendString("TEMP:");
    5e74:	81 e3       	ldi	r24, 0x31	; 49
    5e76:	92 e0       	ldi	r25, 0x02	; 2
    5e78:	0e 94 2f 2a 	call	0x545e	; 0x545e <H_LCD_void_sendString>
	H_LCD_void_sendIntNum(current_temp);
    5e7c:	80 91 6d 06 	lds	r24, 0x066D
    5e80:	90 91 6e 06 	lds	r25, 0x066E
    5e84:	a0 91 6f 06 	lds	r26, 0x066F
    5e88:	b0 91 70 06 	lds	r27, 0x0670
    5e8c:	bc 01       	movw	r22, r24
    5e8e:	cd 01       	movw	r24, r26
    5e90:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <H_LCD_void_sendIntNum>
	H_LCD_void_gotoXY(2, 0);
    5e94:	82 e0       	ldi	r24, 0x02	; 2
    5e96:	60 e0       	ldi	r22, 0x00	; 0
    5e98:	0e 94 af 2a 	call	0x555e	; 0x555e <H_LCD_void_gotoXY>
	H_LCD_void_sendString("INTENS:");
    5e9c:	87 e3       	ldi	r24, 0x37	; 55
    5e9e:	92 e0       	ldi	r25, 0x02	; 2
    5ea0:	0e 94 2f 2a 	call	0x545e	; 0x545e <H_LCD_void_sendString>
	/*clear unused digits*/
	if(current_intens<1){
    5ea4:	80 91 77 06 	lds	r24, 0x0677
    5ea8:	90 91 78 06 	lds	r25, 0x0678
    5eac:	a0 91 79 06 	lds	r26, 0x0679
    5eb0:	b0 91 7a 06 	lds	r27, 0x067A
    5eb4:	00 97       	sbiw	r24, 0x00	; 0
    5eb6:	a1 05       	cpc	r26, r1
    5eb8:	b1 05       	cpc	r27, r1
    5eba:	41 f4       	brne	.+16     	; 0x5ecc <getTempAndIntens+0x2a8>
		H_LCD_void_gotoXY(2, 7);
    5ebc:	82 e0       	ldi	r24, 0x02	; 2
    5ebe:	67 e0       	ldi	r22, 0x07	; 7
    5ec0:	0e 94 af 2a 	call	0x555e	; 0x555e <H_LCD_void_gotoXY>
		H_LCD_void_sendData('0');
    5ec4:	80 e3       	ldi	r24, 0x30	; 48
    5ec6:	0e 94 1e 2a 	call	0x543c	; 0x543c <H_LCD_void_sendData>
    5eca:	67 c0       	rjmp	.+206    	; 0x5f9a <getTempAndIntens+0x376>
	}
	else if(current_intens>=1&&current_intens<10){
    5ecc:	80 91 77 06 	lds	r24, 0x0677
    5ed0:	90 91 78 06 	lds	r25, 0x0678
    5ed4:	a0 91 79 06 	lds	r26, 0x0679
    5ed8:	b0 91 7a 06 	lds	r27, 0x067A
    5edc:	00 97       	sbiw	r24, 0x00	; 0
    5ede:	a1 05       	cpc	r26, r1
    5ee0:	b1 05       	cpc	r27, r1
    5ee2:	a9 f0       	breq	.+42     	; 0x5f0e <getTempAndIntens+0x2ea>
    5ee4:	80 91 77 06 	lds	r24, 0x0677
    5ee8:	90 91 78 06 	lds	r25, 0x0678
    5eec:	a0 91 79 06 	lds	r26, 0x0679
    5ef0:	b0 91 7a 06 	lds	r27, 0x067A
    5ef4:	8a 30       	cpi	r24, 0x0A	; 10
    5ef6:	91 05       	cpc	r25, r1
    5ef8:	a1 05       	cpc	r26, r1
    5efa:	b1 05       	cpc	r27, r1
    5efc:	40 f4       	brcc	.+16     	; 0x5f0e <getTempAndIntens+0x2ea>
		H_LCD_void_gotoXY(2, 8);
    5efe:	82 e0       	ldi	r24, 0x02	; 2
    5f00:	68 e0       	ldi	r22, 0x08	; 8
    5f02:	0e 94 af 2a 	call	0x555e	; 0x555e <H_LCD_void_gotoXY>
		H_LCD_void_sendData(' ');
    5f06:	80 e2       	ldi	r24, 0x20	; 32
    5f08:	0e 94 1e 2a 	call	0x543c	; 0x543c <H_LCD_void_sendData>
    5f0c:	46 c0       	rjmp	.+140    	; 0x5f9a <getTempAndIntens+0x376>
	}
	else if(current_intens>= 10&&current_intens<100)
    5f0e:	80 91 77 06 	lds	r24, 0x0677
    5f12:	90 91 78 06 	lds	r25, 0x0678
    5f16:	a0 91 79 06 	lds	r26, 0x0679
    5f1a:	b0 91 7a 06 	lds	r27, 0x067A
    5f1e:	8a 30       	cpi	r24, 0x0A	; 10
    5f20:	91 05       	cpc	r25, r1
    5f22:	a1 05       	cpc	r26, r1
    5f24:	b1 05       	cpc	r27, r1
    5f26:	a8 f0       	brcs	.+42     	; 0x5f52 <getTempAndIntens+0x32e>
    5f28:	80 91 77 06 	lds	r24, 0x0677
    5f2c:	90 91 78 06 	lds	r25, 0x0678
    5f30:	a0 91 79 06 	lds	r26, 0x0679
    5f34:	b0 91 7a 06 	lds	r27, 0x067A
    5f38:	84 36       	cpi	r24, 0x64	; 100
    5f3a:	91 05       	cpc	r25, r1
    5f3c:	a1 05       	cpc	r26, r1
    5f3e:	b1 05       	cpc	r27, r1
    5f40:	40 f4       	brcc	.+16     	; 0x5f52 <getTempAndIntens+0x32e>
	{
		H_LCD_void_gotoXY(2, 9);
    5f42:	82 e0       	ldi	r24, 0x02	; 2
    5f44:	69 e0       	ldi	r22, 0x09	; 9
    5f46:	0e 94 af 2a 	call	0x555e	; 0x555e <H_LCD_void_gotoXY>
		H_LCD_void_sendData(' ');
    5f4a:	80 e2       	ldi	r24, 0x20	; 32
    5f4c:	0e 94 1e 2a 	call	0x543c	; 0x543c <H_LCD_void_sendData>
    5f50:	24 c0       	rjmp	.+72     	; 0x5f9a <getTempAndIntens+0x376>
	}
	else if (current_intens>=100 &&current_intens<1000){
    5f52:	80 91 77 06 	lds	r24, 0x0677
    5f56:	90 91 78 06 	lds	r25, 0x0678
    5f5a:	a0 91 79 06 	lds	r26, 0x0679
    5f5e:	b0 91 7a 06 	lds	r27, 0x067A
    5f62:	84 36       	cpi	r24, 0x64	; 100
    5f64:	91 05       	cpc	r25, r1
    5f66:	a1 05       	cpc	r26, r1
    5f68:	b1 05       	cpc	r27, r1
    5f6a:	b8 f0       	brcs	.+46     	; 0x5f9a <getTempAndIntens+0x376>
    5f6c:	80 91 77 06 	lds	r24, 0x0677
    5f70:	90 91 78 06 	lds	r25, 0x0678
    5f74:	a0 91 79 06 	lds	r26, 0x0679
    5f78:	b0 91 7a 06 	lds	r27, 0x067A
    5f7c:	88 3e       	cpi	r24, 0xE8	; 232
    5f7e:	23 e0       	ldi	r18, 0x03	; 3
    5f80:	92 07       	cpc	r25, r18
    5f82:	20 e0       	ldi	r18, 0x00	; 0
    5f84:	a2 07       	cpc	r26, r18
    5f86:	20 e0       	ldi	r18, 0x00	; 0
    5f88:	b2 07       	cpc	r27, r18
    5f8a:	38 f4       	brcc	.+14     	; 0x5f9a <getTempAndIntens+0x376>
		H_LCD_void_gotoXY(2, 10);
    5f8c:	82 e0       	ldi	r24, 0x02	; 2
    5f8e:	6a e0       	ldi	r22, 0x0A	; 10
    5f90:	0e 94 af 2a 	call	0x555e	; 0x555e <H_LCD_void_gotoXY>
		H_LCD_void_sendData(' ');
    5f94:	80 e2       	ldi	r24, 0x20	; 32
    5f96:	0e 94 1e 2a 	call	0x543c	; 0x543c <H_LCD_void_sendData>
	}
	H_LCD_void_gotoXY(2, 7);	
    5f9a:	82 e0       	ldi	r24, 0x02	; 2
    5f9c:	67 e0       	ldi	r22, 0x07	; 7
    5f9e:	0e 94 af 2a 	call	0x555e	; 0x555e <H_LCD_void_gotoXY>
	H_LCD_void_sendIntNum(current_intens);
    5fa2:	80 91 77 06 	lds	r24, 0x0677
    5fa6:	90 91 78 06 	lds	r25, 0x0678
    5faa:	a0 91 79 06 	lds	r26, 0x0679
    5fae:	b0 91 7a 06 	lds	r27, 0x067A
    5fb2:	bc 01       	movw	r22, r24
    5fb4:	cd 01       	movw	r24, r26
    5fb6:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <H_LCD_void_sendIntNum>
	return Local_enuErrorState;
    5fba:	89 81       	ldd	r24, Y+1	; 0x01
}
    5fbc:	0f 90       	pop	r0
    5fbe:	cf 91       	pop	r28
    5fc0:	df 91       	pop	r29
    5fc2:	08 95       	ret

00005fc4 <main>:
  Reentrance       : Reentrant
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void main(){
    5fc4:	df 93       	push	r29
    5fc6:	cf 93       	push	r28
    5fc8:	cd b7       	in	r28, 0x3d	; 61
    5fca:	de b7       	in	r29, 0x3e	; 62
    5fcc:	6c 97       	sbiw	r28, 0x1c	; 28
    5fce:	0f b6       	in	r0, 0x3f	; 63
    5fd0:	f8 94       	cli
    5fd2:	de bf       	out	0x3e, r29	; 62
    5fd4:	0f be       	out	0x3f, r0	; 63
    5fd6:	cd bf       	out	0x3d, r28	; 61
	/* Initialize All System Moduels */
	
	//Show_Menu_Wifi();
	sytem_init();
    5fd8:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <sytem_init>
    5fdc:	80 e0       	ldi	r24, 0x00	; 0
    5fde:	90 e0       	ldi	r25, 0x00	; 0
    5fe0:	a8 e4       	ldi	r26, 0x48	; 72
    5fe2:	b3 e4       	ldi	r27, 0x43	; 67
    5fe4:	89 8f       	std	Y+25, r24	; 0x19
    5fe6:	9a 8f       	std	Y+26, r25	; 0x1a
    5fe8:	ab 8f       	std	Y+27, r26	; 0x1b
    5fea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fec:	69 8d       	ldd	r22, Y+25	; 0x19
    5fee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ff0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ff2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ff4:	20 e0       	ldi	r18, 0x00	; 0
    5ff6:	30 e0       	ldi	r19, 0x00	; 0
    5ff8:	4a e7       	ldi	r20, 0x7A	; 122
    5ffa:	55 e4       	ldi	r21, 0x45	; 69
    5ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6000:	dc 01       	movw	r26, r24
    6002:	cb 01       	movw	r24, r22
    6004:	8d 8b       	std	Y+21, r24	; 0x15
    6006:	9e 8b       	std	Y+22, r25	; 0x16
    6008:	af 8b       	std	Y+23, r26	; 0x17
    600a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    600c:	6d 89       	ldd	r22, Y+21	; 0x15
    600e:	7e 89       	ldd	r23, Y+22	; 0x16
    6010:	8f 89       	ldd	r24, Y+23	; 0x17
    6012:	98 8d       	ldd	r25, Y+24	; 0x18
    6014:	20 e0       	ldi	r18, 0x00	; 0
    6016:	30 e0       	ldi	r19, 0x00	; 0
    6018:	40 e8       	ldi	r20, 0x80	; 128
    601a:	5f e3       	ldi	r21, 0x3F	; 63
    601c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6020:	88 23       	and	r24, r24
    6022:	2c f4       	brge	.+10     	; 0x602e <main+0x6a>
		__ticks = 1;
    6024:	81 e0       	ldi	r24, 0x01	; 1
    6026:	90 e0       	ldi	r25, 0x00	; 0
    6028:	9c 8b       	std	Y+20, r25	; 0x14
    602a:	8b 8b       	std	Y+19, r24	; 0x13
    602c:	3f c0       	rjmp	.+126    	; 0x60ac <main+0xe8>
	else if (__tmp > 65535)
    602e:	6d 89       	ldd	r22, Y+21	; 0x15
    6030:	7e 89       	ldd	r23, Y+22	; 0x16
    6032:	8f 89       	ldd	r24, Y+23	; 0x17
    6034:	98 8d       	ldd	r25, Y+24	; 0x18
    6036:	20 e0       	ldi	r18, 0x00	; 0
    6038:	3f ef       	ldi	r19, 0xFF	; 255
    603a:	4f e7       	ldi	r20, 0x7F	; 127
    603c:	57 e4       	ldi	r21, 0x47	; 71
    603e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6042:	18 16       	cp	r1, r24
    6044:	4c f5       	brge	.+82     	; 0x6098 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6046:	69 8d       	ldd	r22, Y+25	; 0x19
    6048:	7a 8d       	ldd	r23, Y+26	; 0x1a
    604a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    604c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    604e:	20 e0       	ldi	r18, 0x00	; 0
    6050:	30 e0       	ldi	r19, 0x00	; 0
    6052:	40 e2       	ldi	r20, 0x20	; 32
    6054:	51 e4       	ldi	r21, 0x41	; 65
    6056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    605a:	dc 01       	movw	r26, r24
    605c:	cb 01       	movw	r24, r22
    605e:	bc 01       	movw	r22, r24
    6060:	cd 01       	movw	r24, r26
    6062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6066:	dc 01       	movw	r26, r24
    6068:	cb 01       	movw	r24, r22
    606a:	9c 8b       	std	Y+20, r25	; 0x14
    606c:	8b 8b       	std	Y+19, r24	; 0x13
    606e:	0f c0       	rjmp	.+30     	; 0x608e <main+0xca>
    6070:	80 e9       	ldi	r24, 0x90	; 144
    6072:	91 e0       	ldi	r25, 0x01	; 1
    6074:	9a 8b       	std	Y+18, r25	; 0x12
    6076:	89 8b       	std	Y+17, r24	; 0x11
    6078:	89 89       	ldd	r24, Y+17	; 0x11
    607a:	9a 89       	ldd	r25, Y+18	; 0x12
    607c:	01 97       	sbiw	r24, 0x01	; 1
    607e:	f1 f7       	brne	.-4      	; 0x607c <main+0xb8>
    6080:	9a 8b       	std	Y+18, r25	; 0x12
    6082:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6084:	8b 89       	ldd	r24, Y+19	; 0x13
    6086:	9c 89       	ldd	r25, Y+20	; 0x14
    6088:	01 97       	sbiw	r24, 0x01	; 1
    608a:	9c 8b       	std	Y+20, r25	; 0x14
    608c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    608e:	8b 89       	ldd	r24, Y+19	; 0x13
    6090:	9c 89       	ldd	r25, Y+20	; 0x14
    6092:	00 97       	sbiw	r24, 0x00	; 0
    6094:	69 f7       	brne	.-38     	; 0x6070 <main+0xac>
    6096:	14 c0       	rjmp	.+40     	; 0x60c0 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6098:	6d 89       	ldd	r22, Y+21	; 0x15
    609a:	7e 89       	ldd	r23, Y+22	; 0x16
    609c:	8f 89       	ldd	r24, Y+23	; 0x17
    609e:	98 8d       	ldd	r25, Y+24	; 0x18
    60a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60a4:	dc 01       	movw	r26, r24
    60a6:	cb 01       	movw	r24, r22
    60a8:	9c 8b       	std	Y+20, r25	; 0x14
    60aa:	8b 8b       	std	Y+19, r24	; 0x13
    60ac:	8b 89       	ldd	r24, Y+19	; 0x13
    60ae:	9c 89       	ldd	r25, Y+20	; 0x14
    60b0:	98 8b       	std	Y+16, r25	; 0x10
    60b2:	8f 87       	std	Y+15, r24	; 0x0f
    60b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    60b6:	98 89       	ldd	r25, Y+16	; 0x10
    60b8:	01 97       	sbiw	r24, 0x01	; 1
    60ba:	f1 f7       	brne	.-4      	; 0x60b8 <main+0xf4>
    60bc:	98 8b       	std	Y+16, r25	; 0x10
    60be:	8f 87       	std	Y+15, r24	; 0x0f
	//H_LCD_void_sendString("hello");
	


	/* Wait for user to login to connect wifi and start system */
	Check_Login_Sucsess();
    60c0:	0e 94 25 31 	call	0x624a	; 0x624a <Check_Login_Sucsess>
    60c4:	82 c0       	rjmp	.+260    	; 0x61ca <main+0x206>

		/* Wait for ECU1 Login Sucsess Signal to start Application */
		while(Login_Sucsess_Flag == 1)
		{
			/* Check User Input From Wifi */
			Read_Wifi();
    60c6:	0e 94 4a 2c 	call	0x5894	; 0x5894 <Read_Wifi>
			/*read LM35 and LDR values*/
			getTempAndIntens();
    60ca:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <getTempAndIntens>
			/* Update fan speed based on User input */
			Adjust_FanSpeed();
    60ce:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <Adjust_FanSpeed>
			/* Update LED_intens based on User input */
			Adjust_LEDIntensety();
    60d2:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <Adjust_LEDIntensety>
			
			Show_Temperture_Wifi();
    60d6:	0e 94 93 2c 	call	0x5926	; 0x5926 <Show_Temperture_Wifi>
			
			Led_Control();
    60da:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <Led_Control>
			
			Logout_Request_Handler();
    60de:	0e 94 a6 33 	call	0x674c	; 0x674c <Logout_Request_Handler>
			Motor_Control();
    60e2:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <Motor_Control>
    60e6:	80 e0       	ldi	r24, 0x00	; 0
    60e8:	90 e0       	ldi	r25, 0x00	; 0
    60ea:	a6 e1       	ldi	r26, 0x16	; 22
    60ec:	b3 e4       	ldi	r27, 0x43	; 67
    60ee:	8b 87       	std	Y+11, r24	; 0x0b
    60f0:	9c 87       	std	Y+12, r25	; 0x0c
    60f2:	ad 87       	std	Y+13, r26	; 0x0d
    60f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    60f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    60fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    60fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    60fe:	20 e0       	ldi	r18, 0x00	; 0
    6100:	30 e0       	ldi	r19, 0x00	; 0
    6102:	4a e7       	ldi	r20, 0x7A	; 122
    6104:	55 e4       	ldi	r21, 0x45	; 69
    6106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    610a:	dc 01       	movw	r26, r24
    610c:	cb 01       	movw	r24, r22
    610e:	8f 83       	std	Y+7, r24	; 0x07
    6110:	98 87       	std	Y+8, r25	; 0x08
    6112:	a9 87       	std	Y+9, r26	; 0x09
    6114:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6116:	6f 81       	ldd	r22, Y+7	; 0x07
    6118:	78 85       	ldd	r23, Y+8	; 0x08
    611a:	89 85       	ldd	r24, Y+9	; 0x09
    611c:	9a 85       	ldd	r25, Y+10	; 0x0a
    611e:	20 e0       	ldi	r18, 0x00	; 0
    6120:	30 e0       	ldi	r19, 0x00	; 0
    6122:	40 e8       	ldi	r20, 0x80	; 128
    6124:	5f e3       	ldi	r21, 0x3F	; 63
    6126:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    612a:	88 23       	and	r24, r24
    612c:	2c f4       	brge	.+10     	; 0x6138 <main+0x174>
		__ticks = 1;
    612e:	81 e0       	ldi	r24, 0x01	; 1
    6130:	90 e0       	ldi	r25, 0x00	; 0
    6132:	9e 83       	std	Y+6, r25	; 0x06
    6134:	8d 83       	std	Y+5, r24	; 0x05
    6136:	3f c0       	rjmp	.+126    	; 0x61b6 <main+0x1f2>
	else if (__tmp > 65535)
    6138:	6f 81       	ldd	r22, Y+7	; 0x07
    613a:	78 85       	ldd	r23, Y+8	; 0x08
    613c:	89 85       	ldd	r24, Y+9	; 0x09
    613e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6140:	20 e0       	ldi	r18, 0x00	; 0
    6142:	3f ef       	ldi	r19, 0xFF	; 255
    6144:	4f e7       	ldi	r20, 0x7F	; 127
    6146:	57 e4       	ldi	r21, 0x47	; 71
    6148:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    614c:	18 16       	cp	r1, r24
    614e:	4c f5       	brge	.+82     	; 0x61a2 <main+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6150:	6b 85       	ldd	r22, Y+11	; 0x0b
    6152:	7c 85       	ldd	r23, Y+12	; 0x0c
    6154:	8d 85       	ldd	r24, Y+13	; 0x0d
    6156:	9e 85       	ldd	r25, Y+14	; 0x0e
    6158:	20 e0       	ldi	r18, 0x00	; 0
    615a:	30 e0       	ldi	r19, 0x00	; 0
    615c:	40 e2       	ldi	r20, 0x20	; 32
    615e:	51 e4       	ldi	r21, 0x41	; 65
    6160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6164:	dc 01       	movw	r26, r24
    6166:	cb 01       	movw	r24, r22
    6168:	bc 01       	movw	r22, r24
    616a:	cd 01       	movw	r24, r26
    616c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6170:	dc 01       	movw	r26, r24
    6172:	cb 01       	movw	r24, r22
    6174:	9e 83       	std	Y+6, r25	; 0x06
    6176:	8d 83       	std	Y+5, r24	; 0x05
    6178:	0f c0       	rjmp	.+30     	; 0x6198 <main+0x1d4>
    617a:	80 e9       	ldi	r24, 0x90	; 144
    617c:	91 e0       	ldi	r25, 0x01	; 1
    617e:	9c 83       	std	Y+4, r25	; 0x04
    6180:	8b 83       	std	Y+3, r24	; 0x03
    6182:	8b 81       	ldd	r24, Y+3	; 0x03
    6184:	9c 81       	ldd	r25, Y+4	; 0x04
    6186:	01 97       	sbiw	r24, 0x01	; 1
    6188:	f1 f7       	brne	.-4      	; 0x6186 <main+0x1c2>
    618a:	9c 83       	std	Y+4, r25	; 0x04
    618c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    618e:	8d 81       	ldd	r24, Y+5	; 0x05
    6190:	9e 81       	ldd	r25, Y+6	; 0x06
    6192:	01 97       	sbiw	r24, 0x01	; 1
    6194:	9e 83       	std	Y+6, r25	; 0x06
    6196:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6198:	8d 81       	ldd	r24, Y+5	; 0x05
    619a:	9e 81       	ldd	r25, Y+6	; 0x06
    619c:	00 97       	sbiw	r24, 0x00	; 0
    619e:	69 f7       	brne	.-38     	; 0x617a <main+0x1b6>
    61a0:	14 c0       	rjmp	.+40     	; 0x61ca <main+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61a2:	6f 81       	ldd	r22, Y+7	; 0x07
    61a4:	78 85       	ldd	r23, Y+8	; 0x08
    61a6:	89 85       	ldd	r24, Y+9	; 0x09
    61a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    61aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61ae:	dc 01       	movw	r26, r24
    61b0:	cb 01       	movw	r24, r22
    61b2:	9e 83       	std	Y+6, r25	; 0x06
    61b4:	8d 83       	std	Y+5, r24	; 0x05
    61b6:	8d 81       	ldd	r24, Y+5	; 0x05
    61b8:	9e 81       	ldd	r25, Y+6	; 0x06
    61ba:	9a 83       	std	Y+2, r25	; 0x02
    61bc:	89 83       	std	Y+1, r24	; 0x01
    61be:	89 81       	ldd	r24, Y+1	; 0x01
    61c0:	9a 81       	ldd	r25, Y+2	; 0x02
    61c2:	01 97       	sbiw	r24, 0x01	; 1
    61c4:	f1 f7       	brne	.-4      	; 0x61c2 <main+0x1fe>
    61c6:	9a 83       	std	Y+2, r25	; 0x02
    61c8:	89 83       	std	Y+1, r24	; 0x01
		
	while(1)
	{

		/* Wait for ECU1 Login Sucsess Signal to start Application */
		while(Login_Sucsess_Flag == 1)
    61ca:	80 91 66 06 	lds	r24, 0x0666
    61ce:	81 30       	cpi	r24, 0x01	; 1
    61d0:	09 f4       	brne	.+2      	; 0x61d4 <main+0x210>
    61d2:	79 cf       	rjmp	.-270    	; 0x60c6 <main+0x102>
    61d4:	fa cf       	rjmp	.-12     	; 0x61ca <main+0x206>

000061d6 <sytem_init>:
extern EXTI_CONFIG_t EXTI_INT_ArrConfig[EXTI_INT_ArrConfig_Size];

System_cfg_t system_cfg = {PORT_Config_Arr};
	
	
ES_t sytem_init(){
    61d6:	df 93       	push	r29
    61d8:	cf 93       	push	r28
    61da:	0f 92       	push	r0
    61dc:	cd b7       	in	r28, 0x3d	; 61
    61de:	de b7       	in	r29, 0x3e	; 62
	/* Initialize all Required Ports and Pins */
		//Port_Init(copy_system_cfg.port_cfg,20);
		Port_Init(PORT_Config_Arr , 21);
    61e0:	88 e0       	ldi	r24, 0x08	; 8
    61e2:	94 e0       	ldi	r25, 0x04	; 4
    61e4:	65 e1       	ldi	r22, 0x15	; 21
    61e6:	70 e0       	ldi	r23, 0x00	; 0
    61e8:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <Port_Init>

		
		/* LCD Initialization */
		H_LCD_void_Init();
    61ec:	0e 94 8c 2b 	call	0x5718	; 0x5718 <H_LCD_void_Init>

		/* Global interrupt Initialization */
		M_vEnable_Global_Interrupts();
    61f0:	0e 94 32 11 	call	0x2264	; 0x2264 <M_vEnable_Global_Interrupts>

		/* UART Initialization */
		UART_Init(UART_CONFIG2);
    61f4:	80 91 58 04 	lds	r24, 0x0458
    61f8:	90 91 59 04 	lds	r25, 0x0459
    61fc:	a0 91 5a 04 	lds	r26, 0x045A
    6200:	b0 91 5b 04 	lds	r27, 0x045B
    6204:	bc 01       	movw	r22, r24
    6206:	cd 01       	movw	r24, r26
    6208:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_Init>

		/* Timer0 Init */
		M_vTIMER0_Init( TIMER0_PWM_PhaseCorrect_MODE,  TIMER0_PWM_PHASECORRECT_NonInverted_MODE);
    620c:	80 e4       	ldi	r24, 0x40	; 64
    620e:	60 e2       	ldi	r22, 0x20	; 32
    6210:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <M_vTIMER0_Init>
		
		/* Timer1 Init */
		M_TIMER1_void_Init(Timer_1_Fast_PWM, TIMER_1_NonINV );
    6214:	81 e0       	ldi	r24, 0x01	; 1
    6216:	61 e0       	ldi	r22, 0x01	; 1
    6218:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <M_TIMER1_void_Init>

		
		M_vEXTI_INT_Enable(EXTI_INT_ArrConfig);
    621c:	88 ed       	ldi	r24, 0xD8	; 216
    621e:	93 e0       	ldi	r25, 0x03	; 3
    6220:	0e 94 4e 11 	call	0x229c	; 0x229c <M_vEXTI_INT_Enable>
		M_vEXTI_SetCallBack(ECU1_Login_Sucsess_Signal, EXTI_INT0);
    6224:	8b e1       	ldi	r24, 0x1B	; 27
    6226:	91 e3       	ldi	r25, 0x31	; 49
    6228:	60 e0       	ldi	r22, 0x00	; 0
    622a:	0e 94 2e 12 	call	0x245c	; 0x245c <M_vEXTI_SetCallBack>
		
		/* Wifi Init and Connect */
		

}
    622e:	0f 90       	pop	r0
    6230:	cf 91       	pop	r28
    6232:	df 91       	pop	r29
    6234:	08 95       	ret

00006236 <ECU1_Login_Sucsess_Signal>:


void ECU1_Login_Sucsess_Signal()
{
    6236:	df 93       	push	r29
    6238:	cf 93       	push	r28
    623a:	cd b7       	in	r28, 0x3d	; 61
    623c:	de b7       	in	r29, 0x3e	; 62
	Login_Sucsess_Flag = 1;
    623e:	81 e0       	ldi	r24, 0x01	; 1
    6240:	80 93 66 06 	sts	0x0666, r24
}
    6244:	cf 91       	pop	r28
    6246:	df 91       	pop	r29
    6248:	08 95       	ret

0000624a <Check_Login_Sucsess>:


void Check_Login_Sucsess()
{
    624a:	0f 93       	push	r16
    624c:	1f 93       	push	r17
    624e:	df 93       	push	r29
    6250:	cf 93       	push	r28
    6252:	cd b7       	in	r28, 0x3d	; 61
    6254:	de b7       	in	r29, 0x3e	; 62
    6256:	c6 54       	subi	r28, 0x46	; 70
    6258:	d0 40       	sbci	r29, 0x00	; 0
    625a:	0f b6       	in	r0, 0x3f	; 63
    625c:	f8 94       	cli
    625e:	de bf       	out	0x3e, r29	; 62
    6260:	0f be       	out	0x3f, r0	; 63
    6262:	cd bf       	out	0x3d, r28	; 61
	Login_Sucsess_Flag =0;
    6264:	10 92 66 06 	sts	0x0666, r1
	Logout_Request_Flag =1;
    6268:	81 e0       	ldi	r24, 0x01	; 1
    626a:	80 93 75 06 	sts	0x0675, r24
	H_LCD_void_sendString("Wait User Login");
    626e:	8f e3       	ldi	r24, 0x3F	; 63
    6270:	92 e0       	ldi	r25, 0x02	; 2
    6272:	0e 94 2f 2a 	call	0x545e	; 0x545e <H_LCD_void_sendString>
	{
		
		//H_LCD_void_gotoXY(1,0);
		
		//_delay_ms(2000);		
		if (Login_Sucsess_Flag == 1)
    6276:	80 91 66 06 	lds	r24, 0x0666
    627a:	81 30       	cpi	r24, 0x01	; 1
    627c:	e1 f7       	brne	.-8      	; 0x6276 <Check_Login_Sucsess+0x2c>
		{
			H_LCD_void_Clear_Display();
    627e:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <H_LCD_void_Clear_Display>
    6282:	fe 01       	movw	r30, r28
    6284:	ed 5b       	subi	r30, 0xBD	; 189
    6286:	ff 4f       	sbci	r31, 0xFF	; 255
    6288:	80 e0       	ldi	r24, 0x00	; 0
    628a:	90 e0       	ldi	r25, 0x00	; 0
    628c:	a8 e4       	ldi	r26, 0x48	; 72
    628e:	b3 e4       	ldi	r27, 0x43	; 67
    6290:	80 83       	st	Z, r24
    6292:	91 83       	std	Z+1, r25	; 0x01
    6294:	a2 83       	std	Z+2, r26	; 0x02
    6296:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6298:	8e 01       	movw	r16, r28
    629a:	01 5c       	subi	r16, 0xC1	; 193
    629c:	1f 4f       	sbci	r17, 0xFF	; 255
    629e:	fe 01       	movw	r30, r28
    62a0:	ed 5b       	subi	r30, 0xBD	; 189
    62a2:	ff 4f       	sbci	r31, 0xFF	; 255
    62a4:	60 81       	ld	r22, Z
    62a6:	71 81       	ldd	r23, Z+1	; 0x01
    62a8:	82 81       	ldd	r24, Z+2	; 0x02
    62aa:	93 81       	ldd	r25, Z+3	; 0x03
    62ac:	20 e0       	ldi	r18, 0x00	; 0
    62ae:	30 e0       	ldi	r19, 0x00	; 0
    62b0:	4a e7       	ldi	r20, 0x7A	; 122
    62b2:	55 e4       	ldi	r21, 0x45	; 69
    62b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62b8:	dc 01       	movw	r26, r24
    62ba:	cb 01       	movw	r24, r22
    62bc:	f8 01       	movw	r30, r16
    62be:	80 83       	st	Z, r24
    62c0:	91 83       	std	Z+1, r25	; 0x01
    62c2:	a2 83       	std	Z+2, r26	; 0x02
    62c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    62c6:	fe 01       	movw	r30, r28
    62c8:	ff 96       	adiw	r30, 0x3f	; 63
    62ca:	60 81       	ld	r22, Z
    62cc:	71 81       	ldd	r23, Z+1	; 0x01
    62ce:	82 81       	ldd	r24, Z+2	; 0x02
    62d0:	93 81       	ldd	r25, Z+3	; 0x03
    62d2:	20 e0       	ldi	r18, 0x00	; 0
    62d4:	30 e0       	ldi	r19, 0x00	; 0
    62d6:	40 e8       	ldi	r20, 0x80	; 128
    62d8:	5f e3       	ldi	r21, 0x3F	; 63
    62da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    62de:	88 23       	and	r24, r24
    62e0:	2c f4       	brge	.+10     	; 0x62ec <Check_Login_Sucsess+0xa2>
		__ticks = 1;
    62e2:	81 e0       	ldi	r24, 0x01	; 1
    62e4:	90 e0       	ldi	r25, 0x00	; 0
    62e6:	9e af       	std	Y+62, r25	; 0x3e
    62e8:	8d af       	std	Y+61, r24	; 0x3d
    62ea:	46 c0       	rjmp	.+140    	; 0x6378 <Check_Login_Sucsess+0x12e>
	else if (__tmp > 65535)
    62ec:	fe 01       	movw	r30, r28
    62ee:	ff 96       	adiw	r30, 0x3f	; 63
    62f0:	60 81       	ld	r22, Z
    62f2:	71 81       	ldd	r23, Z+1	; 0x01
    62f4:	82 81       	ldd	r24, Z+2	; 0x02
    62f6:	93 81       	ldd	r25, Z+3	; 0x03
    62f8:	20 e0       	ldi	r18, 0x00	; 0
    62fa:	3f ef       	ldi	r19, 0xFF	; 255
    62fc:	4f e7       	ldi	r20, 0x7F	; 127
    62fe:	57 e4       	ldi	r21, 0x47	; 71
    6300:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6304:	18 16       	cp	r1, r24
    6306:	64 f5       	brge	.+88     	; 0x6360 <Check_Login_Sucsess+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6308:	fe 01       	movw	r30, r28
    630a:	ed 5b       	subi	r30, 0xBD	; 189
    630c:	ff 4f       	sbci	r31, 0xFF	; 255
    630e:	60 81       	ld	r22, Z
    6310:	71 81       	ldd	r23, Z+1	; 0x01
    6312:	82 81       	ldd	r24, Z+2	; 0x02
    6314:	93 81       	ldd	r25, Z+3	; 0x03
    6316:	20 e0       	ldi	r18, 0x00	; 0
    6318:	30 e0       	ldi	r19, 0x00	; 0
    631a:	40 e2       	ldi	r20, 0x20	; 32
    631c:	51 e4       	ldi	r21, 0x41	; 65
    631e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6322:	dc 01       	movw	r26, r24
    6324:	cb 01       	movw	r24, r22
    6326:	bc 01       	movw	r22, r24
    6328:	cd 01       	movw	r24, r26
    632a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    632e:	dc 01       	movw	r26, r24
    6330:	cb 01       	movw	r24, r22
    6332:	9e af       	std	Y+62, r25	; 0x3e
    6334:	8d af       	std	Y+61, r24	; 0x3d
    6336:	0f c0       	rjmp	.+30     	; 0x6356 <Check_Login_Sucsess+0x10c>
    6338:	80 e9       	ldi	r24, 0x90	; 144
    633a:	91 e0       	ldi	r25, 0x01	; 1
    633c:	9c af       	std	Y+60, r25	; 0x3c
    633e:	8b af       	std	Y+59, r24	; 0x3b
    6340:	8b ad       	ldd	r24, Y+59	; 0x3b
    6342:	9c ad       	ldd	r25, Y+60	; 0x3c
    6344:	01 97       	sbiw	r24, 0x01	; 1
    6346:	f1 f7       	brne	.-4      	; 0x6344 <Check_Login_Sucsess+0xfa>
    6348:	9c af       	std	Y+60, r25	; 0x3c
    634a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    634c:	8d ad       	ldd	r24, Y+61	; 0x3d
    634e:	9e ad       	ldd	r25, Y+62	; 0x3e
    6350:	01 97       	sbiw	r24, 0x01	; 1
    6352:	9e af       	std	Y+62, r25	; 0x3e
    6354:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6356:	8d ad       	ldd	r24, Y+61	; 0x3d
    6358:	9e ad       	ldd	r25, Y+62	; 0x3e
    635a:	00 97       	sbiw	r24, 0x00	; 0
    635c:	69 f7       	brne	.-38     	; 0x6338 <Check_Login_Sucsess+0xee>
    635e:	16 c0       	rjmp	.+44     	; 0x638c <Check_Login_Sucsess+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6360:	fe 01       	movw	r30, r28
    6362:	ff 96       	adiw	r30, 0x3f	; 63
    6364:	60 81       	ld	r22, Z
    6366:	71 81       	ldd	r23, Z+1	; 0x01
    6368:	82 81       	ldd	r24, Z+2	; 0x02
    636a:	93 81       	ldd	r25, Z+3	; 0x03
    636c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6370:	dc 01       	movw	r26, r24
    6372:	cb 01       	movw	r24, r22
    6374:	9e af       	std	Y+62, r25	; 0x3e
    6376:	8d af       	std	Y+61, r24	; 0x3d
    6378:	8d ad       	ldd	r24, Y+61	; 0x3d
    637a:	9e ad       	ldd	r25, Y+62	; 0x3e
    637c:	9a af       	std	Y+58, r25	; 0x3a
    637e:	89 af       	std	Y+57, r24	; 0x39
    6380:	89 ad       	ldd	r24, Y+57	; 0x39
    6382:	9a ad       	ldd	r25, Y+58	; 0x3a
    6384:	01 97       	sbiw	r24, 0x01	; 1
    6386:	f1 f7       	brne	.-4      	; 0x6384 <Check_Login_Sucsess+0x13a>
    6388:	9a af       	std	Y+58, r25	; 0x3a
    638a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(200);
			H_LCD_void_sendString("welcome Home");
    638c:	8f e4       	ldi	r24, 0x4F	; 79
    638e:	92 e0       	ldi	r25, 0x02	; 2
    6390:	0e 94 2f 2a 	call	0x545e	; 0x545e <H_LCD_void_sendString>
    6394:	80 e0       	ldi	r24, 0x00	; 0
    6396:	90 e0       	ldi	r25, 0x00	; 0
    6398:	aa e7       	ldi	r26, 0x7A	; 122
    639a:	b4 e4       	ldi	r27, 0x44	; 68
    639c:	8d ab       	std	Y+53, r24	; 0x35
    639e:	9e ab       	std	Y+54, r25	; 0x36
    63a0:	af ab       	std	Y+55, r26	; 0x37
    63a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63a4:	6d a9       	ldd	r22, Y+53	; 0x35
    63a6:	7e a9       	ldd	r23, Y+54	; 0x36
    63a8:	8f a9       	ldd	r24, Y+55	; 0x37
    63aa:	98 ad       	ldd	r25, Y+56	; 0x38
    63ac:	20 e0       	ldi	r18, 0x00	; 0
    63ae:	30 e0       	ldi	r19, 0x00	; 0
    63b0:	4a e7       	ldi	r20, 0x7A	; 122
    63b2:	55 e4       	ldi	r21, 0x45	; 69
    63b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63b8:	dc 01       	movw	r26, r24
    63ba:	cb 01       	movw	r24, r22
    63bc:	89 ab       	std	Y+49, r24	; 0x31
    63be:	9a ab       	std	Y+50, r25	; 0x32
    63c0:	ab ab       	std	Y+51, r26	; 0x33
    63c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    63c4:	69 a9       	ldd	r22, Y+49	; 0x31
    63c6:	7a a9       	ldd	r23, Y+50	; 0x32
    63c8:	8b a9       	ldd	r24, Y+51	; 0x33
    63ca:	9c a9       	ldd	r25, Y+52	; 0x34
    63cc:	20 e0       	ldi	r18, 0x00	; 0
    63ce:	30 e0       	ldi	r19, 0x00	; 0
    63d0:	40 e8       	ldi	r20, 0x80	; 128
    63d2:	5f e3       	ldi	r21, 0x3F	; 63
    63d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    63d8:	88 23       	and	r24, r24
    63da:	2c f4       	brge	.+10     	; 0x63e6 <Check_Login_Sucsess+0x19c>
		__ticks = 1;
    63dc:	81 e0       	ldi	r24, 0x01	; 1
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	98 ab       	std	Y+48, r25	; 0x30
    63e2:	8f a7       	std	Y+47, r24	; 0x2f
    63e4:	3f c0       	rjmp	.+126    	; 0x6464 <Check_Login_Sucsess+0x21a>
	else if (__tmp > 65535)
    63e6:	69 a9       	ldd	r22, Y+49	; 0x31
    63e8:	7a a9       	ldd	r23, Y+50	; 0x32
    63ea:	8b a9       	ldd	r24, Y+51	; 0x33
    63ec:	9c a9       	ldd	r25, Y+52	; 0x34
    63ee:	20 e0       	ldi	r18, 0x00	; 0
    63f0:	3f ef       	ldi	r19, 0xFF	; 255
    63f2:	4f e7       	ldi	r20, 0x7F	; 127
    63f4:	57 e4       	ldi	r21, 0x47	; 71
    63f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    63fa:	18 16       	cp	r1, r24
    63fc:	4c f5       	brge	.+82     	; 0x6450 <Check_Login_Sucsess+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63fe:	6d a9       	ldd	r22, Y+53	; 0x35
    6400:	7e a9       	ldd	r23, Y+54	; 0x36
    6402:	8f a9       	ldd	r24, Y+55	; 0x37
    6404:	98 ad       	ldd	r25, Y+56	; 0x38
    6406:	20 e0       	ldi	r18, 0x00	; 0
    6408:	30 e0       	ldi	r19, 0x00	; 0
    640a:	40 e2       	ldi	r20, 0x20	; 32
    640c:	51 e4       	ldi	r21, 0x41	; 65
    640e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6412:	dc 01       	movw	r26, r24
    6414:	cb 01       	movw	r24, r22
    6416:	bc 01       	movw	r22, r24
    6418:	cd 01       	movw	r24, r26
    641a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    641e:	dc 01       	movw	r26, r24
    6420:	cb 01       	movw	r24, r22
    6422:	98 ab       	std	Y+48, r25	; 0x30
    6424:	8f a7       	std	Y+47, r24	; 0x2f
    6426:	0f c0       	rjmp	.+30     	; 0x6446 <Check_Login_Sucsess+0x1fc>
    6428:	80 e9       	ldi	r24, 0x90	; 144
    642a:	91 e0       	ldi	r25, 0x01	; 1
    642c:	9e a7       	std	Y+46, r25	; 0x2e
    642e:	8d a7       	std	Y+45, r24	; 0x2d
    6430:	8d a5       	ldd	r24, Y+45	; 0x2d
    6432:	9e a5       	ldd	r25, Y+46	; 0x2e
    6434:	01 97       	sbiw	r24, 0x01	; 1
    6436:	f1 f7       	brne	.-4      	; 0x6434 <Check_Login_Sucsess+0x1ea>
    6438:	9e a7       	std	Y+46, r25	; 0x2e
    643a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    643c:	8f a5       	ldd	r24, Y+47	; 0x2f
    643e:	98 a9       	ldd	r25, Y+48	; 0x30
    6440:	01 97       	sbiw	r24, 0x01	; 1
    6442:	98 ab       	std	Y+48, r25	; 0x30
    6444:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6446:	8f a5       	ldd	r24, Y+47	; 0x2f
    6448:	98 a9       	ldd	r25, Y+48	; 0x30
    644a:	00 97       	sbiw	r24, 0x00	; 0
    644c:	69 f7       	brne	.-38     	; 0x6428 <Check_Login_Sucsess+0x1de>
    644e:	14 c0       	rjmp	.+40     	; 0x6478 <Check_Login_Sucsess+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6450:	69 a9       	ldd	r22, Y+49	; 0x31
    6452:	7a a9       	ldd	r23, Y+50	; 0x32
    6454:	8b a9       	ldd	r24, Y+51	; 0x33
    6456:	9c a9       	ldd	r25, Y+52	; 0x34
    6458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    645c:	dc 01       	movw	r26, r24
    645e:	cb 01       	movw	r24, r22
    6460:	98 ab       	std	Y+48, r25	; 0x30
    6462:	8f a7       	std	Y+47, r24	; 0x2f
    6464:	8f a5       	ldd	r24, Y+47	; 0x2f
    6466:	98 a9       	ldd	r25, Y+48	; 0x30
    6468:	9c a7       	std	Y+44, r25	; 0x2c
    646a:	8b a7       	std	Y+43, r24	; 0x2b
    646c:	8b a5       	ldd	r24, Y+43	; 0x2b
    646e:	9c a5       	ldd	r25, Y+44	; 0x2c
    6470:	01 97       	sbiw	r24, 0x01	; 1
    6472:	f1 f7       	brne	.-4      	; 0x6470 <Check_Login_Sucsess+0x226>
    6474:	9c a7       	std	Y+44, r25	; 0x2c
    6476:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			H_LCD_void_Clear_Display();
    6478:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <H_LCD_void_Clear_Display>
    647c:	80 e0       	ldi	r24, 0x00	; 0
    647e:	90 e0       	ldi	r25, 0x00	; 0
    6480:	a8 e4       	ldi	r26, 0x48	; 72
    6482:	b3 e4       	ldi	r27, 0x43	; 67
    6484:	8f a3       	std	Y+39, r24	; 0x27
    6486:	98 a7       	std	Y+40, r25	; 0x28
    6488:	a9 a7       	std	Y+41, r26	; 0x29
    648a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    648c:	6f a1       	ldd	r22, Y+39	; 0x27
    648e:	78 a5       	ldd	r23, Y+40	; 0x28
    6490:	89 a5       	ldd	r24, Y+41	; 0x29
    6492:	9a a5       	ldd	r25, Y+42	; 0x2a
    6494:	20 e0       	ldi	r18, 0x00	; 0
    6496:	30 e0       	ldi	r19, 0x00	; 0
    6498:	4a e7       	ldi	r20, 0x7A	; 122
    649a:	55 e4       	ldi	r21, 0x45	; 69
    649c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64a0:	dc 01       	movw	r26, r24
    64a2:	cb 01       	movw	r24, r22
    64a4:	8b a3       	std	Y+35, r24	; 0x23
    64a6:	9c a3       	std	Y+36, r25	; 0x24
    64a8:	ad a3       	std	Y+37, r26	; 0x25
    64aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    64ac:	6b a1       	ldd	r22, Y+35	; 0x23
    64ae:	7c a1       	ldd	r23, Y+36	; 0x24
    64b0:	8d a1       	ldd	r24, Y+37	; 0x25
    64b2:	9e a1       	ldd	r25, Y+38	; 0x26
    64b4:	20 e0       	ldi	r18, 0x00	; 0
    64b6:	30 e0       	ldi	r19, 0x00	; 0
    64b8:	40 e8       	ldi	r20, 0x80	; 128
    64ba:	5f e3       	ldi	r21, 0x3F	; 63
    64bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    64c0:	88 23       	and	r24, r24
    64c2:	2c f4       	brge	.+10     	; 0x64ce <Check_Login_Sucsess+0x284>
		__ticks = 1;
    64c4:	81 e0       	ldi	r24, 0x01	; 1
    64c6:	90 e0       	ldi	r25, 0x00	; 0
    64c8:	9a a3       	std	Y+34, r25	; 0x22
    64ca:	89 a3       	std	Y+33, r24	; 0x21
    64cc:	3f c0       	rjmp	.+126    	; 0x654c <Check_Login_Sucsess+0x302>
	else if (__tmp > 65535)
    64ce:	6b a1       	ldd	r22, Y+35	; 0x23
    64d0:	7c a1       	ldd	r23, Y+36	; 0x24
    64d2:	8d a1       	ldd	r24, Y+37	; 0x25
    64d4:	9e a1       	ldd	r25, Y+38	; 0x26
    64d6:	20 e0       	ldi	r18, 0x00	; 0
    64d8:	3f ef       	ldi	r19, 0xFF	; 255
    64da:	4f e7       	ldi	r20, 0x7F	; 127
    64dc:	57 e4       	ldi	r21, 0x47	; 71
    64de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    64e2:	18 16       	cp	r1, r24
    64e4:	4c f5       	brge	.+82     	; 0x6538 <Check_Login_Sucsess+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64e6:	6f a1       	ldd	r22, Y+39	; 0x27
    64e8:	78 a5       	ldd	r23, Y+40	; 0x28
    64ea:	89 a5       	ldd	r24, Y+41	; 0x29
    64ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    64ee:	20 e0       	ldi	r18, 0x00	; 0
    64f0:	30 e0       	ldi	r19, 0x00	; 0
    64f2:	40 e2       	ldi	r20, 0x20	; 32
    64f4:	51 e4       	ldi	r21, 0x41	; 65
    64f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64fa:	dc 01       	movw	r26, r24
    64fc:	cb 01       	movw	r24, r22
    64fe:	bc 01       	movw	r22, r24
    6500:	cd 01       	movw	r24, r26
    6502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6506:	dc 01       	movw	r26, r24
    6508:	cb 01       	movw	r24, r22
    650a:	9a a3       	std	Y+34, r25	; 0x22
    650c:	89 a3       	std	Y+33, r24	; 0x21
    650e:	0f c0       	rjmp	.+30     	; 0x652e <Check_Login_Sucsess+0x2e4>
    6510:	80 e9       	ldi	r24, 0x90	; 144
    6512:	91 e0       	ldi	r25, 0x01	; 1
    6514:	98 a3       	std	Y+32, r25	; 0x20
    6516:	8f 8f       	std	Y+31, r24	; 0x1f
    6518:	8f 8d       	ldd	r24, Y+31	; 0x1f
    651a:	98 a1       	ldd	r25, Y+32	; 0x20
    651c:	01 97       	sbiw	r24, 0x01	; 1
    651e:	f1 f7       	brne	.-4      	; 0x651c <Check_Login_Sucsess+0x2d2>
    6520:	98 a3       	std	Y+32, r25	; 0x20
    6522:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6524:	89 a1       	ldd	r24, Y+33	; 0x21
    6526:	9a a1       	ldd	r25, Y+34	; 0x22
    6528:	01 97       	sbiw	r24, 0x01	; 1
    652a:	9a a3       	std	Y+34, r25	; 0x22
    652c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    652e:	89 a1       	ldd	r24, Y+33	; 0x21
    6530:	9a a1       	ldd	r25, Y+34	; 0x22
    6532:	00 97       	sbiw	r24, 0x00	; 0
    6534:	69 f7       	brne	.-38     	; 0x6510 <Check_Login_Sucsess+0x2c6>
    6536:	14 c0       	rjmp	.+40     	; 0x6560 <Check_Login_Sucsess+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6538:	6b a1       	ldd	r22, Y+35	; 0x23
    653a:	7c a1       	ldd	r23, Y+36	; 0x24
    653c:	8d a1       	ldd	r24, Y+37	; 0x25
    653e:	9e a1       	ldd	r25, Y+38	; 0x26
    6540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6544:	dc 01       	movw	r26, r24
    6546:	cb 01       	movw	r24, r22
    6548:	9a a3       	std	Y+34, r25	; 0x22
    654a:	89 a3       	std	Y+33, r24	; 0x21
    654c:	89 a1       	ldd	r24, Y+33	; 0x21
    654e:	9a a1       	ldd	r25, Y+34	; 0x22
    6550:	9e 8f       	std	Y+30, r25	; 0x1e
    6552:	8d 8f       	std	Y+29, r24	; 0x1d
    6554:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6556:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6558:	01 97       	sbiw	r24, 0x01	; 1
    655a:	f1 f7       	brne	.-4      	; 0x6558 <Check_Login_Sucsess+0x30e>
    655c:	9e 8f       	std	Y+30, r25	; 0x1e
    655e:	8d 8f       	std	Y+29, r24	; 0x1d
			
			_delay_ms(200);
			wifi_connect();
    6560:	0e 94 a2 18 	call	0x3144	; 0x3144 <wifi_connect>
    6564:	80 e0       	ldi	r24, 0x00	; 0
    6566:	90 e0       	ldi	r25, 0x00	; 0
    6568:	a8 e4       	ldi	r26, 0x48	; 72
    656a:	b3 e4       	ldi	r27, 0x43	; 67
    656c:	89 8f       	std	Y+25, r24	; 0x19
    656e:	9a 8f       	std	Y+26, r25	; 0x1a
    6570:	ab 8f       	std	Y+27, r26	; 0x1b
    6572:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6574:	69 8d       	ldd	r22, Y+25	; 0x19
    6576:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6578:	8b 8d       	ldd	r24, Y+27	; 0x1b
    657a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    657c:	20 e0       	ldi	r18, 0x00	; 0
    657e:	30 e0       	ldi	r19, 0x00	; 0
    6580:	4a e7       	ldi	r20, 0x7A	; 122
    6582:	55 e4       	ldi	r21, 0x45	; 69
    6584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6588:	dc 01       	movw	r26, r24
    658a:	cb 01       	movw	r24, r22
    658c:	8d 8b       	std	Y+21, r24	; 0x15
    658e:	9e 8b       	std	Y+22, r25	; 0x16
    6590:	af 8b       	std	Y+23, r26	; 0x17
    6592:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6594:	6d 89       	ldd	r22, Y+21	; 0x15
    6596:	7e 89       	ldd	r23, Y+22	; 0x16
    6598:	8f 89       	ldd	r24, Y+23	; 0x17
    659a:	98 8d       	ldd	r25, Y+24	; 0x18
    659c:	20 e0       	ldi	r18, 0x00	; 0
    659e:	30 e0       	ldi	r19, 0x00	; 0
    65a0:	40 e8       	ldi	r20, 0x80	; 128
    65a2:	5f e3       	ldi	r21, 0x3F	; 63
    65a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    65a8:	88 23       	and	r24, r24
    65aa:	2c f4       	brge	.+10     	; 0x65b6 <Check_Login_Sucsess+0x36c>
		__ticks = 1;
    65ac:	81 e0       	ldi	r24, 0x01	; 1
    65ae:	90 e0       	ldi	r25, 0x00	; 0
    65b0:	9c 8b       	std	Y+20, r25	; 0x14
    65b2:	8b 8b       	std	Y+19, r24	; 0x13
    65b4:	3f c0       	rjmp	.+126    	; 0x6634 <Check_Login_Sucsess+0x3ea>
	else if (__tmp > 65535)
    65b6:	6d 89       	ldd	r22, Y+21	; 0x15
    65b8:	7e 89       	ldd	r23, Y+22	; 0x16
    65ba:	8f 89       	ldd	r24, Y+23	; 0x17
    65bc:	98 8d       	ldd	r25, Y+24	; 0x18
    65be:	20 e0       	ldi	r18, 0x00	; 0
    65c0:	3f ef       	ldi	r19, 0xFF	; 255
    65c2:	4f e7       	ldi	r20, 0x7F	; 127
    65c4:	57 e4       	ldi	r21, 0x47	; 71
    65c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    65ca:	18 16       	cp	r1, r24
    65cc:	4c f5       	brge	.+82     	; 0x6620 <Check_Login_Sucsess+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65ce:	69 8d       	ldd	r22, Y+25	; 0x19
    65d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    65d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    65d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    65d6:	20 e0       	ldi	r18, 0x00	; 0
    65d8:	30 e0       	ldi	r19, 0x00	; 0
    65da:	40 e2       	ldi	r20, 0x20	; 32
    65dc:	51 e4       	ldi	r21, 0x41	; 65
    65de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65e2:	dc 01       	movw	r26, r24
    65e4:	cb 01       	movw	r24, r22
    65e6:	bc 01       	movw	r22, r24
    65e8:	cd 01       	movw	r24, r26
    65ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65ee:	dc 01       	movw	r26, r24
    65f0:	cb 01       	movw	r24, r22
    65f2:	9c 8b       	std	Y+20, r25	; 0x14
    65f4:	8b 8b       	std	Y+19, r24	; 0x13
    65f6:	0f c0       	rjmp	.+30     	; 0x6616 <Check_Login_Sucsess+0x3cc>
    65f8:	80 e9       	ldi	r24, 0x90	; 144
    65fa:	91 e0       	ldi	r25, 0x01	; 1
    65fc:	9a 8b       	std	Y+18, r25	; 0x12
    65fe:	89 8b       	std	Y+17, r24	; 0x11
    6600:	89 89       	ldd	r24, Y+17	; 0x11
    6602:	9a 89       	ldd	r25, Y+18	; 0x12
    6604:	01 97       	sbiw	r24, 0x01	; 1
    6606:	f1 f7       	brne	.-4      	; 0x6604 <Check_Login_Sucsess+0x3ba>
    6608:	9a 8b       	std	Y+18, r25	; 0x12
    660a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    660c:	8b 89       	ldd	r24, Y+19	; 0x13
    660e:	9c 89       	ldd	r25, Y+20	; 0x14
    6610:	01 97       	sbiw	r24, 0x01	; 1
    6612:	9c 8b       	std	Y+20, r25	; 0x14
    6614:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6616:	8b 89       	ldd	r24, Y+19	; 0x13
    6618:	9c 89       	ldd	r25, Y+20	; 0x14
    661a:	00 97       	sbiw	r24, 0x00	; 0
    661c:	69 f7       	brne	.-38     	; 0x65f8 <Check_Login_Sucsess+0x3ae>
    661e:	14 c0       	rjmp	.+40     	; 0x6648 <Check_Login_Sucsess+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6620:	6d 89       	ldd	r22, Y+21	; 0x15
    6622:	7e 89       	ldd	r23, Y+22	; 0x16
    6624:	8f 89       	ldd	r24, Y+23	; 0x17
    6626:	98 8d       	ldd	r25, Y+24	; 0x18
    6628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    662c:	dc 01       	movw	r26, r24
    662e:	cb 01       	movw	r24, r22
    6630:	9c 8b       	std	Y+20, r25	; 0x14
    6632:	8b 8b       	std	Y+19, r24	; 0x13
    6634:	8b 89       	ldd	r24, Y+19	; 0x13
    6636:	9c 89       	ldd	r25, Y+20	; 0x14
    6638:	98 8b       	std	Y+16, r25	; 0x10
    663a:	8f 87       	std	Y+15, r24	; 0x0f
    663c:	8f 85       	ldd	r24, Y+15	; 0x0f
    663e:	98 89       	ldd	r25, Y+16	; 0x10
    6640:	01 97       	sbiw	r24, 0x01	; 1
    6642:	f1 f7       	brne	.-4      	; 0x6640 <Check_Login_Sucsess+0x3f6>
    6644:	98 8b       	std	Y+16, r25	; 0x10
    6646:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			
			Show_Menu_Wifi();
    6648:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <Show_Menu_Wifi>
			H_LCD_void_Clear_Display();
    664c:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <H_LCD_void_Clear_Display>
    6650:	80 e0       	ldi	r24, 0x00	; 0
    6652:	90 e0       	ldi	r25, 0x00	; 0
    6654:	a8 e4       	ldi	r26, 0x48	; 72
    6656:	b3 e4       	ldi	r27, 0x43	; 67
    6658:	8b 87       	std	Y+11, r24	; 0x0b
    665a:	9c 87       	std	Y+12, r25	; 0x0c
    665c:	ad 87       	std	Y+13, r26	; 0x0d
    665e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6660:	6b 85       	ldd	r22, Y+11	; 0x0b
    6662:	7c 85       	ldd	r23, Y+12	; 0x0c
    6664:	8d 85       	ldd	r24, Y+13	; 0x0d
    6666:	9e 85       	ldd	r25, Y+14	; 0x0e
    6668:	20 e0       	ldi	r18, 0x00	; 0
    666a:	30 e0       	ldi	r19, 0x00	; 0
    666c:	4a e7       	ldi	r20, 0x7A	; 122
    666e:	55 e4       	ldi	r21, 0x45	; 69
    6670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6674:	dc 01       	movw	r26, r24
    6676:	cb 01       	movw	r24, r22
    6678:	8f 83       	std	Y+7, r24	; 0x07
    667a:	98 87       	std	Y+8, r25	; 0x08
    667c:	a9 87       	std	Y+9, r26	; 0x09
    667e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6680:	6f 81       	ldd	r22, Y+7	; 0x07
    6682:	78 85       	ldd	r23, Y+8	; 0x08
    6684:	89 85       	ldd	r24, Y+9	; 0x09
    6686:	9a 85       	ldd	r25, Y+10	; 0x0a
    6688:	20 e0       	ldi	r18, 0x00	; 0
    668a:	30 e0       	ldi	r19, 0x00	; 0
    668c:	40 e8       	ldi	r20, 0x80	; 128
    668e:	5f e3       	ldi	r21, 0x3F	; 63
    6690:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6694:	88 23       	and	r24, r24
    6696:	2c f4       	brge	.+10     	; 0x66a2 <Check_Login_Sucsess+0x458>
		__ticks = 1;
    6698:	81 e0       	ldi	r24, 0x01	; 1
    669a:	90 e0       	ldi	r25, 0x00	; 0
    669c:	9e 83       	std	Y+6, r25	; 0x06
    669e:	8d 83       	std	Y+5, r24	; 0x05
    66a0:	3f c0       	rjmp	.+126    	; 0x6720 <Check_Login_Sucsess+0x4d6>
	else if (__tmp > 65535)
    66a2:	6f 81       	ldd	r22, Y+7	; 0x07
    66a4:	78 85       	ldd	r23, Y+8	; 0x08
    66a6:	89 85       	ldd	r24, Y+9	; 0x09
    66a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    66aa:	20 e0       	ldi	r18, 0x00	; 0
    66ac:	3f ef       	ldi	r19, 0xFF	; 255
    66ae:	4f e7       	ldi	r20, 0x7F	; 127
    66b0:	57 e4       	ldi	r21, 0x47	; 71
    66b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    66b6:	18 16       	cp	r1, r24
    66b8:	4c f5       	brge	.+82     	; 0x670c <Check_Login_Sucsess+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    66bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    66be:	8d 85       	ldd	r24, Y+13	; 0x0d
    66c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    66c2:	20 e0       	ldi	r18, 0x00	; 0
    66c4:	30 e0       	ldi	r19, 0x00	; 0
    66c6:	40 e2       	ldi	r20, 0x20	; 32
    66c8:	51 e4       	ldi	r21, 0x41	; 65
    66ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66ce:	dc 01       	movw	r26, r24
    66d0:	cb 01       	movw	r24, r22
    66d2:	bc 01       	movw	r22, r24
    66d4:	cd 01       	movw	r24, r26
    66d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66da:	dc 01       	movw	r26, r24
    66dc:	cb 01       	movw	r24, r22
    66de:	9e 83       	std	Y+6, r25	; 0x06
    66e0:	8d 83       	std	Y+5, r24	; 0x05
    66e2:	0f c0       	rjmp	.+30     	; 0x6702 <Check_Login_Sucsess+0x4b8>
    66e4:	80 e9       	ldi	r24, 0x90	; 144
    66e6:	91 e0       	ldi	r25, 0x01	; 1
    66e8:	9c 83       	std	Y+4, r25	; 0x04
    66ea:	8b 83       	std	Y+3, r24	; 0x03
    66ec:	8b 81       	ldd	r24, Y+3	; 0x03
    66ee:	9c 81       	ldd	r25, Y+4	; 0x04
    66f0:	01 97       	sbiw	r24, 0x01	; 1
    66f2:	f1 f7       	brne	.-4      	; 0x66f0 <Check_Login_Sucsess+0x4a6>
    66f4:	9c 83       	std	Y+4, r25	; 0x04
    66f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66f8:	8d 81       	ldd	r24, Y+5	; 0x05
    66fa:	9e 81       	ldd	r25, Y+6	; 0x06
    66fc:	01 97       	sbiw	r24, 0x01	; 1
    66fe:	9e 83       	std	Y+6, r25	; 0x06
    6700:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6702:	8d 81       	ldd	r24, Y+5	; 0x05
    6704:	9e 81       	ldd	r25, Y+6	; 0x06
    6706:	00 97       	sbiw	r24, 0x00	; 0
    6708:	69 f7       	brne	.-38     	; 0x66e4 <Check_Login_Sucsess+0x49a>
    670a:	14 c0       	rjmp	.+40     	; 0x6734 <Check_Login_Sucsess+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    670c:	6f 81       	ldd	r22, Y+7	; 0x07
    670e:	78 85       	ldd	r23, Y+8	; 0x08
    6710:	89 85       	ldd	r24, Y+9	; 0x09
    6712:	9a 85       	ldd	r25, Y+10	; 0x0a
    6714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6718:	dc 01       	movw	r26, r24
    671a:	cb 01       	movw	r24, r22
    671c:	9e 83       	std	Y+6, r25	; 0x06
    671e:	8d 83       	std	Y+5, r24	; 0x05
    6720:	8d 81       	ldd	r24, Y+5	; 0x05
    6722:	9e 81       	ldd	r25, Y+6	; 0x06
    6724:	9a 83       	std	Y+2, r25	; 0x02
    6726:	89 83       	std	Y+1, r24	; 0x01
    6728:	89 81       	ldd	r24, Y+1	; 0x01
    672a:	9a 81       	ldd	r25, Y+2	; 0x02
    672c:	01 97       	sbiw	r24, 0x01	; 1
    672e:	f1 f7       	brne	.-4      	; 0x672c <Check_Login_Sucsess+0x4e2>
    6730:	9a 83       	std	Y+2, r25	; 0x02
    6732:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);
			break;
		}

		
	}
    6734:	ca 5b       	subi	r28, 0xBA	; 186
    6736:	df 4f       	sbci	r29, 0xFF	; 255
    6738:	0f b6       	in	r0, 0x3f	; 63
    673a:	f8 94       	cli
    673c:	de bf       	out	0x3e, r29	; 62
    673e:	0f be       	out	0x3f, r0	; 63
    6740:	cd bf       	out	0x3d, r28	; 61
    6742:	cf 91       	pop	r28
    6744:	df 91       	pop	r29
    6746:	1f 91       	pop	r17
    6748:	0f 91       	pop	r16
    674a:	08 95       	ret

0000674c <Logout_Request_Handler>:
}

void Logout_Request_Handler()
{
    674c:	df 93       	push	r29
    674e:	cf 93       	push	r28
    6750:	cd b7       	in	r28, 0x3d	; 61
    6752:	de b7       	in	r29, 0x3e	; 62
    6754:	e8 97       	sbiw	r28, 0x38	; 56
    6756:	0f b6       	in	r0, 0x3f	; 63
    6758:	f8 94       	cli
    675a:	de bf       	out	0x3e, r29	; 62
    675c:	0f be       	out	0x3f, r0	; 63
    675e:	cd bf       	out	0x3d, r28	; 61
	if(Logout_Request_Flag == Logout_Requested)
    6760:	80 91 75 06 	lds	r24, 0x0675
    6764:	8a 37       	cpi	r24, 0x7A	; 122
    6766:	09 f0       	breq	.+2      	; 0x676a <Logout_Request_Handler+0x1e>
    6768:	e8 c1       	rjmp	.+976    	; 0x6b3a <Logout_Request_Handler+0x3ee>
	{
		Login_Sucsess_Flag = 0;
    676a:	10 92 66 06 	sts	0x0666, r1
		H_LCD_void_Clear_Display();
    676e:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <H_LCD_void_Clear_Display>
    6772:	80 e0       	ldi	r24, 0x00	; 0
    6774:	90 e0       	ldi	r25, 0x00	; 0
    6776:	a8 e4       	ldi	r26, 0x48	; 72
    6778:	b3 e4       	ldi	r27, 0x43	; 67
    677a:	8d ab       	std	Y+53, r24	; 0x35
    677c:	9e ab       	std	Y+54, r25	; 0x36
    677e:	af ab       	std	Y+55, r26	; 0x37
    6780:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6782:	6d a9       	ldd	r22, Y+53	; 0x35
    6784:	7e a9       	ldd	r23, Y+54	; 0x36
    6786:	8f a9       	ldd	r24, Y+55	; 0x37
    6788:	98 ad       	ldd	r25, Y+56	; 0x38
    678a:	20 e0       	ldi	r18, 0x00	; 0
    678c:	30 e0       	ldi	r19, 0x00	; 0
    678e:	4a e7       	ldi	r20, 0x7A	; 122
    6790:	55 e4       	ldi	r21, 0x45	; 69
    6792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6796:	dc 01       	movw	r26, r24
    6798:	cb 01       	movw	r24, r22
    679a:	89 ab       	std	Y+49, r24	; 0x31
    679c:	9a ab       	std	Y+50, r25	; 0x32
    679e:	ab ab       	std	Y+51, r26	; 0x33
    67a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    67a2:	69 a9       	ldd	r22, Y+49	; 0x31
    67a4:	7a a9       	ldd	r23, Y+50	; 0x32
    67a6:	8b a9       	ldd	r24, Y+51	; 0x33
    67a8:	9c a9       	ldd	r25, Y+52	; 0x34
    67aa:	20 e0       	ldi	r18, 0x00	; 0
    67ac:	30 e0       	ldi	r19, 0x00	; 0
    67ae:	40 e8       	ldi	r20, 0x80	; 128
    67b0:	5f e3       	ldi	r21, 0x3F	; 63
    67b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    67b6:	88 23       	and	r24, r24
    67b8:	2c f4       	brge	.+10     	; 0x67c4 <Logout_Request_Handler+0x78>
		__ticks = 1;
    67ba:	81 e0       	ldi	r24, 0x01	; 1
    67bc:	90 e0       	ldi	r25, 0x00	; 0
    67be:	98 ab       	std	Y+48, r25	; 0x30
    67c0:	8f a7       	std	Y+47, r24	; 0x2f
    67c2:	3f c0       	rjmp	.+126    	; 0x6842 <Logout_Request_Handler+0xf6>
	else if (__tmp > 65535)
    67c4:	69 a9       	ldd	r22, Y+49	; 0x31
    67c6:	7a a9       	ldd	r23, Y+50	; 0x32
    67c8:	8b a9       	ldd	r24, Y+51	; 0x33
    67ca:	9c a9       	ldd	r25, Y+52	; 0x34
    67cc:	20 e0       	ldi	r18, 0x00	; 0
    67ce:	3f ef       	ldi	r19, 0xFF	; 255
    67d0:	4f e7       	ldi	r20, 0x7F	; 127
    67d2:	57 e4       	ldi	r21, 0x47	; 71
    67d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    67d8:	18 16       	cp	r1, r24
    67da:	4c f5       	brge	.+82     	; 0x682e <Logout_Request_Handler+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    67dc:	6d a9       	ldd	r22, Y+53	; 0x35
    67de:	7e a9       	ldd	r23, Y+54	; 0x36
    67e0:	8f a9       	ldd	r24, Y+55	; 0x37
    67e2:	98 ad       	ldd	r25, Y+56	; 0x38
    67e4:	20 e0       	ldi	r18, 0x00	; 0
    67e6:	30 e0       	ldi	r19, 0x00	; 0
    67e8:	40 e2       	ldi	r20, 0x20	; 32
    67ea:	51 e4       	ldi	r21, 0x41	; 65
    67ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67f0:	dc 01       	movw	r26, r24
    67f2:	cb 01       	movw	r24, r22
    67f4:	bc 01       	movw	r22, r24
    67f6:	cd 01       	movw	r24, r26
    67f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67fc:	dc 01       	movw	r26, r24
    67fe:	cb 01       	movw	r24, r22
    6800:	98 ab       	std	Y+48, r25	; 0x30
    6802:	8f a7       	std	Y+47, r24	; 0x2f
    6804:	0f c0       	rjmp	.+30     	; 0x6824 <Logout_Request_Handler+0xd8>
    6806:	80 e9       	ldi	r24, 0x90	; 144
    6808:	91 e0       	ldi	r25, 0x01	; 1
    680a:	9e a7       	std	Y+46, r25	; 0x2e
    680c:	8d a7       	std	Y+45, r24	; 0x2d
    680e:	8d a5       	ldd	r24, Y+45	; 0x2d
    6810:	9e a5       	ldd	r25, Y+46	; 0x2e
    6812:	01 97       	sbiw	r24, 0x01	; 1
    6814:	f1 f7       	brne	.-4      	; 0x6812 <Logout_Request_Handler+0xc6>
    6816:	9e a7       	std	Y+46, r25	; 0x2e
    6818:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    681a:	8f a5       	ldd	r24, Y+47	; 0x2f
    681c:	98 a9       	ldd	r25, Y+48	; 0x30
    681e:	01 97       	sbiw	r24, 0x01	; 1
    6820:	98 ab       	std	Y+48, r25	; 0x30
    6822:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6824:	8f a5       	ldd	r24, Y+47	; 0x2f
    6826:	98 a9       	ldd	r25, Y+48	; 0x30
    6828:	00 97       	sbiw	r24, 0x00	; 0
    682a:	69 f7       	brne	.-38     	; 0x6806 <Logout_Request_Handler+0xba>
    682c:	14 c0       	rjmp	.+40     	; 0x6856 <Logout_Request_Handler+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    682e:	69 a9       	ldd	r22, Y+49	; 0x31
    6830:	7a a9       	ldd	r23, Y+50	; 0x32
    6832:	8b a9       	ldd	r24, Y+51	; 0x33
    6834:	9c a9       	ldd	r25, Y+52	; 0x34
    6836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    683a:	dc 01       	movw	r26, r24
    683c:	cb 01       	movw	r24, r22
    683e:	98 ab       	std	Y+48, r25	; 0x30
    6840:	8f a7       	std	Y+47, r24	; 0x2f
    6842:	8f a5       	ldd	r24, Y+47	; 0x2f
    6844:	98 a9       	ldd	r25, Y+48	; 0x30
    6846:	9c a7       	std	Y+44, r25	; 0x2c
    6848:	8b a7       	std	Y+43, r24	; 0x2b
    684a:	8b a5       	ldd	r24, Y+43	; 0x2b
    684c:	9c a5       	ldd	r25, Y+44	; 0x2c
    684e:	01 97       	sbiw	r24, 0x01	; 1
    6850:	f1 f7       	brne	.-4      	; 0x684e <Logout_Request_Handler+0x102>
    6852:	9c a7       	std	Y+44, r25	; 0x2c
    6854:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(200);
		H_LCD_void_sendString(" System Logout Requested... ");
    6856:	8c e5       	ldi	r24, 0x5C	; 92
    6858:	92 e0       	ldi	r25, 0x02	; 2
    685a:	0e 94 2f 2a 	call	0x545e	; 0x545e <H_LCD_void_sendString>
    685e:	80 e0       	ldi	r24, 0x00	; 0
    6860:	90 e8       	ldi	r25, 0x80	; 128
    6862:	ab e3       	ldi	r26, 0x3B	; 59
    6864:	b5 e4       	ldi	r27, 0x45	; 69
    6866:	8f a3       	std	Y+39, r24	; 0x27
    6868:	98 a7       	std	Y+40, r25	; 0x28
    686a:	a9 a7       	std	Y+41, r26	; 0x29
    686c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    686e:	6f a1       	ldd	r22, Y+39	; 0x27
    6870:	78 a5       	ldd	r23, Y+40	; 0x28
    6872:	89 a5       	ldd	r24, Y+41	; 0x29
    6874:	9a a5       	ldd	r25, Y+42	; 0x2a
    6876:	20 e0       	ldi	r18, 0x00	; 0
    6878:	30 e0       	ldi	r19, 0x00	; 0
    687a:	4a e7       	ldi	r20, 0x7A	; 122
    687c:	55 e4       	ldi	r21, 0x45	; 69
    687e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6882:	dc 01       	movw	r26, r24
    6884:	cb 01       	movw	r24, r22
    6886:	8b a3       	std	Y+35, r24	; 0x23
    6888:	9c a3       	std	Y+36, r25	; 0x24
    688a:	ad a3       	std	Y+37, r26	; 0x25
    688c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    688e:	6b a1       	ldd	r22, Y+35	; 0x23
    6890:	7c a1       	ldd	r23, Y+36	; 0x24
    6892:	8d a1       	ldd	r24, Y+37	; 0x25
    6894:	9e a1       	ldd	r25, Y+38	; 0x26
    6896:	20 e0       	ldi	r18, 0x00	; 0
    6898:	30 e0       	ldi	r19, 0x00	; 0
    689a:	40 e8       	ldi	r20, 0x80	; 128
    689c:	5f e3       	ldi	r21, 0x3F	; 63
    689e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    68a2:	88 23       	and	r24, r24
    68a4:	2c f4       	brge	.+10     	; 0x68b0 <Logout_Request_Handler+0x164>
		__ticks = 1;
    68a6:	81 e0       	ldi	r24, 0x01	; 1
    68a8:	90 e0       	ldi	r25, 0x00	; 0
    68aa:	9a a3       	std	Y+34, r25	; 0x22
    68ac:	89 a3       	std	Y+33, r24	; 0x21
    68ae:	3f c0       	rjmp	.+126    	; 0x692e <Logout_Request_Handler+0x1e2>
	else if (__tmp > 65535)
    68b0:	6b a1       	ldd	r22, Y+35	; 0x23
    68b2:	7c a1       	ldd	r23, Y+36	; 0x24
    68b4:	8d a1       	ldd	r24, Y+37	; 0x25
    68b6:	9e a1       	ldd	r25, Y+38	; 0x26
    68b8:	20 e0       	ldi	r18, 0x00	; 0
    68ba:	3f ef       	ldi	r19, 0xFF	; 255
    68bc:	4f e7       	ldi	r20, 0x7F	; 127
    68be:	57 e4       	ldi	r21, 0x47	; 71
    68c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    68c4:	18 16       	cp	r1, r24
    68c6:	4c f5       	brge	.+82     	; 0x691a <Logout_Request_Handler+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68c8:	6f a1       	ldd	r22, Y+39	; 0x27
    68ca:	78 a5       	ldd	r23, Y+40	; 0x28
    68cc:	89 a5       	ldd	r24, Y+41	; 0x29
    68ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    68d0:	20 e0       	ldi	r18, 0x00	; 0
    68d2:	30 e0       	ldi	r19, 0x00	; 0
    68d4:	40 e2       	ldi	r20, 0x20	; 32
    68d6:	51 e4       	ldi	r21, 0x41	; 65
    68d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68dc:	dc 01       	movw	r26, r24
    68de:	cb 01       	movw	r24, r22
    68e0:	bc 01       	movw	r22, r24
    68e2:	cd 01       	movw	r24, r26
    68e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68e8:	dc 01       	movw	r26, r24
    68ea:	cb 01       	movw	r24, r22
    68ec:	9a a3       	std	Y+34, r25	; 0x22
    68ee:	89 a3       	std	Y+33, r24	; 0x21
    68f0:	0f c0       	rjmp	.+30     	; 0x6910 <Logout_Request_Handler+0x1c4>
    68f2:	80 e9       	ldi	r24, 0x90	; 144
    68f4:	91 e0       	ldi	r25, 0x01	; 1
    68f6:	98 a3       	std	Y+32, r25	; 0x20
    68f8:	8f 8f       	std	Y+31, r24	; 0x1f
    68fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    68fc:	98 a1       	ldd	r25, Y+32	; 0x20
    68fe:	01 97       	sbiw	r24, 0x01	; 1
    6900:	f1 f7       	brne	.-4      	; 0x68fe <Logout_Request_Handler+0x1b2>
    6902:	98 a3       	std	Y+32, r25	; 0x20
    6904:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6906:	89 a1       	ldd	r24, Y+33	; 0x21
    6908:	9a a1       	ldd	r25, Y+34	; 0x22
    690a:	01 97       	sbiw	r24, 0x01	; 1
    690c:	9a a3       	std	Y+34, r25	; 0x22
    690e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6910:	89 a1       	ldd	r24, Y+33	; 0x21
    6912:	9a a1       	ldd	r25, Y+34	; 0x22
    6914:	00 97       	sbiw	r24, 0x00	; 0
    6916:	69 f7       	brne	.-38     	; 0x68f2 <Logout_Request_Handler+0x1a6>
    6918:	14 c0       	rjmp	.+40     	; 0x6942 <Logout_Request_Handler+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    691a:	6b a1       	ldd	r22, Y+35	; 0x23
    691c:	7c a1       	ldd	r23, Y+36	; 0x24
    691e:	8d a1       	ldd	r24, Y+37	; 0x25
    6920:	9e a1       	ldd	r25, Y+38	; 0x26
    6922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6926:	dc 01       	movw	r26, r24
    6928:	cb 01       	movw	r24, r22
    692a:	9a a3       	std	Y+34, r25	; 0x22
    692c:	89 a3       	std	Y+33, r24	; 0x21
    692e:	89 a1       	ldd	r24, Y+33	; 0x21
    6930:	9a a1       	ldd	r25, Y+34	; 0x22
    6932:	9e 8f       	std	Y+30, r25	; 0x1e
    6934:	8d 8f       	std	Y+29, r24	; 0x1d
    6936:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6938:	9e 8d       	ldd	r25, Y+30	; 0x1e
    693a:	01 97       	sbiw	r24, 0x01	; 1
    693c:	f1 f7       	brne	.-4      	; 0x693a <Logout_Request_Handler+0x1ee>
    693e:	9e 8f       	std	Y+30, r25	; 0x1e
    6940:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(3000);
		H_LCD_void_Clear_Display();
    6942:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <H_LCD_void_Clear_Display>
		UART_sendString("AT+CIPCLOSE=1\r\n");
    6946:	89 e7       	ldi	r24, 0x79	; 121
    6948:	92 e0       	ldi	r25, 0x02	; 2
    694a:	0e 94 66 07 	call	0xecc	; 0xecc <UART_sendString>
		H_LCD_void_sendString(" Wifi Closed ... ");
    694e:	89 e8       	ldi	r24, 0x89	; 137
    6950:	92 e0       	ldi	r25, 0x02	; 2
    6952:	0e 94 2f 2a 	call	0x545e	; 0x545e <H_LCD_void_sendString>
    6956:	80 e0       	ldi	r24, 0x00	; 0
    6958:	90 e8       	ldi	r25, 0x80	; 128
    695a:	ab e3       	ldi	r26, 0x3B	; 59
    695c:	b5 e4       	ldi	r27, 0x45	; 69
    695e:	89 8f       	std	Y+25, r24	; 0x19
    6960:	9a 8f       	std	Y+26, r25	; 0x1a
    6962:	ab 8f       	std	Y+27, r26	; 0x1b
    6964:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6966:	69 8d       	ldd	r22, Y+25	; 0x19
    6968:	7a 8d       	ldd	r23, Y+26	; 0x1a
    696a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    696c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    696e:	20 e0       	ldi	r18, 0x00	; 0
    6970:	30 e0       	ldi	r19, 0x00	; 0
    6972:	4a e7       	ldi	r20, 0x7A	; 122
    6974:	55 e4       	ldi	r21, 0x45	; 69
    6976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    697a:	dc 01       	movw	r26, r24
    697c:	cb 01       	movw	r24, r22
    697e:	8d 8b       	std	Y+21, r24	; 0x15
    6980:	9e 8b       	std	Y+22, r25	; 0x16
    6982:	af 8b       	std	Y+23, r26	; 0x17
    6984:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6986:	6d 89       	ldd	r22, Y+21	; 0x15
    6988:	7e 89       	ldd	r23, Y+22	; 0x16
    698a:	8f 89       	ldd	r24, Y+23	; 0x17
    698c:	98 8d       	ldd	r25, Y+24	; 0x18
    698e:	20 e0       	ldi	r18, 0x00	; 0
    6990:	30 e0       	ldi	r19, 0x00	; 0
    6992:	40 e8       	ldi	r20, 0x80	; 128
    6994:	5f e3       	ldi	r21, 0x3F	; 63
    6996:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    699a:	88 23       	and	r24, r24
    699c:	2c f4       	brge	.+10     	; 0x69a8 <Logout_Request_Handler+0x25c>
		__ticks = 1;
    699e:	81 e0       	ldi	r24, 0x01	; 1
    69a0:	90 e0       	ldi	r25, 0x00	; 0
    69a2:	9c 8b       	std	Y+20, r25	; 0x14
    69a4:	8b 8b       	std	Y+19, r24	; 0x13
    69a6:	3f c0       	rjmp	.+126    	; 0x6a26 <Logout_Request_Handler+0x2da>
	else if (__tmp > 65535)
    69a8:	6d 89       	ldd	r22, Y+21	; 0x15
    69aa:	7e 89       	ldd	r23, Y+22	; 0x16
    69ac:	8f 89       	ldd	r24, Y+23	; 0x17
    69ae:	98 8d       	ldd	r25, Y+24	; 0x18
    69b0:	20 e0       	ldi	r18, 0x00	; 0
    69b2:	3f ef       	ldi	r19, 0xFF	; 255
    69b4:	4f e7       	ldi	r20, 0x7F	; 127
    69b6:	57 e4       	ldi	r21, 0x47	; 71
    69b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    69bc:	18 16       	cp	r1, r24
    69be:	4c f5       	brge	.+82     	; 0x6a12 <Logout_Request_Handler+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69c0:	69 8d       	ldd	r22, Y+25	; 0x19
    69c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    69c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    69c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    69c8:	20 e0       	ldi	r18, 0x00	; 0
    69ca:	30 e0       	ldi	r19, 0x00	; 0
    69cc:	40 e2       	ldi	r20, 0x20	; 32
    69ce:	51 e4       	ldi	r21, 0x41	; 65
    69d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69d4:	dc 01       	movw	r26, r24
    69d6:	cb 01       	movw	r24, r22
    69d8:	bc 01       	movw	r22, r24
    69da:	cd 01       	movw	r24, r26
    69dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69e0:	dc 01       	movw	r26, r24
    69e2:	cb 01       	movw	r24, r22
    69e4:	9c 8b       	std	Y+20, r25	; 0x14
    69e6:	8b 8b       	std	Y+19, r24	; 0x13
    69e8:	0f c0       	rjmp	.+30     	; 0x6a08 <Logout_Request_Handler+0x2bc>
    69ea:	80 e9       	ldi	r24, 0x90	; 144
    69ec:	91 e0       	ldi	r25, 0x01	; 1
    69ee:	9a 8b       	std	Y+18, r25	; 0x12
    69f0:	89 8b       	std	Y+17, r24	; 0x11
    69f2:	89 89       	ldd	r24, Y+17	; 0x11
    69f4:	9a 89       	ldd	r25, Y+18	; 0x12
    69f6:	01 97       	sbiw	r24, 0x01	; 1
    69f8:	f1 f7       	brne	.-4      	; 0x69f6 <Logout_Request_Handler+0x2aa>
    69fa:	9a 8b       	std	Y+18, r25	; 0x12
    69fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69fe:	8b 89       	ldd	r24, Y+19	; 0x13
    6a00:	9c 89       	ldd	r25, Y+20	; 0x14
    6a02:	01 97       	sbiw	r24, 0x01	; 1
    6a04:	9c 8b       	std	Y+20, r25	; 0x14
    6a06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a08:	8b 89       	ldd	r24, Y+19	; 0x13
    6a0a:	9c 89       	ldd	r25, Y+20	; 0x14
    6a0c:	00 97       	sbiw	r24, 0x00	; 0
    6a0e:	69 f7       	brne	.-38     	; 0x69ea <Logout_Request_Handler+0x29e>
    6a10:	14 c0       	rjmp	.+40     	; 0x6a3a <Logout_Request_Handler+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a12:	6d 89       	ldd	r22, Y+21	; 0x15
    6a14:	7e 89       	ldd	r23, Y+22	; 0x16
    6a16:	8f 89       	ldd	r24, Y+23	; 0x17
    6a18:	98 8d       	ldd	r25, Y+24	; 0x18
    6a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a1e:	dc 01       	movw	r26, r24
    6a20:	cb 01       	movw	r24, r22
    6a22:	9c 8b       	std	Y+20, r25	; 0x14
    6a24:	8b 8b       	std	Y+19, r24	; 0x13
    6a26:	8b 89       	ldd	r24, Y+19	; 0x13
    6a28:	9c 89       	ldd	r25, Y+20	; 0x14
    6a2a:	98 8b       	std	Y+16, r25	; 0x10
    6a2c:	8f 87       	std	Y+15, r24	; 0x0f
    6a2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a30:	98 89       	ldd	r25, Y+16	; 0x10
    6a32:	01 97       	sbiw	r24, 0x01	; 1
    6a34:	f1 f7       	brne	.-4      	; 0x6a32 <Logout_Request_Handler+0x2e6>
    6a36:	98 8b       	std	Y+16, r25	; 0x10
    6a38:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3000);
		H_LCD_void_Clear_Display();
    6a3a:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <H_LCD_void_Clear_Display>
    6a3e:	80 e0       	ldi	r24, 0x00	; 0
    6a40:	90 e0       	ldi	r25, 0x00	; 0
    6a42:	a8 e4       	ldi	r26, 0x48	; 72
    6a44:	b3 e4       	ldi	r27, 0x43	; 67
    6a46:	8b 87       	std	Y+11, r24	; 0x0b
    6a48:	9c 87       	std	Y+12, r25	; 0x0c
    6a4a:	ad 87       	std	Y+13, r26	; 0x0d
    6a4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a50:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a52:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a56:	20 e0       	ldi	r18, 0x00	; 0
    6a58:	30 e0       	ldi	r19, 0x00	; 0
    6a5a:	4a e7       	ldi	r20, 0x7A	; 122
    6a5c:	55 e4       	ldi	r21, 0x45	; 69
    6a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a62:	dc 01       	movw	r26, r24
    6a64:	cb 01       	movw	r24, r22
    6a66:	8f 83       	std	Y+7, r24	; 0x07
    6a68:	98 87       	std	Y+8, r25	; 0x08
    6a6a:	a9 87       	std	Y+9, r26	; 0x09
    6a6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    6a70:	78 85       	ldd	r23, Y+8	; 0x08
    6a72:	89 85       	ldd	r24, Y+9	; 0x09
    6a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a76:	20 e0       	ldi	r18, 0x00	; 0
    6a78:	30 e0       	ldi	r19, 0x00	; 0
    6a7a:	40 e8       	ldi	r20, 0x80	; 128
    6a7c:	5f e3       	ldi	r21, 0x3F	; 63
    6a7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a82:	88 23       	and	r24, r24
    6a84:	2c f4       	brge	.+10     	; 0x6a90 <Logout_Request_Handler+0x344>
		__ticks = 1;
    6a86:	81 e0       	ldi	r24, 0x01	; 1
    6a88:	90 e0       	ldi	r25, 0x00	; 0
    6a8a:	9e 83       	std	Y+6, r25	; 0x06
    6a8c:	8d 83       	std	Y+5, r24	; 0x05
    6a8e:	3f c0       	rjmp	.+126    	; 0x6b0e <Logout_Request_Handler+0x3c2>
	else if (__tmp > 65535)
    6a90:	6f 81       	ldd	r22, Y+7	; 0x07
    6a92:	78 85       	ldd	r23, Y+8	; 0x08
    6a94:	89 85       	ldd	r24, Y+9	; 0x09
    6a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a98:	20 e0       	ldi	r18, 0x00	; 0
    6a9a:	3f ef       	ldi	r19, 0xFF	; 255
    6a9c:	4f e7       	ldi	r20, 0x7F	; 127
    6a9e:	57 e4       	ldi	r21, 0x47	; 71
    6aa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6aa4:	18 16       	cp	r1, r24
    6aa6:	4c f5       	brge	.+82     	; 0x6afa <Logout_Request_Handler+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    6aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    6aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    6aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ab0:	20 e0       	ldi	r18, 0x00	; 0
    6ab2:	30 e0       	ldi	r19, 0x00	; 0
    6ab4:	40 e2       	ldi	r20, 0x20	; 32
    6ab6:	51 e4       	ldi	r21, 0x41	; 65
    6ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6abc:	dc 01       	movw	r26, r24
    6abe:	cb 01       	movw	r24, r22
    6ac0:	bc 01       	movw	r22, r24
    6ac2:	cd 01       	movw	r24, r26
    6ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ac8:	dc 01       	movw	r26, r24
    6aca:	cb 01       	movw	r24, r22
    6acc:	9e 83       	std	Y+6, r25	; 0x06
    6ace:	8d 83       	std	Y+5, r24	; 0x05
    6ad0:	0f c0       	rjmp	.+30     	; 0x6af0 <Logout_Request_Handler+0x3a4>
    6ad2:	80 e9       	ldi	r24, 0x90	; 144
    6ad4:	91 e0       	ldi	r25, 0x01	; 1
    6ad6:	9c 83       	std	Y+4, r25	; 0x04
    6ad8:	8b 83       	std	Y+3, r24	; 0x03
    6ada:	8b 81       	ldd	r24, Y+3	; 0x03
    6adc:	9c 81       	ldd	r25, Y+4	; 0x04
    6ade:	01 97       	sbiw	r24, 0x01	; 1
    6ae0:	f1 f7       	brne	.-4      	; 0x6ade <Logout_Request_Handler+0x392>
    6ae2:	9c 83       	std	Y+4, r25	; 0x04
    6ae4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    6ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    6aea:	01 97       	sbiw	r24, 0x01	; 1
    6aec:	9e 83       	std	Y+6, r25	; 0x06
    6aee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6af0:	8d 81       	ldd	r24, Y+5	; 0x05
    6af2:	9e 81       	ldd	r25, Y+6	; 0x06
    6af4:	00 97       	sbiw	r24, 0x00	; 0
    6af6:	69 f7       	brne	.-38     	; 0x6ad2 <Logout_Request_Handler+0x386>
    6af8:	14 c0       	rjmp	.+40     	; 0x6b22 <Logout_Request_Handler+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6afa:	6f 81       	ldd	r22, Y+7	; 0x07
    6afc:	78 85       	ldd	r23, Y+8	; 0x08
    6afe:	89 85       	ldd	r24, Y+9	; 0x09
    6b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b06:	dc 01       	movw	r26, r24
    6b08:	cb 01       	movw	r24, r22
    6b0a:	9e 83       	std	Y+6, r25	; 0x06
    6b0c:	8d 83       	std	Y+5, r24	; 0x05
    6b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    6b10:	9e 81       	ldd	r25, Y+6	; 0x06
    6b12:	9a 83       	std	Y+2, r25	; 0x02
    6b14:	89 83       	std	Y+1, r24	; 0x01
    6b16:	89 81       	ldd	r24, Y+1	; 0x01
    6b18:	9a 81       	ldd	r25, Y+2	; 0x02
    6b1a:	01 97       	sbiw	r24, 0x01	; 1
    6b1c:	f1 f7       	brne	.-4      	; 0x6b1a <Logout_Request_Handler+0x3ce>
    6b1e:	9a 83       	std	Y+2, r25	; 0x02
    6b20:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		
		Motor_State_Flag = 0;
    6b22:	10 92 67 06 	sts	0x0667, r1
		LED_State_Flag =0;
    6b26:	10 92 7d 06 	sts	0x067D, r1
		MOTOR_ON(MOTOR_CW , 0);
    6b2a:	81 e0       	ldi	r24, 0x01	; 1
    6b2c:	60 e0       	ldi	r22, 0x00	; 0
    6b2e:	0e 94 23 2c 	call	0x5846	; 0x5846 <MOTOR_ON>
		M_TIMER1_void_Stop();
    6b32:	0e 94 bb 09 	call	0x1376	; 0x1376 <M_TIMER1_void_Stop>
		Check_Login_Sucsess();
    6b36:	0e 94 25 31 	call	0x624a	; 0x624a <Check_Login_Sucsess>
		
	}
	
    6b3a:	e8 96       	adiw	r28, 0x38	; 56
    6b3c:	0f b6       	in	r0, 0x3f	; 63
    6b3e:	f8 94       	cli
    6b40:	de bf       	out	0x3e, r29	; 62
    6b42:	0f be       	out	0x3f, r0	; 63
    6b44:	cd bf       	out	0x3d, r28	; 61
    6b46:	cf 91       	pop	r28
    6b48:	df 91       	pop	r29
    6b4a:	08 95       	ret

00006b4c <__mulsi3>:
    6b4c:	62 9f       	mul	r22, r18
    6b4e:	d0 01       	movw	r26, r0
    6b50:	73 9f       	mul	r23, r19
    6b52:	f0 01       	movw	r30, r0
    6b54:	82 9f       	mul	r24, r18
    6b56:	e0 0d       	add	r30, r0
    6b58:	f1 1d       	adc	r31, r1
    6b5a:	64 9f       	mul	r22, r20
    6b5c:	e0 0d       	add	r30, r0
    6b5e:	f1 1d       	adc	r31, r1
    6b60:	92 9f       	mul	r25, r18
    6b62:	f0 0d       	add	r31, r0
    6b64:	83 9f       	mul	r24, r19
    6b66:	f0 0d       	add	r31, r0
    6b68:	74 9f       	mul	r23, r20
    6b6a:	f0 0d       	add	r31, r0
    6b6c:	65 9f       	mul	r22, r21
    6b6e:	f0 0d       	add	r31, r0
    6b70:	99 27       	eor	r25, r25
    6b72:	72 9f       	mul	r23, r18
    6b74:	b0 0d       	add	r27, r0
    6b76:	e1 1d       	adc	r30, r1
    6b78:	f9 1f       	adc	r31, r25
    6b7a:	63 9f       	mul	r22, r19
    6b7c:	b0 0d       	add	r27, r0
    6b7e:	e1 1d       	adc	r30, r1
    6b80:	f9 1f       	adc	r31, r25
    6b82:	bd 01       	movw	r22, r26
    6b84:	cf 01       	movw	r24, r30
    6b86:	11 24       	eor	r1, r1
    6b88:	08 95       	ret

00006b8a <__udivmodqi4>:
    6b8a:	99 1b       	sub	r25, r25
    6b8c:	79 e0       	ldi	r23, 0x09	; 9
    6b8e:	04 c0       	rjmp	.+8      	; 0x6b98 <__udivmodqi4_ep>

00006b90 <__udivmodqi4_loop>:
    6b90:	99 1f       	adc	r25, r25
    6b92:	96 17       	cp	r25, r22
    6b94:	08 f0       	brcs	.+2      	; 0x6b98 <__udivmodqi4_ep>
    6b96:	96 1b       	sub	r25, r22

00006b98 <__udivmodqi4_ep>:
    6b98:	88 1f       	adc	r24, r24
    6b9a:	7a 95       	dec	r23
    6b9c:	c9 f7       	brne	.-14     	; 0x6b90 <__udivmodqi4_loop>
    6b9e:	80 95       	com	r24
    6ba0:	08 95       	ret

00006ba2 <__udivmodhi4>:
    6ba2:	aa 1b       	sub	r26, r26
    6ba4:	bb 1b       	sub	r27, r27
    6ba6:	51 e1       	ldi	r21, 0x11	; 17
    6ba8:	07 c0       	rjmp	.+14     	; 0x6bb8 <__udivmodhi4_ep>

00006baa <__udivmodhi4_loop>:
    6baa:	aa 1f       	adc	r26, r26
    6bac:	bb 1f       	adc	r27, r27
    6bae:	a6 17       	cp	r26, r22
    6bb0:	b7 07       	cpc	r27, r23
    6bb2:	10 f0       	brcs	.+4      	; 0x6bb8 <__udivmodhi4_ep>
    6bb4:	a6 1b       	sub	r26, r22
    6bb6:	b7 0b       	sbc	r27, r23

00006bb8 <__udivmodhi4_ep>:
    6bb8:	88 1f       	adc	r24, r24
    6bba:	99 1f       	adc	r25, r25
    6bbc:	5a 95       	dec	r21
    6bbe:	a9 f7       	brne	.-22     	; 0x6baa <__udivmodhi4_loop>
    6bc0:	80 95       	com	r24
    6bc2:	90 95       	com	r25
    6bc4:	bc 01       	movw	r22, r24
    6bc6:	cd 01       	movw	r24, r26
    6bc8:	08 95       	ret

00006bca <__divmodhi4>:
    6bca:	97 fb       	bst	r25, 7
    6bcc:	09 2e       	mov	r0, r25
    6bce:	07 26       	eor	r0, r23
    6bd0:	0a d0       	rcall	.+20     	; 0x6be6 <__divmodhi4_neg1>
    6bd2:	77 fd       	sbrc	r23, 7
    6bd4:	04 d0       	rcall	.+8      	; 0x6bde <__divmodhi4_neg2>
    6bd6:	e5 df       	rcall	.-54     	; 0x6ba2 <__udivmodhi4>
    6bd8:	06 d0       	rcall	.+12     	; 0x6be6 <__divmodhi4_neg1>
    6bda:	00 20       	and	r0, r0
    6bdc:	1a f4       	brpl	.+6      	; 0x6be4 <__divmodhi4_exit>

00006bde <__divmodhi4_neg2>:
    6bde:	70 95       	com	r23
    6be0:	61 95       	neg	r22
    6be2:	7f 4f       	sbci	r23, 0xFF	; 255

00006be4 <__divmodhi4_exit>:
    6be4:	08 95       	ret

00006be6 <__divmodhi4_neg1>:
    6be6:	f6 f7       	brtc	.-4      	; 0x6be4 <__divmodhi4_exit>
    6be8:	90 95       	com	r25
    6bea:	81 95       	neg	r24
    6bec:	9f 4f       	sbci	r25, 0xFF	; 255
    6bee:	08 95       	ret

00006bf0 <__udivmodsi4>:
    6bf0:	a1 e2       	ldi	r26, 0x21	; 33
    6bf2:	1a 2e       	mov	r1, r26
    6bf4:	aa 1b       	sub	r26, r26
    6bf6:	bb 1b       	sub	r27, r27
    6bf8:	fd 01       	movw	r30, r26
    6bfa:	0d c0       	rjmp	.+26     	; 0x6c16 <__udivmodsi4_ep>

00006bfc <__udivmodsi4_loop>:
    6bfc:	aa 1f       	adc	r26, r26
    6bfe:	bb 1f       	adc	r27, r27
    6c00:	ee 1f       	adc	r30, r30
    6c02:	ff 1f       	adc	r31, r31
    6c04:	a2 17       	cp	r26, r18
    6c06:	b3 07       	cpc	r27, r19
    6c08:	e4 07       	cpc	r30, r20
    6c0a:	f5 07       	cpc	r31, r21
    6c0c:	20 f0       	brcs	.+8      	; 0x6c16 <__udivmodsi4_ep>
    6c0e:	a2 1b       	sub	r26, r18
    6c10:	b3 0b       	sbc	r27, r19
    6c12:	e4 0b       	sbc	r30, r20
    6c14:	f5 0b       	sbc	r31, r21

00006c16 <__udivmodsi4_ep>:
    6c16:	66 1f       	adc	r22, r22
    6c18:	77 1f       	adc	r23, r23
    6c1a:	88 1f       	adc	r24, r24
    6c1c:	99 1f       	adc	r25, r25
    6c1e:	1a 94       	dec	r1
    6c20:	69 f7       	brne	.-38     	; 0x6bfc <__udivmodsi4_loop>
    6c22:	60 95       	com	r22
    6c24:	70 95       	com	r23
    6c26:	80 95       	com	r24
    6c28:	90 95       	com	r25
    6c2a:	9b 01       	movw	r18, r22
    6c2c:	ac 01       	movw	r20, r24
    6c2e:	bd 01       	movw	r22, r26
    6c30:	cf 01       	movw	r24, r30
    6c32:	08 95       	ret

00006c34 <__divmodsi4>:
    6c34:	97 fb       	bst	r25, 7
    6c36:	09 2e       	mov	r0, r25
    6c38:	05 26       	eor	r0, r21
    6c3a:	0e d0       	rcall	.+28     	; 0x6c58 <__divmodsi4_neg1>
    6c3c:	57 fd       	sbrc	r21, 7
    6c3e:	04 d0       	rcall	.+8      	; 0x6c48 <__divmodsi4_neg2>
    6c40:	d7 df       	rcall	.-82     	; 0x6bf0 <__udivmodsi4>
    6c42:	0a d0       	rcall	.+20     	; 0x6c58 <__divmodsi4_neg1>
    6c44:	00 1c       	adc	r0, r0
    6c46:	38 f4       	brcc	.+14     	; 0x6c56 <__divmodsi4_exit>

00006c48 <__divmodsi4_neg2>:
    6c48:	50 95       	com	r21
    6c4a:	40 95       	com	r20
    6c4c:	30 95       	com	r19
    6c4e:	21 95       	neg	r18
    6c50:	3f 4f       	sbci	r19, 0xFF	; 255
    6c52:	4f 4f       	sbci	r20, 0xFF	; 255
    6c54:	5f 4f       	sbci	r21, 0xFF	; 255

00006c56 <__divmodsi4_exit>:
    6c56:	08 95       	ret

00006c58 <__divmodsi4_neg1>:
    6c58:	f6 f7       	brtc	.-4      	; 0x6c56 <__divmodsi4_exit>
    6c5a:	90 95       	com	r25
    6c5c:	80 95       	com	r24
    6c5e:	70 95       	com	r23
    6c60:	61 95       	neg	r22
    6c62:	7f 4f       	sbci	r23, 0xFF	; 255
    6c64:	8f 4f       	sbci	r24, 0xFF	; 255
    6c66:	9f 4f       	sbci	r25, 0xFF	; 255
    6c68:	08 95       	ret

00006c6a <__prologue_saves__>:
    6c6a:	2f 92       	push	r2
    6c6c:	3f 92       	push	r3
    6c6e:	4f 92       	push	r4
    6c70:	5f 92       	push	r5
    6c72:	6f 92       	push	r6
    6c74:	7f 92       	push	r7
    6c76:	8f 92       	push	r8
    6c78:	9f 92       	push	r9
    6c7a:	af 92       	push	r10
    6c7c:	bf 92       	push	r11
    6c7e:	cf 92       	push	r12
    6c80:	df 92       	push	r13
    6c82:	ef 92       	push	r14
    6c84:	ff 92       	push	r15
    6c86:	0f 93       	push	r16
    6c88:	1f 93       	push	r17
    6c8a:	cf 93       	push	r28
    6c8c:	df 93       	push	r29
    6c8e:	cd b7       	in	r28, 0x3d	; 61
    6c90:	de b7       	in	r29, 0x3e	; 62
    6c92:	ca 1b       	sub	r28, r26
    6c94:	db 0b       	sbc	r29, r27
    6c96:	0f b6       	in	r0, 0x3f	; 63
    6c98:	f8 94       	cli
    6c9a:	de bf       	out	0x3e, r29	; 62
    6c9c:	0f be       	out	0x3f, r0	; 63
    6c9e:	cd bf       	out	0x3d, r28	; 61
    6ca0:	09 94       	ijmp

00006ca2 <__epilogue_restores__>:
    6ca2:	2a 88       	ldd	r2, Y+18	; 0x12
    6ca4:	39 88       	ldd	r3, Y+17	; 0x11
    6ca6:	48 88       	ldd	r4, Y+16	; 0x10
    6ca8:	5f 84       	ldd	r5, Y+15	; 0x0f
    6caa:	6e 84       	ldd	r6, Y+14	; 0x0e
    6cac:	7d 84       	ldd	r7, Y+13	; 0x0d
    6cae:	8c 84       	ldd	r8, Y+12	; 0x0c
    6cb0:	9b 84       	ldd	r9, Y+11	; 0x0b
    6cb2:	aa 84       	ldd	r10, Y+10	; 0x0a
    6cb4:	b9 84       	ldd	r11, Y+9	; 0x09
    6cb6:	c8 84       	ldd	r12, Y+8	; 0x08
    6cb8:	df 80       	ldd	r13, Y+7	; 0x07
    6cba:	ee 80       	ldd	r14, Y+6	; 0x06
    6cbc:	fd 80       	ldd	r15, Y+5	; 0x05
    6cbe:	0c 81       	ldd	r16, Y+4	; 0x04
    6cc0:	1b 81       	ldd	r17, Y+3	; 0x03
    6cc2:	aa 81       	ldd	r26, Y+2	; 0x02
    6cc4:	b9 81       	ldd	r27, Y+1	; 0x01
    6cc6:	ce 0f       	add	r28, r30
    6cc8:	d1 1d       	adc	r29, r1
    6cca:	0f b6       	in	r0, 0x3f	; 63
    6ccc:	f8 94       	cli
    6cce:	de bf       	out	0x3e, r29	; 62
    6cd0:	0f be       	out	0x3f, r0	; 63
    6cd2:	cd bf       	out	0x3d, r28	; 61
    6cd4:	ed 01       	movw	r28, r26
    6cd6:	08 95       	ret

00006cd8 <strchr>:
    6cd8:	fc 01       	movw	r30, r24
    6cda:	81 91       	ld	r24, Z+
    6cdc:	86 17       	cp	r24, r22
    6cde:	21 f0       	breq	.+8      	; 0x6ce8 <strchr+0x10>
    6ce0:	88 23       	and	r24, r24
    6ce2:	d9 f7       	brne	.-10     	; 0x6cda <strchr+0x2>
    6ce4:	99 27       	eor	r25, r25
    6ce6:	08 95       	ret
    6ce8:	31 97       	sbiw	r30, 0x01	; 1
    6cea:	cf 01       	movw	r24, r30
    6cec:	08 95       	ret

00006cee <strlen>:
    6cee:	fc 01       	movw	r30, r24
    6cf0:	01 90       	ld	r0, Z+
    6cf2:	00 20       	and	r0, r0
    6cf4:	e9 f7       	brne	.-6      	; 0x6cf0 <strlen+0x2>
    6cf6:	80 95       	com	r24
    6cf8:	90 95       	com	r25
    6cfa:	8e 0f       	add	r24, r30
    6cfc:	9f 1f       	adc	r25, r31
    6cfe:	08 95       	ret

00006d00 <strstr>:
    6d00:	fb 01       	movw	r30, r22
    6d02:	51 91       	ld	r21, Z+
    6d04:	55 23       	and	r21, r21
    6d06:	a9 f0       	breq	.+42     	; 0x6d32 <strstr+0x32>
    6d08:	bf 01       	movw	r22, r30
    6d0a:	dc 01       	movw	r26, r24
    6d0c:	4d 91       	ld	r20, X+
    6d0e:	45 17       	cp	r20, r21
    6d10:	41 11       	cpse	r20, r1
    6d12:	e1 f7       	brne	.-8      	; 0x6d0c <strstr+0xc>
    6d14:	59 f4       	brne	.+22     	; 0x6d2c <strstr+0x2c>
    6d16:	cd 01       	movw	r24, r26
    6d18:	01 90       	ld	r0, Z+
    6d1a:	00 20       	and	r0, r0
    6d1c:	49 f0       	breq	.+18     	; 0x6d30 <strstr+0x30>
    6d1e:	4d 91       	ld	r20, X+
    6d20:	40 15       	cp	r20, r0
    6d22:	41 11       	cpse	r20, r1
    6d24:	c9 f3       	breq	.-14     	; 0x6d18 <strstr+0x18>
    6d26:	fb 01       	movw	r30, r22
    6d28:	41 11       	cpse	r20, r1
    6d2a:	ef cf       	rjmp	.-34     	; 0x6d0a <strstr+0xa>
    6d2c:	81 e0       	ldi	r24, 0x01	; 1
    6d2e:	90 e0       	ldi	r25, 0x00	; 0
    6d30:	01 97       	sbiw	r24, 0x01	; 1
    6d32:	08 95       	ret

00006d34 <itoa>:
    6d34:	fb 01       	movw	r30, r22
    6d36:	9f 01       	movw	r18, r30
    6d38:	e8 94       	clt
    6d3a:	42 30       	cpi	r20, 0x02	; 2
    6d3c:	c4 f0       	brlt	.+48     	; 0x6d6e <itoa+0x3a>
    6d3e:	45 32       	cpi	r20, 0x25	; 37
    6d40:	b4 f4       	brge	.+44     	; 0x6d6e <itoa+0x3a>
    6d42:	4a 30       	cpi	r20, 0x0A	; 10
    6d44:	29 f4       	brne	.+10     	; 0x6d50 <itoa+0x1c>
    6d46:	97 fb       	bst	r25, 7
    6d48:	1e f4       	brtc	.+6      	; 0x6d50 <itoa+0x1c>
    6d4a:	90 95       	com	r25
    6d4c:	81 95       	neg	r24
    6d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    6d50:	64 2f       	mov	r22, r20
    6d52:	77 27       	eor	r23, r23
    6d54:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <__udivmodhi4>
    6d58:	80 5d       	subi	r24, 0xD0	; 208
    6d5a:	8a 33       	cpi	r24, 0x3A	; 58
    6d5c:	0c f0       	brlt	.+2      	; 0x6d60 <itoa+0x2c>
    6d5e:	89 5d       	subi	r24, 0xD9	; 217
    6d60:	81 93       	st	Z+, r24
    6d62:	cb 01       	movw	r24, r22
    6d64:	00 97       	sbiw	r24, 0x00	; 0
    6d66:	a1 f7       	brne	.-24     	; 0x6d50 <itoa+0x1c>
    6d68:	16 f4       	brtc	.+4      	; 0x6d6e <itoa+0x3a>
    6d6a:	5d e2       	ldi	r21, 0x2D	; 45
    6d6c:	51 93       	st	Z+, r21
    6d6e:	10 82       	st	Z, r1
    6d70:	c9 01       	movw	r24, r18
    6d72:	0c 94 d2 38 	jmp	0x71a4	; 0x71a4 <strrev>

00006d76 <sprintf>:
    6d76:	ae e0       	ldi	r26, 0x0E	; 14
    6d78:	b0 e0       	ldi	r27, 0x00	; 0
    6d7a:	e1 ec       	ldi	r30, 0xC1	; 193
    6d7c:	f6 e3       	ldi	r31, 0x36	; 54
    6d7e:	0c 94 43 36 	jmp	0x6c86	; 0x6c86 <__prologue_saves__+0x1c>
    6d82:	0d 89       	ldd	r16, Y+21	; 0x15
    6d84:	1e 89       	ldd	r17, Y+22	; 0x16
    6d86:	86 e0       	ldi	r24, 0x06	; 6
    6d88:	8c 83       	std	Y+4, r24	; 0x04
    6d8a:	1a 83       	std	Y+2, r17	; 0x02
    6d8c:	09 83       	std	Y+1, r16	; 0x01
    6d8e:	8f ef       	ldi	r24, 0xFF	; 255
    6d90:	9f e7       	ldi	r25, 0x7F	; 127
    6d92:	9e 83       	std	Y+6, r25	; 0x06
    6d94:	8d 83       	std	Y+5, r24	; 0x05
    6d96:	9e 01       	movw	r18, r28
    6d98:	27 5e       	subi	r18, 0xE7	; 231
    6d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d9c:	ce 01       	movw	r24, r28
    6d9e:	01 96       	adiw	r24, 0x01	; 1
    6da0:	6f 89       	ldd	r22, Y+23	; 0x17
    6da2:	78 8d       	ldd	r23, Y+24	; 0x18
    6da4:	a9 01       	movw	r20, r18
    6da6:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <vfprintf>
    6daa:	2f 81       	ldd	r18, Y+7	; 0x07
    6dac:	38 85       	ldd	r19, Y+8	; 0x08
    6dae:	02 0f       	add	r16, r18
    6db0:	13 1f       	adc	r17, r19
    6db2:	f8 01       	movw	r30, r16
    6db4:	10 82       	st	Z, r1
    6db6:	2e 96       	adiw	r28, 0x0e	; 14
    6db8:	e4 e0       	ldi	r30, 0x04	; 4
    6dba:	0c 94 5f 36 	jmp	0x6cbe	; 0x6cbe <__epilogue_restores__+0x1c>

00006dbe <vfprintf>:
    6dbe:	ab e0       	ldi	r26, 0x0B	; 11
    6dc0:	b0 e0       	ldi	r27, 0x00	; 0
    6dc2:	e5 ee       	ldi	r30, 0xE5	; 229
    6dc4:	f6 e3       	ldi	r31, 0x36	; 54
    6dc6:	0c 94 35 36 	jmp	0x6c6a	; 0x6c6a <__prologue_saves__>
    6dca:	3c 01       	movw	r6, r24
    6dcc:	2b 01       	movw	r4, r22
    6dce:	5a 01       	movw	r10, r20
    6dd0:	fc 01       	movw	r30, r24
    6dd2:	17 82       	std	Z+7, r1	; 0x07
    6dd4:	16 82       	std	Z+6, r1	; 0x06
    6dd6:	83 81       	ldd	r24, Z+3	; 0x03
    6dd8:	81 fd       	sbrc	r24, 1
    6dda:	03 c0       	rjmp	.+6      	; 0x6de2 <vfprintf+0x24>
    6ddc:	6f ef       	ldi	r22, 0xFF	; 255
    6dde:	7f ef       	ldi	r23, 0xFF	; 255
    6de0:	c6 c1       	rjmp	.+908    	; 0x716e <vfprintf+0x3b0>
    6de2:	9a e0       	ldi	r25, 0x0A	; 10
    6de4:	89 2e       	mov	r8, r25
    6de6:	1e 01       	movw	r2, r28
    6de8:	08 94       	sec
    6dea:	21 1c       	adc	r2, r1
    6dec:	31 1c       	adc	r3, r1
    6dee:	f3 01       	movw	r30, r6
    6df0:	23 81       	ldd	r18, Z+3	; 0x03
    6df2:	f2 01       	movw	r30, r4
    6df4:	23 fd       	sbrc	r18, 3
    6df6:	85 91       	lpm	r24, Z+
    6df8:	23 ff       	sbrs	r18, 3
    6dfa:	81 91       	ld	r24, Z+
    6dfc:	2f 01       	movw	r4, r30
    6dfe:	88 23       	and	r24, r24
    6e00:	09 f4       	brne	.+2      	; 0x6e04 <vfprintf+0x46>
    6e02:	b2 c1       	rjmp	.+868    	; 0x7168 <vfprintf+0x3aa>
    6e04:	85 32       	cpi	r24, 0x25	; 37
    6e06:	39 f4       	brne	.+14     	; 0x6e16 <vfprintf+0x58>
    6e08:	23 fd       	sbrc	r18, 3
    6e0a:	85 91       	lpm	r24, Z+
    6e0c:	23 ff       	sbrs	r18, 3
    6e0e:	81 91       	ld	r24, Z+
    6e10:	2f 01       	movw	r4, r30
    6e12:	85 32       	cpi	r24, 0x25	; 37
    6e14:	29 f4       	brne	.+10     	; 0x6e20 <vfprintf+0x62>
    6e16:	90 e0       	ldi	r25, 0x00	; 0
    6e18:	b3 01       	movw	r22, r6
    6e1a:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <fputc>
    6e1e:	e7 cf       	rjmp	.-50     	; 0x6dee <vfprintf+0x30>
    6e20:	98 2f       	mov	r25, r24
    6e22:	ff 24       	eor	r15, r15
    6e24:	ee 24       	eor	r14, r14
    6e26:	99 24       	eor	r9, r9
    6e28:	ff e1       	ldi	r31, 0x1F	; 31
    6e2a:	ff 15       	cp	r31, r15
    6e2c:	d0 f0       	brcs	.+52     	; 0x6e62 <vfprintf+0xa4>
    6e2e:	9b 32       	cpi	r25, 0x2B	; 43
    6e30:	69 f0       	breq	.+26     	; 0x6e4c <vfprintf+0x8e>
    6e32:	9c 32       	cpi	r25, 0x2C	; 44
    6e34:	28 f4       	brcc	.+10     	; 0x6e40 <vfprintf+0x82>
    6e36:	90 32       	cpi	r25, 0x20	; 32
    6e38:	59 f0       	breq	.+22     	; 0x6e50 <vfprintf+0x92>
    6e3a:	93 32       	cpi	r25, 0x23	; 35
    6e3c:	91 f4       	brne	.+36     	; 0x6e62 <vfprintf+0xa4>
    6e3e:	0e c0       	rjmp	.+28     	; 0x6e5c <vfprintf+0x9e>
    6e40:	9d 32       	cpi	r25, 0x2D	; 45
    6e42:	49 f0       	breq	.+18     	; 0x6e56 <vfprintf+0x98>
    6e44:	90 33       	cpi	r25, 0x30	; 48
    6e46:	69 f4       	brne	.+26     	; 0x6e62 <vfprintf+0xa4>
    6e48:	41 e0       	ldi	r20, 0x01	; 1
    6e4a:	24 c0       	rjmp	.+72     	; 0x6e94 <vfprintf+0xd6>
    6e4c:	52 e0       	ldi	r21, 0x02	; 2
    6e4e:	f5 2a       	or	r15, r21
    6e50:	84 e0       	ldi	r24, 0x04	; 4
    6e52:	f8 2a       	or	r15, r24
    6e54:	28 c0       	rjmp	.+80     	; 0x6ea6 <vfprintf+0xe8>
    6e56:	98 e0       	ldi	r25, 0x08	; 8
    6e58:	f9 2a       	or	r15, r25
    6e5a:	25 c0       	rjmp	.+74     	; 0x6ea6 <vfprintf+0xe8>
    6e5c:	e0 e1       	ldi	r30, 0x10	; 16
    6e5e:	fe 2a       	or	r15, r30
    6e60:	22 c0       	rjmp	.+68     	; 0x6ea6 <vfprintf+0xe8>
    6e62:	f7 fc       	sbrc	r15, 7
    6e64:	29 c0       	rjmp	.+82     	; 0x6eb8 <vfprintf+0xfa>
    6e66:	89 2f       	mov	r24, r25
    6e68:	80 53       	subi	r24, 0x30	; 48
    6e6a:	8a 30       	cpi	r24, 0x0A	; 10
    6e6c:	70 f4       	brcc	.+28     	; 0x6e8a <vfprintf+0xcc>
    6e6e:	f6 fe       	sbrs	r15, 6
    6e70:	05 c0       	rjmp	.+10     	; 0x6e7c <vfprintf+0xbe>
    6e72:	98 9c       	mul	r9, r8
    6e74:	90 2c       	mov	r9, r0
    6e76:	11 24       	eor	r1, r1
    6e78:	98 0e       	add	r9, r24
    6e7a:	15 c0       	rjmp	.+42     	; 0x6ea6 <vfprintf+0xe8>
    6e7c:	e8 9c       	mul	r14, r8
    6e7e:	e0 2c       	mov	r14, r0
    6e80:	11 24       	eor	r1, r1
    6e82:	e8 0e       	add	r14, r24
    6e84:	f0 e2       	ldi	r31, 0x20	; 32
    6e86:	ff 2a       	or	r15, r31
    6e88:	0e c0       	rjmp	.+28     	; 0x6ea6 <vfprintf+0xe8>
    6e8a:	9e 32       	cpi	r25, 0x2E	; 46
    6e8c:	29 f4       	brne	.+10     	; 0x6e98 <vfprintf+0xda>
    6e8e:	f6 fc       	sbrc	r15, 6
    6e90:	6b c1       	rjmp	.+726    	; 0x7168 <vfprintf+0x3aa>
    6e92:	40 e4       	ldi	r20, 0x40	; 64
    6e94:	f4 2a       	or	r15, r20
    6e96:	07 c0       	rjmp	.+14     	; 0x6ea6 <vfprintf+0xe8>
    6e98:	9c 36       	cpi	r25, 0x6C	; 108
    6e9a:	19 f4       	brne	.+6      	; 0x6ea2 <vfprintf+0xe4>
    6e9c:	50 e8       	ldi	r21, 0x80	; 128
    6e9e:	f5 2a       	or	r15, r21
    6ea0:	02 c0       	rjmp	.+4      	; 0x6ea6 <vfprintf+0xe8>
    6ea2:	98 36       	cpi	r25, 0x68	; 104
    6ea4:	49 f4       	brne	.+18     	; 0x6eb8 <vfprintf+0xfa>
    6ea6:	f2 01       	movw	r30, r4
    6ea8:	23 fd       	sbrc	r18, 3
    6eaa:	95 91       	lpm	r25, Z+
    6eac:	23 ff       	sbrs	r18, 3
    6eae:	91 91       	ld	r25, Z+
    6eb0:	2f 01       	movw	r4, r30
    6eb2:	99 23       	and	r25, r25
    6eb4:	09 f0       	breq	.+2      	; 0x6eb8 <vfprintf+0xfa>
    6eb6:	b8 cf       	rjmp	.-144    	; 0x6e28 <vfprintf+0x6a>
    6eb8:	89 2f       	mov	r24, r25
    6eba:	85 54       	subi	r24, 0x45	; 69
    6ebc:	83 30       	cpi	r24, 0x03	; 3
    6ebe:	18 f0       	brcs	.+6      	; 0x6ec6 <vfprintf+0x108>
    6ec0:	80 52       	subi	r24, 0x20	; 32
    6ec2:	83 30       	cpi	r24, 0x03	; 3
    6ec4:	38 f4       	brcc	.+14     	; 0x6ed4 <vfprintf+0x116>
    6ec6:	44 e0       	ldi	r20, 0x04	; 4
    6ec8:	50 e0       	ldi	r21, 0x00	; 0
    6eca:	a4 0e       	add	r10, r20
    6ecc:	b5 1e       	adc	r11, r21
    6ece:	5f e3       	ldi	r21, 0x3F	; 63
    6ed0:	59 83       	std	Y+1, r21	; 0x01
    6ed2:	0f c0       	rjmp	.+30     	; 0x6ef2 <vfprintf+0x134>
    6ed4:	93 36       	cpi	r25, 0x63	; 99
    6ed6:	31 f0       	breq	.+12     	; 0x6ee4 <vfprintf+0x126>
    6ed8:	93 37       	cpi	r25, 0x73	; 115
    6eda:	79 f0       	breq	.+30     	; 0x6efa <vfprintf+0x13c>
    6edc:	93 35       	cpi	r25, 0x53	; 83
    6ede:	09 f0       	breq	.+2      	; 0x6ee2 <vfprintf+0x124>
    6ee0:	56 c0       	rjmp	.+172    	; 0x6f8e <vfprintf+0x1d0>
    6ee2:	20 c0       	rjmp	.+64     	; 0x6f24 <vfprintf+0x166>
    6ee4:	f5 01       	movw	r30, r10
    6ee6:	80 81       	ld	r24, Z
    6ee8:	89 83       	std	Y+1, r24	; 0x01
    6eea:	42 e0       	ldi	r20, 0x02	; 2
    6eec:	50 e0       	ldi	r21, 0x00	; 0
    6eee:	a4 0e       	add	r10, r20
    6ef0:	b5 1e       	adc	r11, r21
    6ef2:	61 01       	movw	r12, r2
    6ef4:	01 e0       	ldi	r16, 0x01	; 1
    6ef6:	10 e0       	ldi	r17, 0x00	; 0
    6ef8:	12 c0       	rjmp	.+36     	; 0x6f1e <vfprintf+0x160>
    6efa:	f5 01       	movw	r30, r10
    6efc:	c0 80       	ld	r12, Z
    6efe:	d1 80       	ldd	r13, Z+1	; 0x01
    6f00:	f6 fc       	sbrc	r15, 6
    6f02:	03 c0       	rjmp	.+6      	; 0x6f0a <vfprintf+0x14c>
    6f04:	6f ef       	ldi	r22, 0xFF	; 255
    6f06:	7f ef       	ldi	r23, 0xFF	; 255
    6f08:	02 c0       	rjmp	.+4      	; 0x6f0e <vfprintf+0x150>
    6f0a:	69 2d       	mov	r22, r9
    6f0c:	70 e0       	ldi	r23, 0x00	; 0
    6f0e:	42 e0       	ldi	r20, 0x02	; 2
    6f10:	50 e0       	ldi	r21, 0x00	; 0
    6f12:	a4 0e       	add	r10, r20
    6f14:	b5 1e       	adc	r11, r21
    6f16:	c6 01       	movw	r24, r12
    6f18:	0e 94 c7 38 	call	0x718e	; 0x718e <strnlen>
    6f1c:	8c 01       	movw	r16, r24
    6f1e:	5f e7       	ldi	r21, 0x7F	; 127
    6f20:	f5 22       	and	r15, r21
    6f22:	14 c0       	rjmp	.+40     	; 0x6f4c <vfprintf+0x18e>
    6f24:	f5 01       	movw	r30, r10
    6f26:	c0 80       	ld	r12, Z
    6f28:	d1 80       	ldd	r13, Z+1	; 0x01
    6f2a:	f6 fc       	sbrc	r15, 6
    6f2c:	03 c0       	rjmp	.+6      	; 0x6f34 <vfprintf+0x176>
    6f2e:	6f ef       	ldi	r22, 0xFF	; 255
    6f30:	7f ef       	ldi	r23, 0xFF	; 255
    6f32:	02 c0       	rjmp	.+4      	; 0x6f38 <vfprintf+0x17a>
    6f34:	69 2d       	mov	r22, r9
    6f36:	70 e0       	ldi	r23, 0x00	; 0
    6f38:	42 e0       	ldi	r20, 0x02	; 2
    6f3a:	50 e0       	ldi	r21, 0x00	; 0
    6f3c:	a4 0e       	add	r10, r20
    6f3e:	b5 1e       	adc	r11, r21
    6f40:	c6 01       	movw	r24, r12
    6f42:	0e 94 bc 38 	call	0x7178	; 0x7178 <strnlen_P>
    6f46:	8c 01       	movw	r16, r24
    6f48:	50 e8       	ldi	r21, 0x80	; 128
    6f4a:	f5 2a       	or	r15, r21
    6f4c:	f3 fe       	sbrs	r15, 3
    6f4e:	07 c0       	rjmp	.+14     	; 0x6f5e <vfprintf+0x1a0>
    6f50:	1a c0       	rjmp	.+52     	; 0x6f86 <vfprintf+0x1c8>
    6f52:	80 e2       	ldi	r24, 0x20	; 32
    6f54:	90 e0       	ldi	r25, 0x00	; 0
    6f56:	b3 01       	movw	r22, r6
    6f58:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <fputc>
    6f5c:	ea 94       	dec	r14
    6f5e:	8e 2d       	mov	r24, r14
    6f60:	90 e0       	ldi	r25, 0x00	; 0
    6f62:	08 17       	cp	r16, r24
    6f64:	19 07       	cpc	r17, r25
    6f66:	a8 f3       	brcs	.-22     	; 0x6f52 <vfprintf+0x194>
    6f68:	0e c0       	rjmp	.+28     	; 0x6f86 <vfprintf+0x1c8>
    6f6a:	f6 01       	movw	r30, r12
    6f6c:	f7 fc       	sbrc	r15, 7
    6f6e:	85 91       	lpm	r24, Z+
    6f70:	f7 fe       	sbrs	r15, 7
    6f72:	81 91       	ld	r24, Z+
    6f74:	6f 01       	movw	r12, r30
    6f76:	90 e0       	ldi	r25, 0x00	; 0
    6f78:	b3 01       	movw	r22, r6
    6f7a:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <fputc>
    6f7e:	e1 10       	cpse	r14, r1
    6f80:	ea 94       	dec	r14
    6f82:	01 50       	subi	r16, 0x01	; 1
    6f84:	10 40       	sbci	r17, 0x00	; 0
    6f86:	01 15       	cp	r16, r1
    6f88:	11 05       	cpc	r17, r1
    6f8a:	79 f7       	brne	.-34     	; 0x6f6a <vfprintf+0x1ac>
    6f8c:	ea c0       	rjmp	.+468    	; 0x7162 <vfprintf+0x3a4>
    6f8e:	94 36       	cpi	r25, 0x64	; 100
    6f90:	11 f0       	breq	.+4      	; 0x6f96 <vfprintf+0x1d8>
    6f92:	99 36       	cpi	r25, 0x69	; 105
    6f94:	69 f5       	brne	.+90     	; 0x6ff0 <vfprintf+0x232>
    6f96:	f7 fe       	sbrs	r15, 7
    6f98:	08 c0       	rjmp	.+16     	; 0x6faa <vfprintf+0x1ec>
    6f9a:	f5 01       	movw	r30, r10
    6f9c:	20 81       	ld	r18, Z
    6f9e:	31 81       	ldd	r19, Z+1	; 0x01
    6fa0:	42 81       	ldd	r20, Z+2	; 0x02
    6fa2:	53 81       	ldd	r21, Z+3	; 0x03
    6fa4:	84 e0       	ldi	r24, 0x04	; 4
    6fa6:	90 e0       	ldi	r25, 0x00	; 0
    6fa8:	0a c0       	rjmp	.+20     	; 0x6fbe <vfprintf+0x200>
    6faa:	f5 01       	movw	r30, r10
    6fac:	80 81       	ld	r24, Z
    6fae:	91 81       	ldd	r25, Z+1	; 0x01
    6fb0:	9c 01       	movw	r18, r24
    6fb2:	44 27       	eor	r20, r20
    6fb4:	37 fd       	sbrc	r19, 7
    6fb6:	40 95       	com	r20
    6fb8:	54 2f       	mov	r21, r20
    6fba:	82 e0       	ldi	r24, 0x02	; 2
    6fbc:	90 e0       	ldi	r25, 0x00	; 0
    6fbe:	a8 0e       	add	r10, r24
    6fc0:	b9 1e       	adc	r11, r25
    6fc2:	9f e6       	ldi	r25, 0x6F	; 111
    6fc4:	f9 22       	and	r15, r25
    6fc6:	57 ff       	sbrs	r21, 7
    6fc8:	09 c0       	rjmp	.+18     	; 0x6fdc <vfprintf+0x21e>
    6fca:	50 95       	com	r21
    6fcc:	40 95       	com	r20
    6fce:	30 95       	com	r19
    6fd0:	21 95       	neg	r18
    6fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    6fd4:	4f 4f       	sbci	r20, 0xFF	; 255
    6fd6:	5f 4f       	sbci	r21, 0xFF	; 255
    6fd8:	e0 e8       	ldi	r30, 0x80	; 128
    6fda:	fe 2a       	or	r15, r30
    6fdc:	ca 01       	movw	r24, r20
    6fde:	b9 01       	movw	r22, r18
    6fe0:	a1 01       	movw	r20, r2
    6fe2:	2a e0       	ldi	r18, 0x0A	; 10
    6fe4:	30 e0       	ldi	r19, 0x00	; 0
    6fe6:	0e 94 0e 39 	call	0x721c	; 0x721c <__ultoa_invert>
    6fea:	d8 2e       	mov	r13, r24
    6fec:	d2 18       	sub	r13, r2
    6fee:	40 c0       	rjmp	.+128    	; 0x7070 <vfprintf+0x2b2>
    6ff0:	95 37       	cpi	r25, 0x75	; 117
    6ff2:	29 f4       	brne	.+10     	; 0x6ffe <vfprintf+0x240>
    6ff4:	1f 2d       	mov	r17, r15
    6ff6:	1f 7e       	andi	r17, 0xEF	; 239
    6ff8:	2a e0       	ldi	r18, 0x0A	; 10
    6ffa:	30 e0       	ldi	r19, 0x00	; 0
    6ffc:	1d c0       	rjmp	.+58     	; 0x7038 <vfprintf+0x27a>
    6ffe:	1f 2d       	mov	r17, r15
    7000:	19 7f       	andi	r17, 0xF9	; 249
    7002:	9f 36       	cpi	r25, 0x6F	; 111
    7004:	61 f0       	breq	.+24     	; 0x701e <vfprintf+0x260>
    7006:	90 37       	cpi	r25, 0x70	; 112
    7008:	20 f4       	brcc	.+8      	; 0x7012 <vfprintf+0x254>
    700a:	98 35       	cpi	r25, 0x58	; 88
    700c:	09 f0       	breq	.+2      	; 0x7010 <vfprintf+0x252>
    700e:	ac c0       	rjmp	.+344    	; 0x7168 <vfprintf+0x3aa>
    7010:	0f c0       	rjmp	.+30     	; 0x7030 <vfprintf+0x272>
    7012:	90 37       	cpi	r25, 0x70	; 112
    7014:	39 f0       	breq	.+14     	; 0x7024 <vfprintf+0x266>
    7016:	98 37       	cpi	r25, 0x78	; 120
    7018:	09 f0       	breq	.+2      	; 0x701c <vfprintf+0x25e>
    701a:	a6 c0       	rjmp	.+332    	; 0x7168 <vfprintf+0x3aa>
    701c:	04 c0       	rjmp	.+8      	; 0x7026 <vfprintf+0x268>
    701e:	28 e0       	ldi	r18, 0x08	; 8
    7020:	30 e0       	ldi	r19, 0x00	; 0
    7022:	0a c0       	rjmp	.+20     	; 0x7038 <vfprintf+0x27a>
    7024:	10 61       	ori	r17, 0x10	; 16
    7026:	14 fd       	sbrc	r17, 4
    7028:	14 60       	ori	r17, 0x04	; 4
    702a:	20 e1       	ldi	r18, 0x10	; 16
    702c:	30 e0       	ldi	r19, 0x00	; 0
    702e:	04 c0       	rjmp	.+8      	; 0x7038 <vfprintf+0x27a>
    7030:	14 fd       	sbrc	r17, 4
    7032:	16 60       	ori	r17, 0x06	; 6
    7034:	20 e1       	ldi	r18, 0x10	; 16
    7036:	32 e0       	ldi	r19, 0x02	; 2
    7038:	17 ff       	sbrs	r17, 7
    703a:	08 c0       	rjmp	.+16     	; 0x704c <vfprintf+0x28e>
    703c:	f5 01       	movw	r30, r10
    703e:	60 81       	ld	r22, Z
    7040:	71 81       	ldd	r23, Z+1	; 0x01
    7042:	82 81       	ldd	r24, Z+2	; 0x02
    7044:	93 81       	ldd	r25, Z+3	; 0x03
    7046:	44 e0       	ldi	r20, 0x04	; 4
    7048:	50 e0       	ldi	r21, 0x00	; 0
    704a:	08 c0       	rjmp	.+16     	; 0x705c <vfprintf+0x29e>
    704c:	f5 01       	movw	r30, r10
    704e:	80 81       	ld	r24, Z
    7050:	91 81       	ldd	r25, Z+1	; 0x01
    7052:	bc 01       	movw	r22, r24
    7054:	80 e0       	ldi	r24, 0x00	; 0
    7056:	90 e0       	ldi	r25, 0x00	; 0
    7058:	42 e0       	ldi	r20, 0x02	; 2
    705a:	50 e0       	ldi	r21, 0x00	; 0
    705c:	a4 0e       	add	r10, r20
    705e:	b5 1e       	adc	r11, r21
    7060:	a1 01       	movw	r20, r2
    7062:	0e 94 0e 39 	call	0x721c	; 0x721c <__ultoa_invert>
    7066:	d8 2e       	mov	r13, r24
    7068:	d2 18       	sub	r13, r2
    706a:	8f e7       	ldi	r24, 0x7F	; 127
    706c:	f8 2e       	mov	r15, r24
    706e:	f1 22       	and	r15, r17
    7070:	f6 fe       	sbrs	r15, 6
    7072:	0b c0       	rjmp	.+22     	; 0x708a <vfprintf+0x2cc>
    7074:	5e ef       	ldi	r21, 0xFE	; 254
    7076:	f5 22       	and	r15, r21
    7078:	d9 14       	cp	r13, r9
    707a:	38 f4       	brcc	.+14     	; 0x708a <vfprintf+0x2cc>
    707c:	f4 fe       	sbrs	r15, 4
    707e:	07 c0       	rjmp	.+14     	; 0x708e <vfprintf+0x2d0>
    7080:	f2 fc       	sbrc	r15, 2
    7082:	05 c0       	rjmp	.+10     	; 0x708e <vfprintf+0x2d0>
    7084:	8f ee       	ldi	r24, 0xEF	; 239
    7086:	f8 22       	and	r15, r24
    7088:	02 c0       	rjmp	.+4      	; 0x708e <vfprintf+0x2d0>
    708a:	1d 2d       	mov	r17, r13
    708c:	01 c0       	rjmp	.+2      	; 0x7090 <vfprintf+0x2d2>
    708e:	19 2d       	mov	r17, r9
    7090:	f4 fe       	sbrs	r15, 4
    7092:	0d c0       	rjmp	.+26     	; 0x70ae <vfprintf+0x2f0>
    7094:	fe 01       	movw	r30, r28
    7096:	ed 0d       	add	r30, r13
    7098:	f1 1d       	adc	r31, r1
    709a:	80 81       	ld	r24, Z
    709c:	80 33       	cpi	r24, 0x30	; 48
    709e:	19 f4       	brne	.+6      	; 0x70a6 <vfprintf+0x2e8>
    70a0:	99 ee       	ldi	r25, 0xE9	; 233
    70a2:	f9 22       	and	r15, r25
    70a4:	08 c0       	rjmp	.+16     	; 0x70b6 <vfprintf+0x2f8>
    70a6:	1f 5f       	subi	r17, 0xFF	; 255
    70a8:	f2 fe       	sbrs	r15, 2
    70aa:	05 c0       	rjmp	.+10     	; 0x70b6 <vfprintf+0x2f8>
    70ac:	03 c0       	rjmp	.+6      	; 0x70b4 <vfprintf+0x2f6>
    70ae:	8f 2d       	mov	r24, r15
    70b0:	86 78       	andi	r24, 0x86	; 134
    70b2:	09 f0       	breq	.+2      	; 0x70b6 <vfprintf+0x2f8>
    70b4:	1f 5f       	subi	r17, 0xFF	; 255
    70b6:	0f 2d       	mov	r16, r15
    70b8:	f3 fc       	sbrc	r15, 3
    70ba:	14 c0       	rjmp	.+40     	; 0x70e4 <vfprintf+0x326>
    70bc:	f0 fe       	sbrs	r15, 0
    70be:	0f c0       	rjmp	.+30     	; 0x70de <vfprintf+0x320>
    70c0:	1e 15       	cp	r17, r14
    70c2:	10 f0       	brcs	.+4      	; 0x70c8 <vfprintf+0x30a>
    70c4:	9d 2c       	mov	r9, r13
    70c6:	0b c0       	rjmp	.+22     	; 0x70de <vfprintf+0x320>
    70c8:	9d 2c       	mov	r9, r13
    70ca:	9e 0c       	add	r9, r14
    70cc:	91 1a       	sub	r9, r17
    70ce:	1e 2d       	mov	r17, r14
    70d0:	06 c0       	rjmp	.+12     	; 0x70de <vfprintf+0x320>
    70d2:	80 e2       	ldi	r24, 0x20	; 32
    70d4:	90 e0       	ldi	r25, 0x00	; 0
    70d6:	b3 01       	movw	r22, r6
    70d8:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <fputc>
    70dc:	1f 5f       	subi	r17, 0xFF	; 255
    70de:	1e 15       	cp	r17, r14
    70e0:	c0 f3       	brcs	.-16     	; 0x70d2 <vfprintf+0x314>
    70e2:	04 c0       	rjmp	.+8      	; 0x70ec <vfprintf+0x32e>
    70e4:	1e 15       	cp	r17, r14
    70e6:	10 f4       	brcc	.+4      	; 0x70ec <vfprintf+0x32e>
    70e8:	e1 1a       	sub	r14, r17
    70ea:	01 c0       	rjmp	.+2      	; 0x70ee <vfprintf+0x330>
    70ec:	ee 24       	eor	r14, r14
    70ee:	04 ff       	sbrs	r16, 4
    70f0:	0f c0       	rjmp	.+30     	; 0x7110 <vfprintf+0x352>
    70f2:	80 e3       	ldi	r24, 0x30	; 48
    70f4:	90 e0       	ldi	r25, 0x00	; 0
    70f6:	b3 01       	movw	r22, r6
    70f8:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <fputc>
    70fc:	02 ff       	sbrs	r16, 2
    70fe:	1d c0       	rjmp	.+58     	; 0x713a <vfprintf+0x37c>
    7100:	01 fd       	sbrc	r16, 1
    7102:	03 c0       	rjmp	.+6      	; 0x710a <vfprintf+0x34c>
    7104:	88 e7       	ldi	r24, 0x78	; 120
    7106:	90 e0       	ldi	r25, 0x00	; 0
    7108:	0e c0       	rjmp	.+28     	; 0x7126 <vfprintf+0x368>
    710a:	88 e5       	ldi	r24, 0x58	; 88
    710c:	90 e0       	ldi	r25, 0x00	; 0
    710e:	0b c0       	rjmp	.+22     	; 0x7126 <vfprintf+0x368>
    7110:	80 2f       	mov	r24, r16
    7112:	86 78       	andi	r24, 0x86	; 134
    7114:	91 f0       	breq	.+36     	; 0x713a <vfprintf+0x37c>
    7116:	01 ff       	sbrs	r16, 1
    7118:	02 c0       	rjmp	.+4      	; 0x711e <vfprintf+0x360>
    711a:	8b e2       	ldi	r24, 0x2B	; 43
    711c:	01 c0       	rjmp	.+2      	; 0x7120 <vfprintf+0x362>
    711e:	80 e2       	ldi	r24, 0x20	; 32
    7120:	f7 fc       	sbrc	r15, 7
    7122:	8d e2       	ldi	r24, 0x2D	; 45
    7124:	90 e0       	ldi	r25, 0x00	; 0
    7126:	b3 01       	movw	r22, r6
    7128:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <fputc>
    712c:	06 c0       	rjmp	.+12     	; 0x713a <vfprintf+0x37c>
    712e:	80 e3       	ldi	r24, 0x30	; 48
    7130:	90 e0       	ldi	r25, 0x00	; 0
    7132:	b3 01       	movw	r22, r6
    7134:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <fputc>
    7138:	9a 94       	dec	r9
    713a:	d9 14       	cp	r13, r9
    713c:	c0 f3       	brcs	.-16     	; 0x712e <vfprintf+0x370>
    713e:	da 94       	dec	r13
    7140:	f1 01       	movw	r30, r2
    7142:	ed 0d       	add	r30, r13
    7144:	f1 1d       	adc	r31, r1
    7146:	80 81       	ld	r24, Z
    7148:	90 e0       	ldi	r25, 0x00	; 0
    714a:	b3 01       	movw	r22, r6
    714c:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <fputc>
    7150:	dd 20       	and	r13, r13
    7152:	a9 f7       	brne	.-22     	; 0x713e <vfprintf+0x380>
    7154:	06 c0       	rjmp	.+12     	; 0x7162 <vfprintf+0x3a4>
    7156:	80 e2       	ldi	r24, 0x20	; 32
    7158:	90 e0       	ldi	r25, 0x00	; 0
    715a:	b3 01       	movw	r22, r6
    715c:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <fputc>
    7160:	ea 94       	dec	r14
    7162:	ee 20       	and	r14, r14
    7164:	c1 f7       	brne	.-16     	; 0x7156 <vfprintf+0x398>
    7166:	43 ce       	rjmp	.-890    	; 0x6dee <vfprintf+0x30>
    7168:	f3 01       	movw	r30, r6
    716a:	66 81       	ldd	r22, Z+6	; 0x06
    716c:	77 81       	ldd	r23, Z+7	; 0x07
    716e:	cb 01       	movw	r24, r22
    7170:	2b 96       	adiw	r28, 0x0b	; 11
    7172:	e2 e1       	ldi	r30, 0x12	; 18
    7174:	0c 94 51 36 	jmp	0x6ca2	; 0x6ca2 <__epilogue_restores__>

00007178 <strnlen_P>:
    7178:	fc 01       	movw	r30, r24
    717a:	05 90       	lpm	r0, Z+
    717c:	61 50       	subi	r22, 0x01	; 1
    717e:	70 40       	sbci	r23, 0x00	; 0
    7180:	01 10       	cpse	r0, r1
    7182:	d8 f7       	brcc	.-10     	; 0x717a <strnlen_P+0x2>
    7184:	80 95       	com	r24
    7186:	90 95       	com	r25
    7188:	8e 0f       	add	r24, r30
    718a:	9f 1f       	adc	r25, r31
    718c:	08 95       	ret

0000718e <strnlen>:
    718e:	fc 01       	movw	r30, r24
    7190:	61 50       	subi	r22, 0x01	; 1
    7192:	70 40       	sbci	r23, 0x00	; 0
    7194:	01 90       	ld	r0, Z+
    7196:	01 10       	cpse	r0, r1
    7198:	d8 f7       	brcc	.-10     	; 0x7190 <strnlen+0x2>
    719a:	80 95       	com	r24
    719c:	90 95       	com	r25
    719e:	8e 0f       	add	r24, r30
    71a0:	9f 1f       	adc	r25, r31
    71a2:	08 95       	ret

000071a4 <strrev>:
    71a4:	dc 01       	movw	r26, r24
    71a6:	fc 01       	movw	r30, r24
    71a8:	67 2f       	mov	r22, r23
    71aa:	71 91       	ld	r23, Z+
    71ac:	77 23       	and	r23, r23
    71ae:	e1 f7       	brne	.-8      	; 0x71a8 <strrev+0x4>
    71b0:	32 97       	sbiw	r30, 0x02	; 2
    71b2:	04 c0       	rjmp	.+8      	; 0x71bc <strrev+0x18>
    71b4:	7c 91       	ld	r23, X
    71b6:	6d 93       	st	X+, r22
    71b8:	70 83       	st	Z, r23
    71ba:	62 91       	ld	r22, -Z
    71bc:	ae 17       	cp	r26, r30
    71be:	bf 07       	cpc	r27, r31
    71c0:	c8 f3       	brcs	.-14     	; 0x71b4 <strrev+0x10>
    71c2:	08 95       	ret

000071c4 <fputc>:
    71c4:	0f 93       	push	r16
    71c6:	1f 93       	push	r17
    71c8:	cf 93       	push	r28
    71ca:	df 93       	push	r29
    71cc:	8c 01       	movw	r16, r24
    71ce:	eb 01       	movw	r28, r22
    71d0:	8b 81       	ldd	r24, Y+3	; 0x03
    71d2:	81 ff       	sbrs	r24, 1
    71d4:	1b c0       	rjmp	.+54     	; 0x720c <fputc+0x48>
    71d6:	82 ff       	sbrs	r24, 2
    71d8:	0d c0       	rjmp	.+26     	; 0x71f4 <fputc+0x30>
    71da:	2e 81       	ldd	r18, Y+6	; 0x06
    71dc:	3f 81       	ldd	r19, Y+7	; 0x07
    71de:	8c 81       	ldd	r24, Y+4	; 0x04
    71e0:	9d 81       	ldd	r25, Y+5	; 0x05
    71e2:	28 17       	cp	r18, r24
    71e4:	39 07       	cpc	r19, r25
    71e6:	64 f4       	brge	.+24     	; 0x7200 <fputc+0x3c>
    71e8:	e8 81       	ld	r30, Y
    71ea:	f9 81       	ldd	r31, Y+1	; 0x01
    71ec:	01 93       	st	Z+, r16
    71ee:	f9 83       	std	Y+1, r31	; 0x01
    71f0:	e8 83       	st	Y, r30
    71f2:	06 c0       	rjmp	.+12     	; 0x7200 <fputc+0x3c>
    71f4:	e8 85       	ldd	r30, Y+8	; 0x08
    71f6:	f9 85       	ldd	r31, Y+9	; 0x09
    71f8:	80 2f       	mov	r24, r16
    71fa:	09 95       	icall
    71fc:	89 2b       	or	r24, r25
    71fe:	31 f4       	brne	.+12     	; 0x720c <fputc+0x48>
    7200:	8e 81       	ldd	r24, Y+6	; 0x06
    7202:	9f 81       	ldd	r25, Y+7	; 0x07
    7204:	01 96       	adiw	r24, 0x01	; 1
    7206:	9f 83       	std	Y+7, r25	; 0x07
    7208:	8e 83       	std	Y+6, r24	; 0x06
    720a:	02 c0       	rjmp	.+4      	; 0x7210 <fputc+0x4c>
    720c:	0f ef       	ldi	r16, 0xFF	; 255
    720e:	1f ef       	ldi	r17, 0xFF	; 255
    7210:	c8 01       	movw	r24, r16
    7212:	df 91       	pop	r29
    7214:	cf 91       	pop	r28
    7216:	1f 91       	pop	r17
    7218:	0f 91       	pop	r16
    721a:	08 95       	ret

0000721c <__ultoa_invert>:
    721c:	fa 01       	movw	r30, r20
    721e:	aa 27       	eor	r26, r26
    7220:	28 30       	cpi	r18, 0x08	; 8
    7222:	51 f1       	breq	.+84     	; 0x7278 <__ultoa_invert+0x5c>
    7224:	20 31       	cpi	r18, 0x10	; 16
    7226:	81 f1       	breq	.+96     	; 0x7288 <__ultoa_invert+0x6c>
    7228:	e8 94       	clt
    722a:	6f 93       	push	r22
    722c:	6e 7f       	andi	r22, 0xFE	; 254
    722e:	6e 5f       	subi	r22, 0xFE	; 254
    7230:	7f 4f       	sbci	r23, 0xFF	; 255
    7232:	8f 4f       	sbci	r24, 0xFF	; 255
    7234:	9f 4f       	sbci	r25, 0xFF	; 255
    7236:	af 4f       	sbci	r26, 0xFF	; 255
    7238:	b1 e0       	ldi	r27, 0x01	; 1
    723a:	3e d0       	rcall	.+124    	; 0x72b8 <__ultoa_invert+0x9c>
    723c:	b4 e0       	ldi	r27, 0x04	; 4
    723e:	3c d0       	rcall	.+120    	; 0x72b8 <__ultoa_invert+0x9c>
    7240:	67 0f       	add	r22, r23
    7242:	78 1f       	adc	r23, r24
    7244:	89 1f       	adc	r24, r25
    7246:	9a 1f       	adc	r25, r26
    7248:	a1 1d       	adc	r26, r1
    724a:	68 0f       	add	r22, r24
    724c:	79 1f       	adc	r23, r25
    724e:	8a 1f       	adc	r24, r26
    7250:	91 1d       	adc	r25, r1
    7252:	a1 1d       	adc	r26, r1
    7254:	6a 0f       	add	r22, r26
    7256:	71 1d       	adc	r23, r1
    7258:	81 1d       	adc	r24, r1
    725a:	91 1d       	adc	r25, r1
    725c:	a1 1d       	adc	r26, r1
    725e:	20 d0       	rcall	.+64     	; 0x72a0 <__ultoa_invert+0x84>
    7260:	09 f4       	brne	.+2      	; 0x7264 <__ultoa_invert+0x48>
    7262:	68 94       	set
    7264:	3f 91       	pop	r19
    7266:	2a e0       	ldi	r18, 0x0A	; 10
    7268:	26 9f       	mul	r18, r22
    726a:	11 24       	eor	r1, r1
    726c:	30 19       	sub	r19, r0
    726e:	30 5d       	subi	r19, 0xD0	; 208
    7270:	31 93       	st	Z+, r19
    7272:	de f6       	brtc	.-74     	; 0x722a <__ultoa_invert+0xe>
    7274:	cf 01       	movw	r24, r30
    7276:	08 95       	ret
    7278:	46 2f       	mov	r20, r22
    727a:	47 70       	andi	r20, 0x07	; 7
    727c:	40 5d       	subi	r20, 0xD0	; 208
    727e:	41 93       	st	Z+, r20
    7280:	b3 e0       	ldi	r27, 0x03	; 3
    7282:	0f d0       	rcall	.+30     	; 0x72a2 <__ultoa_invert+0x86>
    7284:	c9 f7       	brne	.-14     	; 0x7278 <__ultoa_invert+0x5c>
    7286:	f6 cf       	rjmp	.-20     	; 0x7274 <__ultoa_invert+0x58>
    7288:	46 2f       	mov	r20, r22
    728a:	4f 70       	andi	r20, 0x0F	; 15
    728c:	40 5d       	subi	r20, 0xD0	; 208
    728e:	4a 33       	cpi	r20, 0x3A	; 58
    7290:	18 f0       	brcs	.+6      	; 0x7298 <__ultoa_invert+0x7c>
    7292:	49 5d       	subi	r20, 0xD9	; 217
    7294:	31 fd       	sbrc	r19, 1
    7296:	40 52       	subi	r20, 0x20	; 32
    7298:	41 93       	st	Z+, r20
    729a:	02 d0       	rcall	.+4      	; 0x72a0 <__ultoa_invert+0x84>
    729c:	a9 f7       	brne	.-22     	; 0x7288 <__ultoa_invert+0x6c>
    729e:	ea cf       	rjmp	.-44     	; 0x7274 <__ultoa_invert+0x58>
    72a0:	b4 e0       	ldi	r27, 0x04	; 4
    72a2:	a6 95       	lsr	r26
    72a4:	97 95       	ror	r25
    72a6:	87 95       	ror	r24
    72a8:	77 95       	ror	r23
    72aa:	67 95       	ror	r22
    72ac:	ba 95       	dec	r27
    72ae:	c9 f7       	brne	.-14     	; 0x72a2 <__ultoa_invert+0x86>
    72b0:	00 97       	sbiw	r24, 0x00	; 0
    72b2:	61 05       	cpc	r22, r1
    72b4:	71 05       	cpc	r23, r1
    72b6:	08 95       	ret
    72b8:	9b 01       	movw	r18, r22
    72ba:	ac 01       	movw	r20, r24
    72bc:	0a 2e       	mov	r0, r26
    72be:	06 94       	lsr	r0
    72c0:	57 95       	ror	r21
    72c2:	47 95       	ror	r20
    72c4:	37 95       	ror	r19
    72c6:	27 95       	ror	r18
    72c8:	ba 95       	dec	r27
    72ca:	c9 f7       	brne	.-14     	; 0x72be <__ultoa_invert+0xa2>
    72cc:	62 0f       	add	r22, r18
    72ce:	73 1f       	adc	r23, r19
    72d0:	84 1f       	adc	r24, r20
    72d2:	95 1f       	adc	r25, r21
    72d4:	a0 1d       	adc	r26, r0
    72d6:	08 95       	ret

000072d8 <_exit>:
    72d8:	f8 94       	cli

000072da <__stop_program>:
    72da:	ff cf       	rjmp	.-2      	; 0x72da <__stop_program>
